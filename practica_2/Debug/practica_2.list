
practica_2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001678  080001ac  080001ac  000101ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  08001824  08001824  00011824  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800183c  0800183c  00020018  2**0
                  CONTENTS
  4 .ARM          00000008  0800183c  0800183c  0001183c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08001844  08001844  00020018  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08001844  08001844  00011844  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08001848  08001848  00011848  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000018  20000000  0800184c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020018  2**0
                  CONTENTS
 10 .bss          0000002c  20000018  20000018  00020018  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20000044  20000044  00020018  2**0
                  ALLOC
 12 .ARM.attributes 0000002a  00000000  00000000  00020018  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  00020042  2**0
                  CONTENTS, READONLY
 14 .debug_info   00003fdb  00000000  00000000  00020085  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00001058  00000000  00000000  00024060  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00000490  00000000  00000000  000250b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00000346  00000000  00000000  00025548  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  0002489b  00000000  00000000  0002588e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   000064dc  00000000  00000000  0004a129  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000e06cb  00000000  00000000  00050605  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  0000107c  00000000  00000000  00130cd0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000005b  00000000  00000000  00131d4c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001ac <__do_global_dtors_aux>:
 80001ac:	b510      	push	{r4, lr}
 80001ae:	4c05      	ldr	r4, [pc, #20]	; (80001c4 <__do_global_dtors_aux+0x18>)
 80001b0:	7823      	ldrb	r3, [r4, #0]
 80001b2:	b933      	cbnz	r3, 80001c2 <__do_global_dtors_aux+0x16>
 80001b4:	4b04      	ldr	r3, [pc, #16]	; (80001c8 <__do_global_dtors_aux+0x1c>)
 80001b6:	b113      	cbz	r3, 80001be <__do_global_dtors_aux+0x12>
 80001b8:	4804      	ldr	r0, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x20>)
 80001ba:	f3af 8000 	nop.w
 80001be:	2301      	movs	r3, #1
 80001c0:	7023      	strb	r3, [r4, #0]
 80001c2:	bd10      	pop	{r4, pc}
 80001c4:	20000018 	.word	0x20000018
 80001c8:	00000000 	.word	0x00000000
 80001cc:	0800180c 	.word	0x0800180c

080001d0 <frame_dummy>:
 80001d0:	b508      	push	{r3, lr}
 80001d2:	4b03      	ldr	r3, [pc, #12]	; (80001e0 <frame_dummy+0x10>)
 80001d4:	b11b      	cbz	r3, 80001de <frame_dummy+0xe>
 80001d6:	4903      	ldr	r1, [pc, #12]	; (80001e4 <frame_dummy+0x14>)
 80001d8:	4803      	ldr	r0, [pc, #12]	; (80001e8 <frame_dummy+0x18>)
 80001da:	f3af 8000 	nop.w
 80001de:	bd08      	pop	{r3, pc}
 80001e0:	00000000 	.word	0x00000000
 80001e4:	2000001c 	.word	0x2000001c
 80001e8:	0800180c 	.word	0x0800180c

080001ec <__aeabi_uldivmod>:
 80001ec:	b953      	cbnz	r3, 8000204 <__aeabi_uldivmod+0x18>
 80001ee:	b94a      	cbnz	r2, 8000204 <__aeabi_uldivmod+0x18>
 80001f0:	2900      	cmp	r1, #0
 80001f2:	bf08      	it	eq
 80001f4:	2800      	cmpeq	r0, #0
 80001f6:	bf1c      	itt	ne
 80001f8:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80001fc:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000200:	f000 b970 	b.w	80004e4 <__aeabi_idiv0>
 8000204:	f1ad 0c08 	sub.w	ip, sp, #8
 8000208:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800020c:	f000 f806 	bl	800021c <__udivmoddi4>
 8000210:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000214:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000218:	b004      	add	sp, #16
 800021a:	4770      	bx	lr

0800021c <__udivmoddi4>:
 800021c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000220:	9e08      	ldr	r6, [sp, #32]
 8000222:	460d      	mov	r5, r1
 8000224:	4604      	mov	r4, r0
 8000226:	460f      	mov	r7, r1
 8000228:	2b00      	cmp	r3, #0
 800022a:	d14a      	bne.n	80002c2 <__udivmoddi4+0xa6>
 800022c:	428a      	cmp	r2, r1
 800022e:	4694      	mov	ip, r2
 8000230:	d965      	bls.n	80002fe <__udivmoddi4+0xe2>
 8000232:	fab2 f382 	clz	r3, r2
 8000236:	b143      	cbz	r3, 800024a <__udivmoddi4+0x2e>
 8000238:	fa02 fc03 	lsl.w	ip, r2, r3
 800023c:	f1c3 0220 	rsb	r2, r3, #32
 8000240:	409f      	lsls	r7, r3
 8000242:	fa20 f202 	lsr.w	r2, r0, r2
 8000246:	4317      	orrs	r7, r2
 8000248:	409c      	lsls	r4, r3
 800024a:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 800024e:	fa1f f58c 	uxth.w	r5, ip
 8000252:	fbb7 f1fe 	udiv	r1, r7, lr
 8000256:	0c22      	lsrs	r2, r4, #16
 8000258:	fb0e 7711 	mls	r7, lr, r1, r7
 800025c:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000260:	fb01 f005 	mul.w	r0, r1, r5
 8000264:	4290      	cmp	r0, r2
 8000266:	d90a      	bls.n	800027e <__udivmoddi4+0x62>
 8000268:	eb1c 0202 	adds.w	r2, ip, r2
 800026c:	f101 37ff 	add.w	r7, r1, #4294967295	; 0xffffffff
 8000270:	f080 811b 	bcs.w	80004aa <__udivmoddi4+0x28e>
 8000274:	4290      	cmp	r0, r2
 8000276:	f240 8118 	bls.w	80004aa <__udivmoddi4+0x28e>
 800027a:	3902      	subs	r1, #2
 800027c:	4462      	add	r2, ip
 800027e:	1a12      	subs	r2, r2, r0
 8000280:	b2a4      	uxth	r4, r4
 8000282:	fbb2 f0fe 	udiv	r0, r2, lr
 8000286:	fb0e 2210 	mls	r2, lr, r0, r2
 800028a:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800028e:	fb00 f505 	mul.w	r5, r0, r5
 8000292:	42a5      	cmp	r5, r4
 8000294:	d90a      	bls.n	80002ac <__udivmoddi4+0x90>
 8000296:	eb1c 0404 	adds.w	r4, ip, r4
 800029a:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 800029e:	f080 8106 	bcs.w	80004ae <__udivmoddi4+0x292>
 80002a2:	42a5      	cmp	r5, r4
 80002a4:	f240 8103 	bls.w	80004ae <__udivmoddi4+0x292>
 80002a8:	4464      	add	r4, ip
 80002aa:	3802      	subs	r0, #2
 80002ac:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80002b0:	1b64      	subs	r4, r4, r5
 80002b2:	2100      	movs	r1, #0
 80002b4:	b11e      	cbz	r6, 80002be <__udivmoddi4+0xa2>
 80002b6:	40dc      	lsrs	r4, r3
 80002b8:	2300      	movs	r3, #0
 80002ba:	e9c6 4300 	strd	r4, r3, [r6]
 80002be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c2:	428b      	cmp	r3, r1
 80002c4:	d908      	bls.n	80002d8 <__udivmoddi4+0xbc>
 80002c6:	2e00      	cmp	r6, #0
 80002c8:	f000 80ec 	beq.w	80004a4 <__udivmoddi4+0x288>
 80002cc:	2100      	movs	r1, #0
 80002ce:	e9c6 0500 	strd	r0, r5, [r6]
 80002d2:	4608      	mov	r0, r1
 80002d4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002d8:	fab3 f183 	clz	r1, r3
 80002dc:	2900      	cmp	r1, #0
 80002de:	d149      	bne.n	8000374 <__udivmoddi4+0x158>
 80002e0:	42ab      	cmp	r3, r5
 80002e2:	d302      	bcc.n	80002ea <__udivmoddi4+0xce>
 80002e4:	4282      	cmp	r2, r0
 80002e6:	f200 80f7 	bhi.w	80004d8 <__udivmoddi4+0x2bc>
 80002ea:	1a84      	subs	r4, r0, r2
 80002ec:	eb65 0203 	sbc.w	r2, r5, r3
 80002f0:	2001      	movs	r0, #1
 80002f2:	4617      	mov	r7, r2
 80002f4:	2e00      	cmp	r6, #0
 80002f6:	d0e2      	beq.n	80002be <__udivmoddi4+0xa2>
 80002f8:	e9c6 4700 	strd	r4, r7, [r6]
 80002fc:	e7df      	b.n	80002be <__udivmoddi4+0xa2>
 80002fe:	b902      	cbnz	r2, 8000302 <__udivmoddi4+0xe6>
 8000300:	deff      	udf	#255	; 0xff
 8000302:	fab2 f382 	clz	r3, r2
 8000306:	2b00      	cmp	r3, #0
 8000308:	f040 808f 	bne.w	800042a <__udivmoddi4+0x20e>
 800030c:	1a8a      	subs	r2, r1, r2
 800030e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000312:	fa1f fe8c 	uxth.w	lr, ip
 8000316:	2101      	movs	r1, #1
 8000318:	fbb2 f5f7 	udiv	r5, r2, r7
 800031c:	fb07 2015 	mls	r0, r7, r5, r2
 8000320:	0c22      	lsrs	r2, r4, #16
 8000322:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000326:	fb0e f005 	mul.w	r0, lr, r5
 800032a:	4290      	cmp	r0, r2
 800032c:	d908      	bls.n	8000340 <__udivmoddi4+0x124>
 800032e:	eb1c 0202 	adds.w	r2, ip, r2
 8000332:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000336:	d202      	bcs.n	800033e <__udivmoddi4+0x122>
 8000338:	4290      	cmp	r0, r2
 800033a:	f200 80ca 	bhi.w	80004d2 <__udivmoddi4+0x2b6>
 800033e:	4645      	mov	r5, r8
 8000340:	1a12      	subs	r2, r2, r0
 8000342:	b2a4      	uxth	r4, r4
 8000344:	fbb2 f0f7 	udiv	r0, r2, r7
 8000348:	fb07 2210 	mls	r2, r7, r0, r2
 800034c:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000350:	fb0e fe00 	mul.w	lr, lr, r0
 8000354:	45a6      	cmp	lr, r4
 8000356:	d908      	bls.n	800036a <__udivmoddi4+0x14e>
 8000358:	eb1c 0404 	adds.w	r4, ip, r4
 800035c:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000360:	d202      	bcs.n	8000368 <__udivmoddi4+0x14c>
 8000362:	45a6      	cmp	lr, r4
 8000364:	f200 80ba 	bhi.w	80004dc <__udivmoddi4+0x2c0>
 8000368:	4610      	mov	r0, r2
 800036a:	eba4 040e 	sub.w	r4, r4, lr
 800036e:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000372:	e79f      	b.n	80002b4 <__udivmoddi4+0x98>
 8000374:	f1c1 0720 	rsb	r7, r1, #32
 8000378:	408b      	lsls	r3, r1
 800037a:	fa22 fc07 	lsr.w	ip, r2, r7
 800037e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000382:	fa05 f401 	lsl.w	r4, r5, r1
 8000386:	fa20 f307 	lsr.w	r3, r0, r7
 800038a:	40fd      	lsrs	r5, r7
 800038c:	4323      	orrs	r3, r4
 800038e:	fa00 f901 	lsl.w	r9, r0, r1
 8000392:	ea4f 401c 	mov.w	r0, ip, lsr #16
 8000396:	fa1f fe8c 	uxth.w	lr, ip
 800039a:	fbb5 f8f0 	udiv	r8, r5, r0
 800039e:	0c1c      	lsrs	r4, r3, #16
 80003a0:	fb00 5518 	mls	r5, r0, r8, r5
 80003a4:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80003a8:	fb08 f50e 	mul.w	r5, r8, lr
 80003ac:	42a5      	cmp	r5, r4
 80003ae:	fa02 f201 	lsl.w	r2, r2, r1
 80003b2:	d90b      	bls.n	80003cc <__udivmoddi4+0x1b0>
 80003b4:	eb1c 0404 	adds.w	r4, ip, r4
 80003b8:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 80003bc:	f080 8087 	bcs.w	80004ce <__udivmoddi4+0x2b2>
 80003c0:	42a5      	cmp	r5, r4
 80003c2:	f240 8084 	bls.w	80004ce <__udivmoddi4+0x2b2>
 80003c6:	f1a8 0802 	sub.w	r8, r8, #2
 80003ca:	4464      	add	r4, ip
 80003cc:	1b64      	subs	r4, r4, r5
 80003ce:	b29d      	uxth	r5, r3
 80003d0:	fbb4 f3f0 	udiv	r3, r4, r0
 80003d4:	fb00 4413 	mls	r4, r0, r3, r4
 80003d8:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80003dc:	fb03 fe0e 	mul.w	lr, r3, lr
 80003e0:	45a6      	cmp	lr, r4
 80003e2:	d908      	bls.n	80003f6 <__udivmoddi4+0x1da>
 80003e4:	eb1c 0404 	adds.w	r4, ip, r4
 80003e8:	f103 30ff 	add.w	r0, r3, #4294967295	; 0xffffffff
 80003ec:	d26b      	bcs.n	80004c6 <__udivmoddi4+0x2aa>
 80003ee:	45a6      	cmp	lr, r4
 80003f0:	d969      	bls.n	80004c6 <__udivmoddi4+0x2aa>
 80003f2:	3b02      	subs	r3, #2
 80003f4:	4464      	add	r4, ip
 80003f6:	ea43 4008 	orr.w	r0, r3, r8, lsl #16
 80003fa:	fba0 8302 	umull	r8, r3, r0, r2
 80003fe:	eba4 040e 	sub.w	r4, r4, lr
 8000402:	429c      	cmp	r4, r3
 8000404:	46c6      	mov	lr, r8
 8000406:	461d      	mov	r5, r3
 8000408:	d355      	bcc.n	80004b6 <__udivmoddi4+0x29a>
 800040a:	d052      	beq.n	80004b2 <__udivmoddi4+0x296>
 800040c:	b156      	cbz	r6, 8000424 <__udivmoddi4+0x208>
 800040e:	ebb9 030e 	subs.w	r3, r9, lr
 8000412:	eb64 0405 	sbc.w	r4, r4, r5
 8000416:	fa04 f707 	lsl.w	r7, r4, r7
 800041a:	40cb      	lsrs	r3, r1
 800041c:	40cc      	lsrs	r4, r1
 800041e:	431f      	orrs	r7, r3
 8000420:	e9c6 7400 	strd	r7, r4, [r6]
 8000424:	2100      	movs	r1, #0
 8000426:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800042a:	f1c3 0120 	rsb	r1, r3, #32
 800042e:	fa02 fc03 	lsl.w	ip, r2, r3
 8000432:	fa20 f201 	lsr.w	r2, r0, r1
 8000436:	fa25 f101 	lsr.w	r1, r5, r1
 800043a:	409d      	lsls	r5, r3
 800043c:	432a      	orrs	r2, r5
 800043e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000442:	fa1f fe8c 	uxth.w	lr, ip
 8000446:	fbb1 f0f7 	udiv	r0, r1, r7
 800044a:	fb07 1510 	mls	r5, r7, r0, r1
 800044e:	0c11      	lsrs	r1, r2, #16
 8000450:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000454:	fb00 f50e 	mul.w	r5, r0, lr
 8000458:	428d      	cmp	r5, r1
 800045a:	fa04 f403 	lsl.w	r4, r4, r3
 800045e:	d908      	bls.n	8000472 <__udivmoddi4+0x256>
 8000460:	eb1c 0101 	adds.w	r1, ip, r1
 8000464:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000468:	d22f      	bcs.n	80004ca <__udivmoddi4+0x2ae>
 800046a:	428d      	cmp	r5, r1
 800046c:	d92d      	bls.n	80004ca <__udivmoddi4+0x2ae>
 800046e:	3802      	subs	r0, #2
 8000470:	4461      	add	r1, ip
 8000472:	1b49      	subs	r1, r1, r5
 8000474:	b292      	uxth	r2, r2
 8000476:	fbb1 f5f7 	udiv	r5, r1, r7
 800047a:	fb07 1115 	mls	r1, r7, r5, r1
 800047e:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000482:	fb05 f10e 	mul.w	r1, r5, lr
 8000486:	4291      	cmp	r1, r2
 8000488:	d908      	bls.n	800049c <__udivmoddi4+0x280>
 800048a:	eb1c 0202 	adds.w	r2, ip, r2
 800048e:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000492:	d216      	bcs.n	80004c2 <__udivmoddi4+0x2a6>
 8000494:	4291      	cmp	r1, r2
 8000496:	d914      	bls.n	80004c2 <__udivmoddi4+0x2a6>
 8000498:	3d02      	subs	r5, #2
 800049a:	4462      	add	r2, ip
 800049c:	1a52      	subs	r2, r2, r1
 800049e:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 80004a2:	e739      	b.n	8000318 <__udivmoddi4+0xfc>
 80004a4:	4631      	mov	r1, r6
 80004a6:	4630      	mov	r0, r6
 80004a8:	e709      	b.n	80002be <__udivmoddi4+0xa2>
 80004aa:	4639      	mov	r1, r7
 80004ac:	e6e7      	b.n	800027e <__udivmoddi4+0x62>
 80004ae:	4610      	mov	r0, r2
 80004b0:	e6fc      	b.n	80002ac <__udivmoddi4+0x90>
 80004b2:	45c1      	cmp	r9, r8
 80004b4:	d2aa      	bcs.n	800040c <__udivmoddi4+0x1f0>
 80004b6:	ebb8 0e02 	subs.w	lr, r8, r2
 80004ba:	eb63 050c 	sbc.w	r5, r3, ip
 80004be:	3801      	subs	r0, #1
 80004c0:	e7a4      	b.n	800040c <__udivmoddi4+0x1f0>
 80004c2:	4645      	mov	r5, r8
 80004c4:	e7ea      	b.n	800049c <__udivmoddi4+0x280>
 80004c6:	4603      	mov	r3, r0
 80004c8:	e795      	b.n	80003f6 <__udivmoddi4+0x1da>
 80004ca:	4640      	mov	r0, r8
 80004cc:	e7d1      	b.n	8000472 <__udivmoddi4+0x256>
 80004ce:	46d0      	mov	r8, sl
 80004d0:	e77c      	b.n	80003cc <__udivmoddi4+0x1b0>
 80004d2:	3d02      	subs	r5, #2
 80004d4:	4462      	add	r2, ip
 80004d6:	e733      	b.n	8000340 <__udivmoddi4+0x124>
 80004d8:	4608      	mov	r0, r1
 80004da:	e70b      	b.n	80002f4 <__udivmoddi4+0xd8>
 80004dc:	4464      	add	r4, ip
 80004de:	3802      	subs	r0, #2
 80004e0:	e743      	b.n	800036a <__udivmoddi4+0x14e>
 80004e2:	bf00      	nop

080004e4 <__aeabi_idiv0>:
 80004e4:	4770      	bx	lr
 80004e6:	bf00      	nop

080004e8 <BSP_LED_Init>:
  *     @arg  LED1
  *     @arg  LED2
  *     @arg  LED3
  */
void BSP_LED_Init(Led_TypeDef Led)
{
 80004e8:	b580      	push	{r7, lr}
 80004ea:	b08a      	sub	sp, #40	; 0x28
 80004ec:	af00      	add	r7, sp, #0
 80004ee:	4603      	mov	r3, r0
 80004f0:	71fb      	strb	r3, [r7, #7]
  GPIO_InitTypeDef  GPIO_InitStruct;
  
  /* Enable the GPIO_LED Clock */
  LEDx_GPIO_CLK_ENABLE(Led);
 80004f2:	79fb      	ldrb	r3, [r7, #7]
 80004f4:	2b00      	cmp	r3, #0
 80004f6:	d10e      	bne.n	8000516 <BSP_LED_Init+0x2e>
 80004f8:	2300      	movs	r3, #0
 80004fa:	613b      	str	r3, [r7, #16]
 80004fc:	4b1f      	ldr	r3, [pc, #124]	; (800057c <BSP_LED_Init+0x94>)
 80004fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000500:	4a1e      	ldr	r2, [pc, #120]	; (800057c <BSP_LED_Init+0x94>)
 8000502:	f043 0302 	orr.w	r3, r3, #2
 8000506:	6313      	str	r3, [r2, #48]	; 0x30
 8000508:	4b1c      	ldr	r3, [pc, #112]	; (800057c <BSP_LED_Init+0x94>)
 800050a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800050c:	f003 0302 	and.w	r3, r3, #2
 8000510:	613b      	str	r3, [r7, #16]
 8000512:	693b      	ldr	r3, [r7, #16]
 8000514:	e00d      	b.n	8000532 <BSP_LED_Init+0x4a>
 8000516:	2300      	movs	r3, #0
 8000518:	60fb      	str	r3, [r7, #12]
 800051a:	4b18      	ldr	r3, [pc, #96]	; (800057c <BSP_LED_Init+0x94>)
 800051c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800051e:	4a17      	ldr	r2, [pc, #92]	; (800057c <BSP_LED_Init+0x94>)
 8000520:	f043 0302 	orr.w	r3, r3, #2
 8000524:	6313      	str	r3, [r2, #48]	; 0x30
 8000526:	4b15      	ldr	r3, [pc, #84]	; (800057c <BSP_LED_Init+0x94>)
 8000528:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800052a:	f003 0302 	and.w	r3, r3, #2
 800052e:	60fb      	str	r3, [r7, #12]
 8000530:	68fb      	ldr	r3, [r7, #12]
  
  /* Configure the GPIO_LED pin */
  GPIO_InitStruct.Pin = GPIO_PIN[Led];
 8000532:	79fb      	ldrb	r3, [r7, #7]
 8000534:	4a12      	ldr	r2, [pc, #72]	; (8000580 <BSP_LED_Init+0x98>)
 8000536:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800053a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800053c:	2301      	movs	r3, #1
 800053e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000540:	2300      	movs	r3, #0
 8000542:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FAST;
 8000544:	2302      	movs	r3, #2
 8000546:	623b      	str	r3, [r7, #32]
  
  HAL_GPIO_Init(GPIO_PORT[Led], &GPIO_InitStruct);
 8000548:	79fb      	ldrb	r3, [r7, #7]
 800054a:	4a0e      	ldr	r2, [pc, #56]	; (8000584 <BSP_LED_Init+0x9c>)
 800054c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000550:	f107 0214 	add.w	r2, r7, #20
 8000554:	4611      	mov	r1, r2
 8000556:	4618      	mov	r0, r3
 8000558:	f000 f9ba 	bl	80008d0 <HAL_GPIO_Init>
  HAL_GPIO_WritePin(GPIO_PORT[Led], GPIO_PIN[Led], GPIO_PIN_RESET); 
 800055c:	79fb      	ldrb	r3, [r7, #7]
 800055e:	4a09      	ldr	r2, [pc, #36]	; (8000584 <BSP_LED_Init+0x9c>)
 8000560:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8000564:	79fb      	ldrb	r3, [r7, #7]
 8000566:	4a06      	ldr	r2, [pc, #24]	; (8000580 <BSP_LED_Init+0x98>)
 8000568:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800056c:	2200      	movs	r2, #0
 800056e:	4619      	mov	r1, r3
 8000570:	f000 fb58 	bl	8000c24 <HAL_GPIO_WritePin>
}
 8000574:	bf00      	nop
 8000576:	3728      	adds	r7, #40	; 0x28
 8000578:	46bd      	mov	sp, r7
 800057a:	bd80      	pop	{r7, pc}
 800057c:	40023800 	.word	0x40023800
 8000580:	08001824 	.word	0x08001824
 8000584:	20000000 	.word	0x20000000

08000588 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000588:	b480      	push	{r7}
 800058a:	af00      	add	r7, sp, #0
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 800058c:	4b12      	ldr	r3, [pc, #72]	; (80005d8 <SystemInit+0x50>)
 800058e:	681b      	ldr	r3, [r3, #0]
 8000590:	4a11      	ldr	r2, [pc, #68]	; (80005d8 <SystemInit+0x50>)
 8000592:	f043 0301 	orr.w	r3, r3, #1
 8000596:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000598:	4b0f      	ldr	r3, [pc, #60]	; (80005d8 <SystemInit+0x50>)
 800059a:	2200      	movs	r2, #0
 800059c:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 800059e:	4b0e      	ldr	r3, [pc, #56]	; (80005d8 <SystemInit+0x50>)
 80005a0:	681b      	ldr	r3, [r3, #0]
 80005a2:	4a0d      	ldr	r2, [pc, #52]	; (80005d8 <SystemInit+0x50>)
 80005a4:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 80005a8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80005ac:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 80005ae:	4b0a      	ldr	r3, [pc, #40]	; (80005d8 <SystemInit+0x50>)
 80005b0:	4a0a      	ldr	r2, [pc, #40]	; (80005dc <SystemInit+0x54>)
 80005b2:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 80005b4:	4b08      	ldr	r3, [pc, #32]	; (80005d8 <SystemInit+0x50>)
 80005b6:	681b      	ldr	r3, [r3, #0]
 80005b8:	4a07      	ldr	r2, [pc, #28]	; (80005d8 <SystemInit+0x50>)
 80005ba:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80005be:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 80005c0:	4b05      	ldr	r3, [pc, #20]	; (80005d8 <SystemInit+0x50>)
 80005c2:	2200      	movs	r2, #0
 80005c4:	60da      	str	r2, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80005c6:	4b06      	ldr	r3, [pc, #24]	; (80005e0 <SystemInit+0x58>)
 80005c8:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80005cc:	609a      	str	r2, [r3, #8]
#endif
}
 80005ce:	bf00      	nop
 80005d0:	46bd      	mov	sp, r7
 80005d2:	bc80      	pop	{r7}
 80005d4:	4770      	bx	lr
 80005d6:	bf00      	nop
 80005d8:	40023800 	.word	0x40023800
 80005dc:	24003010 	.word	0x24003010
 80005e0:	e000ed00 	.word	0xe000ed00

080005e4 <NMI_Handler>:
  * @brief   This function handles NMI exception.
  * @param  None
  * @retval None
  */
void NMI_Handler(void)
{
 80005e4:	b480      	push	{r7}
 80005e6:	af00      	add	r7, sp, #0
}
 80005e8:	bf00      	nop
 80005ea:	46bd      	mov	sp, r7
 80005ec:	bc80      	pop	{r7}
 80005ee:	4770      	bx	lr

080005f0 <HardFault_Handler>:
  * @brief  This function handles Hard Fault exception.
  * @param  None
  * @retval None
  */
void HardFault_Handler(void)
{
 80005f0:	b480      	push	{r7}
 80005f2:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Hard Fault exception occurs */
  while (1)
 80005f4:	e7fe      	b.n	80005f4 <HardFault_Handler+0x4>

080005f6 <MemManage_Handler>:
  * @brief  This function handles Memory Manage exception.
  * @param  None
  * @retval None
  */
void MemManage_Handler(void)
{
 80005f6:	b480      	push	{r7}
 80005f8:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Memory Manage exception occurs */
  while (1)
 80005fa:	e7fe      	b.n	80005fa <MemManage_Handler+0x4>

080005fc <BusFault_Handler>:
  * @brief  This function handles Bus Fault exception.
  * @param  None
  * @retval None
  */
void BusFault_Handler(void)
{
 80005fc:	b480      	push	{r7}
 80005fe:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Bus Fault exception occurs */
  while (1)
 8000600:	e7fe      	b.n	8000600 <BusFault_Handler+0x4>

08000602 <UsageFault_Handler>:
  * @brief  This function handles Usage Fault exception.
  * @param  None
  * @retval None
  */
void UsageFault_Handler(void)
{
 8000602:	b480      	push	{r7}
 8000604:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Usage Fault exception occurs */
  while (1)
 8000606:	e7fe      	b.n	8000606 <UsageFault_Handler+0x4>

08000608 <SVC_Handler>:
  * @brief  This function handles SVCall exception.
  * @param  None
  * @retval None
  */
void SVC_Handler(void)
{
 8000608:	b480      	push	{r7}
 800060a:	af00      	add	r7, sp, #0
}
 800060c:	bf00      	nop
 800060e:	46bd      	mov	sp, r7
 8000610:	bc80      	pop	{r7}
 8000612:	4770      	bx	lr

08000614 <DebugMon_Handler>:
  * @brief  This function handles Debug Monitor exception.
  * @param  None
  * @retval None
  */
void DebugMon_Handler(void)
{
 8000614:	b480      	push	{r7}
 8000616:	af00      	add	r7, sp, #0
}
 8000618:	bf00      	nop
 800061a:	46bd      	mov	sp, r7
 800061c:	bc80      	pop	{r7}
 800061e:	4770      	bx	lr

08000620 <PendSV_Handler>:
  * @brief  This function handles PendSVC exception.
  * @param  None
  * @retval None
  */
void PendSV_Handler(void)
{
 8000620:	b480      	push	{r7}
 8000622:	af00      	add	r7, sp, #0
}
 8000624:	bf00      	nop
 8000626:	46bd      	mov	sp, r7
 8000628:	bc80      	pop	{r7}
 800062a:	4770      	bx	lr

0800062c <SysTick_Handler>:
  * @brief  This function handles SysTick Handler.
  * @param  None
  * @retval None
  */
void SysTick_Handler(void)
{
 800062c:	b580      	push	{r7, lr}
 800062e:	af00      	add	r7, sp, #0
    HAL_IncTick();
 8000630:	f000 f84e 	bl	80006d0 <HAL_IncTick>
}
 8000634:	bf00      	nop
 8000636:	bd80      	pop	{r7, pc}

08000638 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000638:	b580      	push	{r7, lr}
 800063a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800063c:	4b0b      	ldr	r3, [pc, #44]	; (800066c <HAL_Init+0x34>)
 800063e:	681b      	ldr	r3, [r3, #0]
 8000640:	4a0a      	ldr	r2, [pc, #40]	; (800066c <HAL_Init+0x34>)
 8000642:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000646:	6013      	str	r3, [r2, #0]
#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000648:	4b08      	ldr	r3, [pc, #32]	; (800066c <HAL_Init+0x34>)
 800064a:	681b      	ldr	r3, [r3, #0]
 800064c:	4a07      	ldr	r2, [pc, #28]	; (800066c <HAL_Init+0x34>)
 800064e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000652:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000654:	2003      	movs	r0, #3
 8000656:	f000 f907 	bl	8000868 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800065a:	200f      	movs	r0, #15
 800065c:	f000 f808 	bl	8000670 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000660:	f000 fb11 	bl	8000c86 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000664:	2300      	movs	r3, #0
}
 8000666:	4618      	mov	r0, r3
 8000668:	bd80      	pop	{r7, pc}
 800066a:	bf00      	nop
 800066c:	40023c00 	.word	0x40023c00

08000670 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000670:	b580      	push	{r7, lr}
 8000672:	b082      	sub	sp, #8
 8000674:	af00      	add	r7, sp, #0
 8000676:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000678:	4b12      	ldr	r3, [pc, #72]	; (80006c4 <HAL_InitTick+0x54>)
 800067a:	681a      	ldr	r2, [r3, #0]
 800067c:	4b12      	ldr	r3, [pc, #72]	; (80006c8 <HAL_InitTick+0x58>)
 800067e:	781b      	ldrb	r3, [r3, #0]
 8000680:	4619      	mov	r1, r3
 8000682:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000686:	fbb3 f3f1 	udiv	r3, r3, r1
 800068a:	fbb2 f3f3 	udiv	r3, r2, r3
 800068e:	4618      	mov	r0, r3
 8000690:	f000 f911 	bl	80008b6 <HAL_SYSTICK_Config>
 8000694:	4603      	mov	r3, r0
 8000696:	2b00      	cmp	r3, #0
 8000698:	d001      	beq.n	800069e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800069a:	2301      	movs	r3, #1
 800069c:	e00e      	b.n	80006bc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800069e:	687b      	ldr	r3, [r7, #4]
 80006a0:	2b0f      	cmp	r3, #15
 80006a2:	d80a      	bhi.n	80006ba <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80006a4:	2200      	movs	r2, #0
 80006a6:	6879      	ldr	r1, [r7, #4]
 80006a8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80006ac:	f000 f8e7 	bl	800087e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80006b0:	4a06      	ldr	r2, [pc, #24]	; (80006cc <HAL_InitTick+0x5c>)
 80006b2:	687b      	ldr	r3, [r7, #4]
 80006b4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80006b6:	2300      	movs	r3, #0
 80006b8:	e000      	b.n	80006bc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80006ba:	2301      	movs	r3, #1
}
 80006bc:	4618      	mov	r0, r3
 80006be:	3708      	adds	r7, #8
 80006c0:	46bd      	mov	sp, r7
 80006c2:	bd80      	pop	{r7, pc}
 80006c4:	2000000c 	.word	0x2000000c
 80006c8:	20000014 	.word	0x20000014
 80006cc:	20000010 	.word	0x20000010

080006d0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80006d0:	b480      	push	{r7}
 80006d2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80006d4:	4b05      	ldr	r3, [pc, #20]	; (80006ec <HAL_IncTick+0x1c>)
 80006d6:	781b      	ldrb	r3, [r3, #0]
 80006d8:	461a      	mov	r2, r3
 80006da:	4b05      	ldr	r3, [pc, #20]	; (80006f0 <HAL_IncTick+0x20>)
 80006dc:	681b      	ldr	r3, [r3, #0]
 80006de:	4413      	add	r3, r2
 80006e0:	4a03      	ldr	r2, [pc, #12]	; (80006f0 <HAL_IncTick+0x20>)
 80006e2:	6013      	str	r3, [r2, #0]
}
 80006e4:	bf00      	nop
 80006e6:	46bd      	mov	sp, r7
 80006e8:	bc80      	pop	{r7}
 80006ea:	4770      	bx	lr
 80006ec:	20000014 	.word	0x20000014
 80006f0:	20000034 	.word	0x20000034

080006f4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80006f4:	b480      	push	{r7}
 80006f6:	af00      	add	r7, sp, #0
  return uwTick;
 80006f8:	4b02      	ldr	r3, [pc, #8]	; (8000704 <HAL_GetTick+0x10>)
 80006fa:	681b      	ldr	r3, [r3, #0]
}
 80006fc:	4618      	mov	r0, r3
 80006fe:	46bd      	mov	sp, r7
 8000700:	bc80      	pop	{r7}
 8000702:	4770      	bx	lr
 8000704:	20000034 	.word	0x20000034

08000708 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000708:	b480      	push	{r7}
 800070a:	b085      	sub	sp, #20
 800070c:	af00      	add	r7, sp, #0
 800070e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000710:	687b      	ldr	r3, [r7, #4]
 8000712:	f003 0307 	and.w	r3, r3, #7
 8000716:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000718:	4b0c      	ldr	r3, [pc, #48]	; (800074c <__NVIC_SetPriorityGrouping+0x44>)
 800071a:	68db      	ldr	r3, [r3, #12]
 800071c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800071e:	68ba      	ldr	r2, [r7, #8]
 8000720:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000724:	4013      	ands	r3, r2
 8000726:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000728:	68fb      	ldr	r3, [r7, #12]
 800072a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800072c:	68bb      	ldr	r3, [r7, #8]
 800072e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000730:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000734:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000738:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800073a:	4a04      	ldr	r2, [pc, #16]	; (800074c <__NVIC_SetPriorityGrouping+0x44>)
 800073c:	68bb      	ldr	r3, [r7, #8]
 800073e:	60d3      	str	r3, [r2, #12]
}
 8000740:	bf00      	nop
 8000742:	3714      	adds	r7, #20
 8000744:	46bd      	mov	sp, r7
 8000746:	bc80      	pop	{r7}
 8000748:	4770      	bx	lr
 800074a:	bf00      	nop
 800074c:	e000ed00 	.word	0xe000ed00

08000750 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000750:	b480      	push	{r7}
 8000752:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000754:	4b04      	ldr	r3, [pc, #16]	; (8000768 <__NVIC_GetPriorityGrouping+0x18>)
 8000756:	68db      	ldr	r3, [r3, #12]
 8000758:	0a1b      	lsrs	r3, r3, #8
 800075a:	f003 0307 	and.w	r3, r3, #7
}
 800075e:	4618      	mov	r0, r3
 8000760:	46bd      	mov	sp, r7
 8000762:	bc80      	pop	{r7}
 8000764:	4770      	bx	lr
 8000766:	bf00      	nop
 8000768:	e000ed00 	.word	0xe000ed00

0800076c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800076c:	b480      	push	{r7}
 800076e:	b083      	sub	sp, #12
 8000770:	af00      	add	r7, sp, #0
 8000772:	4603      	mov	r3, r0
 8000774:	6039      	str	r1, [r7, #0]
 8000776:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000778:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800077c:	2b00      	cmp	r3, #0
 800077e:	db0a      	blt.n	8000796 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000780:	683b      	ldr	r3, [r7, #0]
 8000782:	b2da      	uxtb	r2, r3
 8000784:	490c      	ldr	r1, [pc, #48]	; (80007b8 <__NVIC_SetPriority+0x4c>)
 8000786:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800078a:	0112      	lsls	r2, r2, #4
 800078c:	b2d2      	uxtb	r2, r2
 800078e:	440b      	add	r3, r1
 8000790:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000794:	e00a      	b.n	80007ac <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000796:	683b      	ldr	r3, [r7, #0]
 8000798:	b2da      	uxtb	r2, r3
 800079a:	4908      	ldr	r1, [pc, #32]	; (80007bc <__NVIC_SetPriority+0x50>)
 800079c:	79fb      	ldrb	r3, [r7, #7]
 800079e:	f003 030f 	and.w	r3, r3, #15
 80007a2:	3b04      	subs	r3, #4
 80007a4:	0112      	lsls	r2, r2, #4
 80007a6:	b2d2      	uxtb	r2, r2
 80007a8:	440b      	add	r3, r1
 80007aa:	761a      	strb	r2, [r3, #24]
}
 80007ac:	bf00      	nop
 80007ae:	370c      	adds	r7, #12
 80007b0:	46bd      	mov	sp, r7
 80007b2:	bc80      	pop	{r7}
 80007b4:	4770      	bx	lr
 80007b6:	bf00      	nop
 80007b8:	e000e100 	.word	0xe000e100
 80007bc:	e000ed00 	.word	0xe000ed00

080007c0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80007c0:	b480      	push	{r7}
 80007c2:	b089      	sub	sp, #36	; 0x24
 80007c4:	af00      	add	r7, sp, #0
 80007c6:	60f8      	str	r0, [r7, #12]
 80007c8:	60b9      	str	r1, [r7, #8]
 80007ca:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80007cc:	68fb      	ldr	r3, [r7, #12]
 80007ce:	f003 0307 	and.w	r3, r3, #7
 80007d2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80007d4:	69fb      	ldr	r3, [r7, #28]
 80007d6:	f1c3 0307 	rsb	r3, r3, #7
 80007da:	2b04      	cmp	r3, #4
 80007dc:	bf28      	it	cs
 80007de:	2304      	movcs	r3, #4
 80007e0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80007e2:	69fb      	ldr	r3, [r7, #28]
 80007e4:	3304      	adds	r3, #4
 80007e6:	2b06      	cmp	r3, #6
 80007e8:	d902      	bls.n	80007f0 <NVIC_EncodePriority+0x30>
 80007ea:	69fb      	ldr	r3, [r7, #28]
 80007ec:	3b03      	subs	r3, #3
 80007ee:	e000      	b.n	80007f2 <NVIC_EncodePriority+0x32>
 80007f0:	2300      	movs	r3, #0
 80007f2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80007f4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80007f8:	69bb      	ldr	r3, [r7, #24]
 80007fa:	fa02 f303 	lsl.w	r3, r2, r3
 80007fe:	43da      	mvns	r2, r3
 8000800:	68bb      	ldr	r3, [r7, #8]
 8000802:	401a      	ands	r2, r3
 8000804:	697b      	ldr	r3, [r7, #20]
 8000806:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000808:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800080c:	697b      	ldr	r3, [r7, #20]
 800080e:	fa01 f303 	lsl.w	r3, r1, r3
 8000812:	43d9      	mvns	r1, r3
 8000814:	687b      	ldr	r3, [r7, #4]
 8000816:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000818:	4313      	orrs	r3, r2
         );
}
 800081a:	4618      	mov	r0, r3
 800081c:	3724      	adds	r7, #36	; 0x24
 800081e:	46bd      	mov	sp, r7
 8000820:	bc80      	pop	{r7}
 8000822:	4770      	bx	lr

08000824 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000824:	b580      	push	{r7, lr}
 8000826:	b082      	sub	sp, #8
 8000828:	af00      	add	r7, sp, #0
 800082a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800082c:	687b      	ldr	r3, [r7, #4]
 800082e:	3b01      	subs	r3, #1
 8000830:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000834:	d301      	bcc.n	800083a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000836:	2301      	movs	r3, #1
 8000838:	e00f      	b.n	800085a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800083a:	4a0a      	ldr	r2, [pc, #40]	; (8000864 <SysTick_Config+0x40>)
 800083c:	687b      	ldr	r3, [r7, #4]
 800083e:	3b01      	subs	r3, #1
 8000840:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000842:	210f      	movs	r1, #15
 8000844:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000848:	f7ff ff90 	bl	800076c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800084c:	4b05      	ldr	r3, [pc, #20]	; (8000864 <SysTick_Config+0x40>)
 800084e:	2200      	movs	r2, #0
 8000850:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000852:	4b04      	ldr	r3, [pc, #16]	; (8000864 <SysTick_Config+0x40>)
 8000854:	2207      	movs	r2, #7
 8000856:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000858:	2300      	movs	r3, #0
}
 800085a:	4618      	mov	r0, r3
 800085c:	3708      	adds	r7, #8
 800085e:	46bd      	mov	sp, r7
 8000860:	bd80      	pop	{r7, pc}
 8000862:	bf00      	nop
 8000864:	e000e010 	.word	0xe000e010

08000868 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000868:	b580      	push	{r7, lr}
 800086a:	b082      	sub	sp, #8
 800086c:	af00      	add	r7, sp, #0
 800086e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000870:	6878      	ldr	r0, [r7, #4]
 8000872:	f7ff ff49 	bl	8000708 <__NVIC_SetPriorityGrouping>
}
 8000876:	bf00      	nop
 8000878:	3708      	adds	r7, #8
 800087a:	46bd      	mov	sp, r7
 800087c:	bd80      	pop	{r7, pc}

0800087e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800087e:	b580      	push	{r7, lr}
 8000880:	b086      	sub	sp, #24
 8000882:	af00      	add	r7, sp, #0
 8000884:	4603      	mov	r3, r0
 8000886:	60b9      	str	r1, [r7, #8]
 8000888:	607a      	str	r2, [r7, #4]
 800088a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800088c:	2300      	movs	r3, #0
 800088e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000890:	f7ff ff5e 	bl	8000750 <__NVIC_GetPriorityGrouping>
 8000894:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000896:	687a      	ldr	r2, [r7, #4]
 8000898:	68b9      	ldr	r1, [r7, #8]
 800089a:	6978      	ldr	r0, [r7, #20]
 800089c:	f7ff ff90 	bl	80007c0 <NVIC_EncodePriority>
 80008a0:	4602      	mov	r2, r0
 80008a2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80008a6:	4611      	mov	r1, r2
 80008a8:	4618      	mov	r0, r3
 80008aa:	f7ff ff5f 	bl	800076c <__NVIC_SetPriority>
}
 80008ae:	bf00      	nop
 80008b0:	3718      	adds	r7, #24
 80008b2:	46bd      	mov	sp, r7
 80008b4:	bd80      	pop	{r7, pc}

080008b6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80008b6:	b580      	push	{r7, lr}
 80008b8:	b082      	sub	sp, #8
 80008ba:	af00      	add	r7, sp, #0
 80008bc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80008be:	6878      	ldr	r0, [r7, #4]
 80008c0:	f7ff ffb0 	bl	8000824 <SysTick_Config>
 80008c4:	4603      	mov	r3, r0
}
 80008c6:	4618      	mov	r0, r3
 80008c8:	3708      	adds	r7, #8
 80008ca:	46bd      	mov	sp, r7
 80008cc:	bd80      	pop	{r7, pc}
	...

080008d0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80008d0:	b480      	push	{r7}
 80008d2:	b089      	sub	sp, #36	; 0x24
 80008d4:	af00      	add	r7, sp, #0
 80008d6:	6078      	str	r0, [r7, #4]
 80008d8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80008da:	2300      	movs	r3, #0
 80008dc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80008de:	2300      	movs	r3, #0
 80008e0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80008e2:	2300      	movs	r3, #0
 80008e4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80008e6:	2300      	movs	r3, #0
 80008e8:	61fb      	str	r3, [r7, #28]
 80008ea:	e177      	b.n	8000bdc <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80008ec:	2201      	movs	r2, #1
 80008ee:	69fb      	ldr	r3, [r7, #28]
 80008f0:	fa02 f303 	lsl.w	r3, r2, r3
 80008f4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80008f6:	683b      	ldr	r3, [r7, #0]
 80008f8:	681b      	ldr	r3, [r3, #0]
 80008fa:	697a      	ldr	r2, [r7, #20]
 80008fc:	4013      	ands	r3, r2
 80008fe:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000900:	693a      	ldr	r2, [r7, #16]
 8000902:	697b      	ldr	r3, [r7, #20]
 8000904:	429a      	cmp	r2, r3
 8000906:	f040 8166 	bne.w	8000bd6 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800090a:	683b      	ldr	r3, [r7, #0]
 800090c:	685b      	ldr	r3, [r3, #4]
 800090e:	f003 0303 	and.w	r3, r3, #3
 8000912:	2b01      	cmp	r3, #1
 8000914:	d005      	beq.n	8000922 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000916:	683b      	ldr	r3, [r7, #0]
 8000918:	685b      	ldr	r3, [r3, #4]
 800091a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800091e:	2b02      	cmp	r3, #2
 8000920:	d130      	bne.n	8000984 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000922:	687b      	ldr	r3, [r7, #4]
 8000924:	689b      	ldr	r3, [r3, #8]
 8000926:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000928:	69fb      	ldr	r3, [r7, #28]
 800092a:	005b      	lsls	r3, r3, #1
 800092c:	2203      	movs	r2, #3
 800092e:	fa02 f303 	lsl.w	r3, r2, r3
 8000932:	43db      	mvns	r3, r3
 8000934:	69ba      	ldr	r2, [r7, #24]
 8000936:	4013      	ands	r3, r2
 8000938:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800093a:	683b      	ldr	r3, [r7, #0]
 800093c:	68da      	ldr	r2, [r3, #12]
 800093e:	69fb      	ldr	r3, [r7, #28]
 8000940:	005b      	lsls	r3, r3, #1
 8000942:	fa02 f303 	lsl.w	r3, r2, r3
 8000946:	69ba      	ldr	r2, [r7, #24]
 8000948:	4313      	orrs	r3, r2
 800094a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800094c:	687b      	ldr	r3, [r7, #4]
 800094e:	69ba      	ldr	r2, [r7, #24]
 8000950:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000952:	687b      	ldr	r3, [r7, #4]
 8000954:	685b      	ldr	r3, [r3, #4]
 8000956:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000958:	2201      	movs	r2, #1
 800095a:	69fb      	ldr	r3, [r7, #28]
 800095c:	fa02 f303 	lsl.w	r3, r2, r3
 8000960:	43db      	mvns	r3, r3
 8000962:	69ba      	ldr	r2, [r7, #24]
 8000964:	4013      	ands	r3, r2
 8000966:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000968:	683b      	ldr	r3, [r7, #0]
 800096a:	685b      	ldr	r3, [r3, #4]
 800096c:	091b      	lsrs	r3, r3, #4
 800096e:	f003 0201 	and.w	r2, r3, #1
 8000972:	69fb      	ldr	r3, [r7, #28]
 8000974:	fa02 f303 	lsl.w	r3, r2, r3
 8000978:	69ba      	ldr	r2, [r7, #24]
 800097a:	4313      	orrs	r3, r2
 800097c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800097e:	687b      	ldr	r3, [r7, #4]
 8000980:	69ba      	ldr	r2, [r7, #24]
 8000982:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000984:	683b      	ldr	r3, [r7, #0]
 8000986:	685b      	ldr	r3, [r3, #4]
 8000988:	f003 0303 	and.w	r3, r3, #3
 800098c:	2b03      	cmp	r3, #3
 800098e:	d017      	beq.n	80009c0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000990:	687b      	ldr	r3, [r7, #4]
 8000992:	68db      	ldr	r3, [r3, #12]
 8000994:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000996:	69fb      	ldr	r3, [r7, #28]
 8000998:	005b      	lsls	r3, r3, #1
 800099a:	2203      	movs	r2, #3
 800099c:	fa02 f303 	lsl.w	r3, r2, r3
 80009a0:	43db      	mvns	r3, r3
 80009a2:	69ba      	ldr	r2, [r7, #24]
 80009a4:	4013      	ands	r3, r2
 80009a6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80009a8:	683b      	ldr	r3, [r7, #0]
 80009aa:	689a      	ldr	r2, [r3, #8]
 80009ac:	69fb      	ldr	r3, [r7, #28]
 80009ae:	005b      	lsls	r3, r3, #1
 80009b0:	fa02 f303 	lsl.w	r3, r2, r3
 80009b4:	69ba      	ldr	r2, [r7, #24]
 80009b6:	4313      	orrs	r3, r2
 80009b8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80009ba:	687b      	ldr	r3, [r7, #4]
 80009bc:	69ba      	ldr	r2, [r7, #24]
 80009be:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80009c0:	683b      	ldr	r3, [r7, #0]
 80009c2:	685b      	ldr	r3, [r3, #4]
 80009c4:	f003 0303 	and.w	r3, r3, #3
 80009c8:	2b02      	cmp	r3, #2
 80009ca:	d123      	bne.n	8000a14 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80009cc:	69fb      	ldr	r3, [r7, #28]
 80009ce:	08da      	lsrs	r2, r3, #3
 80009d0:	687b      	ldr	r3, [r7, #4]
 80009d2:	3208      	adds	r2, #8
 80009d4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80009d8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80009da:	69fb      	ldr	r3, [r7, #28]
 80009dc:	f003 0307 	and.w	r3, r3, #7
 80009e0:	009b      	lsls	r3, r3, #2
 80009e2:	220f      	movs	r2, #15
 80009e4:	fa02 f303 	lsl.w	r3, r2, r3
 80009e8:	43db      	mvns	r3, r3
 80009ea:	69ba      	ldr	r2, [r7, #24]
 80009ec:	4013      	ands	r3, r2
 80009ee:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80009f0:	683b      	ldr	r3, [r7, #0]
 80009f2:	691a      	ldr	r2, [r3, #16]
 80009f4:	69fb      	ldr	r3, [r7, #28]
 80009f6:	f003 0307 	and.w	r3, r3, #7
 80009fa:	009b      	lsls	r3, r3, #2
 80009fc:	fa02 f303 	lsl.w	r3, r2, r3
 8000a00:	69ba      	ldr	r2, [r7, #24]
 8000a02:	4313      	orrs	r3, r2
 8000a04:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000a06:	69fb      	ldr	r3, [r7, #28]
 8000a08:	08da      	lsrs	r2, r3, #3
 8000a0a:	687b      	ldr	r3, [r7, #4]
 8000a0c:	3208      	adds	r2, #8
 8000a0e:	69b9      	ldr	r1, [r7, #24]
 8000a10:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000a14:	687b      	ldr	r3, [r7, #4]
 8000a16:	681b      	ldr	r3, [r3, #0]
 8000a18:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000a1a:	69fb      	ldr	r3, [r7, #28]
 8000a1c:	005b      	lsls	r3, r3, #1
 8000a1e:	2203      	movs	r2, #3
 8000a20:	fa02 f303 	lsl.w	r3, r2, r3
 8000a24:	43db      	mvns	r3, r3
 8000a26:	69ba      	ldr	r2, [r7, #24]
 8000a28:	4013      	ands	r3, r2
 8000a2a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000a2c:	683b      	ldr	r3, [r7, #0]
 8000a2e:	685b      	ldr	r3, [r3, #4]
 8000a30:	f003 0203 	and.w	r2, r3, #3
 8000a34:	69fb      	ldr	r3, [r7, #28]
 8000a36:	005b      	lsls	r3, r3, #1
 8000a38:	fa02 f303 	lsl.w	r3, r2, r3
 8000a3c:	69ba      	ldr	r2, [r7, #24]
 8000a3e:	4313      	orrs	r3, r2
 8000a40:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000a42:	687b      	ldr	r3, [r7, #4]
 8000a44:	69ba      	ldr	r2, [r7, #24]
 8000a46:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000a48:	683b      	ldr	r3, [r7, #0]
 8000a4a:	685b      	ldr	r3, [r3, #4]
 8000a4c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000a50:	2b00      	cmp	r3, #0
 8000a52:	f000 80c0 	beq.w	8000bd6 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a56:	2300      	movs	r3, #0
 8000a58:	60fb      	str	r3, [r7, #12]
 8000a5a:	4b65      	ldr	r3, [pc, #404]	; (8000bf0 <HAL_GPIO_Init+0x320>)
 8000a5c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a5e:	4a64      	ldr	r2, [pc, #400]	; (8000bf0 <HAL_GPIO_Init+0x320>)
 8000a60:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000a64:	6453      	str	r3, [r2, #68]	; 0x44
 8000a66:	4b62      	ldr	r3, [pc, #392]	; (8000bf0 <HAL_GPIO_Init+0x320>)
 8000a68:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a6a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000a6e:	60fb      	str	r3, [r7, #12]
 8000a70:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000a72:	4a60      	ldr	r2, [pc, #384]	; (8000bf4 <HAL_GPIO_Init+0x324>)
 8000a74:	69fb      	ldr	r3, [r7, #28]
 8000a76:	089b      	lsrs	r3, r3, #2
 8000a78:	3302      	adds	r3, #2
 8000a7a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000a7e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000a80:	69fb      	ldr	r3, [r7, #28]
 8000a82:	f003 0303 	and.w	r3, r3, #3
 8000a86:	009b      	lsls	r3, r3, #2
 8000a88:	220f      	movs	r2, #15
 8000a8a:	fa02 f303 	lsl.w	r3, r2, r3
 8000a8e:	43db      	mvns	r3, r3
 8000a90:	69ba      	ldr	r2, [r7, #24]
 8000a92:	4013      	ands	r3, r2
 8000a94:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000a96:	687b      	ldr	r3, [r7, #4]
 8000a98:	4a57      	ldr	r2, [pc, #348]	; (8000bf8 <HAL_GPIO_Init+0x328>)
 8000a9a:	4293      	cmp	r3, r2
 8000a9c:	d037      	beq.n	8000b0e <HAL_GPIO_Init+0x23e>
 8000a9e:	687b      	ldr	r3, [r7, #4]
 8000aa0:	4a56      	ldr	r2, [pc, #344]	; (8000bfc <HAL_GPIO_Init+0x32c>)
 8000aa2:	4293      	cmp	r3, r2
 8000aa4:	d031      	beq.n	8000b0a <HAL_GPIO_Init+0x23a>
 8000aa6:	687b      	ldr	r3, [r7, #4]
 8000aa8:	4a55      	ldr	r2, [pc, #340]	; (8000c00 <HAL_GPIO_Init+0x330>)
 8000aaa:	4293      	cmp	r3, r2
 8000aac:	d02b      	beq.n	8000b06 <HAL_GPIO_Init+0x236>
 8000aae:	687b      	ldr	r3, [r7, #4]
 8000ab0:	4a54      	ldr	r2, [pc, #336]	; (8000c04 <HAL_GPIO_Init+0x334>)
 8000ab2:	4293      	cmp	r3, r2
 8000ab4:	d025      	beq.n	8000b02 <HAL_GPIO_Init+0x232>
 8000ab6:	687b      	ldr	r3, [r7, #4]
 8000ab8:	4a53      	ldr	r2, [pc, #332]	; (8000c08 <HAL_GPIO_Init+0x338>)
 8000aba:	4293      	cmp	r3, r2
 8000abc:	d01f      	beq.n	8000afe <HAL_GPIO_Init+0x22e>
 8000abe:	687b      	ldr	r3, [r7, #4]
 8000ac0:	4a52      	ldr	r2, [pc, #328]	; (8000c0c <HAL_GPIO_Init+0x33c>)
 8000ac2:	4293      	cmp	r3, r2
 8000ac4:	d019      	beq.n	8000afa <HAL_GPIO_Init+0x22a>
 8000ac6:	687b      	ldr	r3, [r7, #4]
 8000ac8:	4a51      	ldr	r2, [pc, #324]	; (8000c10 <HAL_GPIO_Init+0x340>)
 8000aca:	4293      	cmp	r3, r2
 8000acc:	d013      	beq.n	8000af6 <HAL_GPIO_Init+0x226>
 8000ace:	687b      	ldr	r3, [r7, #4]
 8000ad0:	4a50      	ldr	r2, [pc, #320]	; (8000c14 <HAL_GPIO_Init+0x344>)
 8000ad2:	4293      	cmp	r3, r2
 8000ad4:	d00d      	beq.n	8000af2 <HAL_GPIO_Init+0x222>
 8000ad6:	687b      	ldr	r3, [r7, #4]
 8000ad8:	4a4f      	ldr	r2, [pc, #316]	; (8000c18 <HAL_GPIO_Init+0x348>)
 8000ada:	4293      	cmp	r3, r2
 8000adc:	d007      	beq.n	8000aee <HAL_GPIO_Init+0x21e>
 8000ade:	687b      	ldr	r3, [r7, #4]
 8000ae0:	4a4e      	ldr	r2, [pc, #312]	; (8000c1c <HAL_GPIO_Init+0x34c>)
 8000ae2:	4293      	cmp	r3, r2
 8000ae4:	d101      	bne.n	8000aea <HAL_GPIO_Init+0x21a>
 8000ae6:	2309      	movs	r3, #9
 8000ae8:	e012      	b.n	8000b10 <HAL_GPIO_Init+0x240>
 8000aea:	230a      	movs	r3, #10
 8000aec:	e010      	b.n	8000b10 <HAL_GPIO_Init+0x240>
 8000aee:	2308      	movs	r3, #8
 8000af0:	e00e      	b.n	8000b10 <HAL_GPIO_Init+0x240>
 8000af2:	2307      	movs	r3, #7
 8000af4:	e00c      	b.n	8000b10 <HAL_GPIO_Init+0x240>
 8000af6:	2306      	movs	r3, #6
 8000af8:	e00a      	b.n	8000b10 <HAL_GPIO_Init+0x240>
 8000afa:	2305      	movs	r3, #5
 8000afc:	e008      	b.n	8000b10 <HAL_GPIO_Init+0x240>
 8000afe:	2304      	movs	r3, #4
 8000b00:	e006      	b.n	8000b10 <HAL_GPIO_Init+0x240>
 8000b02:	2303      	movs	r3, #3
 8000b04:	e004      	b.n	8000b10 <HAL_GPIO_Init+0x240>
 8000b06:	2302      	movs	r3, #2
 8000b08:	e002      	b.n	8000b10 <HAL_GPIO_Init+0x240>
 8000b0a:	2301      	movs	r3, #1
 8000b0c:	e000      	b.n	8000b10 <HAL_GPIO_Init+0x240>
 8000b0e:	2300      	movs	r3, #0
 8000b10:	69fa      	ldr	r2, [r7, #28]
 8000b12:	f002 0203 	and.w	r2, r2, #3
 8000b16:	0092      	lsls	r2, r2, #2
 8000b18:	4093      	lsls	r3, r2
 8000b1a:	69ba      	ldr	r2, [r7, #24]
 8000b1c:	4313      	orrs	r3, r2
 8000b1e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000b20:	4934      	ldr	r1, [pc, #208]	; (8000bf4 <HAL_GPIO_Init+0x324>)
 8000b22:	69fb      	ldr	r3, [r7, #28]
 8000b24:	089b      	lsrs	r3, r3, #2
 8000b26:	3302      	adds	r3, #2
 8000b28:	69ba      	ldr	r2, [r7, #24]
 8000b2a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000b2e:	4b3c      	ldr	r3, [pc, #240]	; (8000c20 <HAL_GPIO_Init+0x350>)
 8000b30:	681b      	ldr	r3, [r3, #0]
 8000b32:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000b34:	693b      	ldr	r3, [r7, #16]
 8000b36:	43db      	mvns	r3, r3
 8000b38:	69ba      	ldr	r2, [r7, #24]
 8000b3a:	4013      	ands	r3, r2
 8000b3c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8000b3e:	683b      	ldr	r3, [r7, #0]
 8000b40:	685b      	ldr	r3, [r3, #4]
 8000b42:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000b46:	2b00      	cmp	r3, #0
 8000b48:	d003      	beq.n	8000b52 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8000b4a:	69ba      	ldr	r2, [r7, #24]
 8000b4c:	693b      	ldr	r3, [r7, #16]
 8000b4e:	4313      	orrs	r3, r2
 8000b50:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8000b52:	4a33      	ldr	r2, [pc, #204]	; (8000c20 <HAL_GPIO_Init+0x350>)
 8000b54:	69bb      	ldr	r3, [r7, #24]
 8000b56:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8000b58:	4b31      	ldr	r3, [pc, #196]	; (8000c20 <HAL_GPIO_Init+0x350>)
 8000b5a:	685b      	ldr	r3, [r3, #4]
 8000b5c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000b5e:	693b      	ldr	r3, [r7, #16]
 8000b60:	43db      	mvns	r3, r3
 8000b62:	69ba      	ldr	r2, [r7, #24]
 8000b64:	4013      	ands	r3, r2
 8000b66:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8000b68:	683b      	ldr	r3, [r7, #0]
 8000b6a:	685b      	ldr	r3, [r3, #4]
 8000b6c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000b70:	2b00      	cmp	r3, #0
 8000b72:	d003      	beq.n	8000b7c <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8000b74:	69ba      	ldr	r2, [r7, #24]
 8000b76:	693b      	ldr	r3, [r7, #16]
 8000b78:	4313      	orrs	r3, r2
 8000b7a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8000b7c:	4a28      	ldr	r2, [pc, #160]	; (8000c20 <HAL_GPIO_Init+0x350>)
 8000b7e:	69bb      	ldr	r3, [r7, #24]
 8000b80:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000b82:	4b27      	ldr	r3, [pc, #156]	; (8000c20 <HAL_GPIO_Init+0x350>)
 8000b84:	689b      	ldr	r3, [r3, #8]
 8000b86:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000b88:	693b      	ldr	r3, [r7, #16]
 8000b8a:	43db      	mvns	r3, r3
 8000b8c:	69ba      	ldr	r2, [r7, #24]
 8000b8e:	4013      	ands	r3, r2
 8000b90:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8000b92:	683b      	ldr	r3, [r7, #0]
 8000b94:	685b      	ldr	r3, [r3, #4]
 8000b96:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000b9a:	2b00      	cmp	r3, #0
 8000b9c:	d003      	beq.n	8000ba6 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8000b9e:	69ba      	ldr	r2, [r7, #24]
 8000ba0:	693b      	ldr	r3, [r7, #16]
 8000ba2:	4313      	orrs	r3, r2
 8000ba4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8000ba6:	4a1e      	ldr	r2, [pc, #120]	; (8000c20 <HAL_GPIO_Init+0x350>)
 8000ba8:	69bb      	ldr	r3, [r7, #24]
 8000baa:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000bac:	4b1c      	ldr	r3, [pc, #112]	; (8000c20 <HAL_GPIO_Init+0x350>)
 8000bae:	68db      	ldr	r3, [r3, #12]
 8000bb0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000bb2:	693b      	ldr	r3, [r7, #16]
 8000bb4:	43db      	mvns	r3, r3
 8000bb6:	69ba      	ldr	r2, [r7, #24]
 8000bb8:	4013      	ands	r3, r2
 8000bba:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8000bbc:	683b      	ldr	r3, [r7, #0]
 8000bbe:	685b      	ldr	r3, [r3, #4]
 8000bc0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000bc4:	2b00      	cmp	r3, #0
 8000bc6:	d003      	beq.n	8000bd0 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8000bc8:	69ba      	ldr	r2, [r7, #24]
 8000bca:	693b      	ldr	r3, [r7, #16]
 8000bcc:	4313      	orrs	r3, r2
 8000bce:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8000bd0:	4a13      	ldr	r2, [pc, #76]	; (8000c20 <HAL_GPIO_Init+0x350>)
 8000bd2:	69bb      	ldr	r3, [r7, #24]
 8000bd4:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000bd6:	69fb      	ldr	r3, [r7, #28]
 8000bd8:	3301      	adds	r3, #1
 8000bda:	61fb      	str	r3, [r7, #28]
 8000bdc:	69fb      	ldr	r3, [r7, #28]
 8000bde:	2b0f      	cmp	r3, #15
 8000be0:	f67f ae84 	bls.w	80008ec <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8000be4:	bf00      	nop
 8000be6:	bf00      	nop
 8000be8:	3724      	adds	r7, #36	; 0x24
 8000bea:	46bd      	mov	sp, r7
 8000bec:	bc80      	pop	{r7}
 8000bee:	4770      	bx	lr
 8000bf0:	40023800 	.word	0x40023800
 8000bf4:	40013800 	.word	0x40013800
 8000bf8:	40020000 	.word	0x40020000
 8000bfc:	40020400 	.word	0x40020400
 8000c00:	40020800 	.word	0x40020800
 8000c04:	40020c00 	.word	0x40020c00
 8000c08:	40021000 	.word	0x40021000
 8000c0c:	40021400 	.word	0x40021400
 8000c10:	40021800 	.word	0x40021800
 8000c14:	40021c00 	.word	0x40021c00
 8000c18:	40022000 	.word	0x40022000
 8000c1c:	40022400 	.word	0x40022400
 8000c20:	40013c00 	.word	0x40013c00

08000c24 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000c24:	b480      	push	{r7}
 8000c26:	b083      	sub	sp, #12
 8000c28:	af00      	add	r7, sp, #0
 8000c2a:	6078      	str	r0, [r7, #4]
 8000c2c:	460b      	mov	r3, r1
 8000c2e:	807b      	strh	r3, [r7, #2]
 8000c30:	4613      	mov	r3, r2
 8000c32:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000c34:	787b      	ldrb	r3, [r7, #1]
 8000c36:	2b00      	cmp	r3, #0
 8000c38:	d003      	beq.n	8000c42 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000c3a:	887a      	ldrh	r2, [r7, #2]
 8000c3c:	687b      	ldr	r3, [r7, #4]
 8000c3e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8000c40:	e003      	b.n	8000c4a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8000c42:	887b      	ldrh	r3, [r7, #2]
 8000c44:	041a      	lsls	r2, r3, #16
 8000c46:	687b      	ldr	r3, [r7, #4]
 8000c48:	619a      	str	r2, [r3, #24]
}
 8000c4a:	bf00      	nop
 8000c4c:	370c      	adds	r7, #12
 8000c4e:	46bd      	mov	sp, r7
 8000c50:	bc80      	pop	{r7}
 8000c52:	4770      	bx	lr

08000c54 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8000c54:	b480      	push	{r7}
 8000c56:	b085      	sub	sp, #20
 8000c58:	af00      	add	r7, sp, #0
 8000c5a:	6078      	str	r0, [r7, #4]
 8000c5c:	460b      	mov	r3, r1
 8000c5e:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8000c60:	687b      	ldr	r3, [r7, #4]
 8000c62:	695b      	ldr	r3, [r3, #20]
 8000c64:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8000c66:	887a      	ldrh	r2, [r7, #2]
 8000c68:	68fb      	ldr	r3, [r7, #12]
 8000c6a:	4013      	ands	r3, r2
 8000c6c:	041a      	lsls	r2, r3, #16
 8000c6e:	68fb      	ldr	r3, [r7, #12]
 8000c70:	43d9      	mvns	r1, r3
 8000c72:	887b      	ldrh	r3, [r7, #2]
 8000c74:	400b      	ands	r3, r1
 8000c76:	431a      	orrs	r2, r3
 8000c78:	687b      	ldr	r3, [r7, #4]
 8000c7a:	619a      	str	r2, [r3, #24]
}
 8000c7c:	bf00      	nop
 8000c7e:	3714      	adds	r7, #20
 8000c80:	46bd      	mov	sp, r7
 8000c82:	bc80      	pop	{r7}
 8000c84:	4770      	bx	lr

08000c86 <HAL_MspInit>:
  * @note   This function is called from HAL_Init() function to perform system
  *         level initialization (GPIOs, clock, DMA, interrupt).
  * @retval None
  */
void HAL_MspInit(void)
{
 8000c86:	b480      	push	{r7}
 8000c88:	af00      	add	r7, sp, #0

}
 8000c8a:	bf00      	nop
 8000c8c:	46bd      	mov	sp, r7
 8000c8e:	bc80      	pop	{r7}
 8000c90:	4770      	bx	lr
	...

08000c94 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000c94:	b580      	push	{r7, lr}
 8000c96:	b086      	sub	sp, #24
 8000c98:	af00      	add	r7, sp, #0
 8000c9a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000c9c:	687b      	ldr	r3, [r7, #4]
 8000c9e:	2b00      	cmp	r3, #0
 8000ca0:	d101      	bne.n	8000ca6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000ca2:	2301      	movs	r3, #1
 8000ca4:	e267      	b.n	8001176 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000ca6:	687b      	ldr	r3, [r7, #4]
 8000ca8:	681b      	ldr	r3, [r3, #0]
 8000caa:	f003 0301 	and.w	r3, r3, #1
 8000cae:	2b00      	cmp	r3, #0
 8000cb0:	d075      	beq.n	8000d9e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8000cb2:	4b88      	ldr	r3, [pc, #544]	; (8000ed4 <HAL_RCC_OscConfig+0x240>)
 8000cb4:	689b      	ldr	r3, [r3, #8]
 8000cb6:	f003 030c 	and.w	r3, r3, #12
 8000cba:	2b04      	cmp	r3, #4
 8000cbc:	d00c      	beq.n	8000cd8 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8000cbe:	4b85      	ldr	r3, [pc, #532]	; (8000ed4 <HAL_RCC_OscConfig+0x240>)
 8000cc0:	689b      	ldr	r3, [r3, #8]
 8000cc2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8000cc6:	2b08      	cmp	r3, #8
 8000cc8:	d112      	bne.n	8000cf0 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8000cca:	4b82      	ldr	r3, [pc, #520]	; (8000ed4 <HAL_RCC_OscConfig+0x240>)
 8000ccc:	685b      	ldr	r3, [r3, #4]
 8000cce:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000cd2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8000cd6:	d10b      	bne.n	8000cf0 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000cd8:	4b7e      	ldr	r3, [pc, #504]	; (8000ed4 <HAL_RCC_OscConfig+0x240>)
 8000cda:	681b      	ldr	r3, [r3, #0]
 8000cdc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000ce0:	2b00      	cmp	r3, #0
 8000ce2:	d05b      	beq.n	8000d9c <HAL_RCC_OscConfig+0x108>
 8000ce4:	687b      	ldr	r3, [r7, #4]
 8000ce6:	685b      	ldr	r3, [r3, #4]
 8000ce8:	2b00      	cmp	r3, #0
 8000cea:	d157      	bne.n	8000d9c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8000cec:	2301      	movs	r3, #1
 8000cee:	e242      	b.n	8001176 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000cf0:	687b      	ldr	r3, [r7, #4]
 8000cf2:	685b      	ldr	r3, [r3, #4]
 8000cf4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000cf8:	d106      	bne.n	8000d08 <HAL_RCC_OscConfig+0x74>
 8000cfa:	4b76      	ldr	r3, [pc, #472]	; (8000ed4 <HAL_RCC_OscConfig+0x240>)
 8000cfc:	681b      	ldr	r3, [r3, #0]
 8000cfe:	4a75      	ldr	r2, [pc, #468]	; (8000ed4 <HAL_RCC_OscConfig+0x240>)
 8000d00:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000d04:	6013      	str	r3, [r2, #0]
 8000d06:	e01d      	b.n	8000d44 <HAL_RCC_OscConfig+0xb0>
 8000d08:	687b      	ldr	r3, [r7, #4]
 8000d0a:	685b      	ldr	r3, [r3, #4]
 8000d0c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000d10:	d10c      	bne.n	8000d2c <HAL_RCC_OscConfig+0x98>
 8000d12:	4b70      	ldr	r3, [pc, #448]	; (8000ed4 <HAL_RCC_OscConfig+0x240>)
 8000d14:	681b      	ldr	r3, [r3, #0]
 8000d16:	4a6f      	ldr	r2, [pc, #444]	; (8000ed4 <HAL_RCC_OscConfig+0x240>)
 8000d18:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000d1c:	6013      	str	r3, [r2, #0]
 8000d1e:	4b6d      	ldr	r3, [pc, #436]	; (8000ed4 <HAL_RCC_OscConfig+0x240>)
 8000d20:	681b      	ldr	r3, [r3, #0]
 8000d22:	4a6c      	ldr	r2, [pc, #432]	; (8000ed4 <HAL_RCC_OscConfig+0x240>)
 8000d24:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000d28:	6013      	str	r3, [r2, #0]
 8000d2a:	e00b      	b.n	8000d44 <HAL_RCC_OscConfig+0xb0>
 8000d2c:	4b69      	ldr	r3, [pc, #420]	; (8000ed4 <HAL_RCC_OscConfig+0x240>)
 8000d2e:	681b      	ldr	r3, [r3, #0]
 8000d30:	4a68      	ldr	r2, [pc, #416]	; (8000ed4 <HAL_RCC_OscConfig+0x240>)
 8000d32:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000d36:	6013      	str	r3, [r2, #0]
 8000d38:	4b66      	ldr	r3, [pc, #408]	; (8000ed4 <HAL_RCC_OscConfig+0x240>)
 8000d3a:	681b      	ldr	r3, [r3, #0]
 8000d3c:	4a65      	ldr	r2, [pc, #404]	; (8000ed4 <HAL_RCC_OscConfig+0x240>)
 8000d3e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000d42:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8000d44:	687b      	ldr	r3, [r7, #4]
 8000d46:	685b      	ldr	r3, [r3, #4]
 8000d48:	2b00      	cmp	r3, #0
 8000d4a:	d013      	beq.n	8000d74 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000d4c:	f7ff fcd2 	bl	80006f4 <HAL_GetTick>
 8000d50:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000d52:	e008      	b.n	8000d66 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000d54:	f7ff fcce 	bl	80006f4 <HAL_GetTick>
 8000d58:	4602      	mov	r2, r0
 8000d5a:	693b      	ldr	r3, [r7, #16]
 8000d5c:	1ad3      	subs	r3, r2, r3
 8000d5e:	2b64      	cmp	r3, #100	; 0x64
 8000d60:	d901      	bls.n	8000d66 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8000d62:	2303      	movs	r3, #3
 8000d64:	e207      	b.n	8001176 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000d66:	4b5b      	ldr	r3, [pc, #364]	; (8000ed4 <HAL_RCC_OscConfig+0x240>)
 8000d68:	681b      	ldr	r3, [r3, #0]
 8000d6a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000d6e:	2b00      	cmp	r3, #0
 8000d70:	d0f0      	beq.n	8000d54 <HAL_RCC_OscConfig+0xc0>
 8000d72:	e014      	b.n	8000d9e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000d74:	f7ff fcbe 	bl	80006f4 <HAL_GetTick>
 8000d78:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000d7a:	e008      	b.n	8000d8e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000d7c:	f7ff fcba 	bl	80006f4 <HAL_GetTick>
 8000d80:	4602      	mov	r2, r0
 8000d82:	693b      	ldr	r3, [r7, #16]
 8000d84:	1ad3      	subs	r3, r2, r3
 8000d86:	2b64      	cmp	r3, #100	; 0x64
 8000d88:	d901      	bls.n	8000d8e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8000d8a:	2303      	movs	r3, #3
 8000d8c:	e1f3      	b.n	8001176 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000d8e:	4b51      	ldr	r3, [pc, #324]	; (8000ed4 <HAL_RCC_OscConfig+0x240>)
 8000d90:	681b      	ldr	r3, [r3, #0]
 8000d92:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000d96:	2b00      	cmp	r3, #0
 8000d98:	d1f0      	bne.n	8000d7c <HAL_RCC_OscConfig+0xe8>
 8000d9a:	e000      	b.n	8000d9e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000d9c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000d9e:	687b      	ldr	r3, [r7, #4]
 8000da0:	681b      	ldr	r3, [r3, #0]
 8000da2:	f003 0302 	and.w	r3, r3, #2
 8000da6:	2b00      	cmp	r3, #0
 8000da8:	d063      	beq.n	8000e72 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8000daa:	4b4a      	ldr	r3, [pc, #296]	; (8000ed4 <HAL_RCC_OscConfig+0x240>)
 8000dac:	689b      	ldr	r3, [r3, #8]
 8000dae:	f003 030c 	and.w	r3, r3, #12
 8000db2:	2b00      	cmp	r3, #0
 8000db4:	d00b      	beq.n	8000dce <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8000db6:	4b47      	ldr	r3, [pc, #284]	; (8000ed4 <HAL_RCC_OscConfig+0x240>)
 8000db8:	689b      	ldr	r3, [r3, #8]
 8000dba:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8000dbe:	2b08      	cmp	r3, #8
 8000dc0:	d11c      	bne.n	8000dfc <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8000dc2:	4b44      	ldr	r3, [pc, #272]	; (8000ed4 <HAL_RCC_OscConfig+0x240>)
 8000dc4:	685b      	ldr	r3, [r3, #4]
 8000dc6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000dca:	2b00      	cmp	r3, #0
 8000dcc:	d116      	bne.n	8000dfc <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000dce:	4b41      	ldr	r3, [pc, #260]	; (8000ed4 <HAL_RCC_OscConfig+0x240>)
 8000dd0:	681b      	ldr	r3, [r3, #0]
 8000dd2:	f003 0302 	and.w	r3, r3, #2
 8000dd6:	2b00      	cmp	r3, #0
 8000dd8:	d005      	beq.n	8000de6 <HAL_RCC_OscConfig+0x152>
 8000dda:	687b      	ldr	r3, [r7, #4]
 8000ddc:	68db      	ldr	r3, [r3, #12]
 8000dde:	2b01      	cmp	r3, #1
 8000de0:	d001      	beq.n	8000de6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8000de2:	2301      	movs	r3, #1
 8000de4:	e1c7      	b.n	8001176 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000de6:	4b3b      	ldr	r3, [pc, #236]	; (8000ed4 <HAL_RCC_OscConfig+0x240>)
 8000de8:	681b      	ldr	r3, [r3, #0]
 8000dea:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000dee:	687b      	ldr	r3, [r7, #4]
 8000df0:	691b      	ldr	r3, [r3, #16]
 8000df2:	00db      	lsls	r3, r3, #3
 8000df4:	4937      	ldr	r1, [pc, #220]	; (8000ed4 <HAL_RCC_OscConfig+0x240>)
 8000df6:	4313      	orrs	r3, r2
 8000df8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000dfa:	e03a      	b.n	8000e72 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8000dfc:	687b      	ldr	r3, [r7, #4]
 8000dfe:	68db      	ldr	r3, [r3, #12]
 8000e00:	2b00      	cmp	r3, #0
 8000e02:	d020      	beq.n	8000e46 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8000e04:	4b34      	ldr	r3, [pc, #208]	; (8000ed8 <HAL_RCC_OscConfig+0x244>)
 8000e06:	2201      	movs	r2, #1
 8000e08:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000e0a:	f7ff fc73 	bl	80006f4 <HAL_GetTick>
 8000e0e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000e10:	e008      	b.n	8000e24 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000e12:	f7ff fc6f 	bl	80006f4 <HAL_GetTick>
 8000e16:	4602      	mov	r2, r0
 8000e18:	693b      	ldr	r3, [r7, #16]
 8000e1a:	1ad3      	subs	r3, r2, r3
 8000e1c:	2b02      	cmp	r3, #2
 8000e1e:	d901      	bls.n	8000e24 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8000e20:	2303      	movs	r3, #3
 8000e22:	e1a8      	b.n	8001176 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000e24:	4b2b      	ldr	r3, [pc, #172]	; (8000ed4 <HAL_RCC_OscConfig+0x240>)
 8000e26:	681b      	ldr	r3, [r3, #0]
 8000e28:	f003 0302 	and.w	r3, r3, #2
 8000e2c:	2b00      	cmp	r3, #0
 8000e2e:	d0f0      	beq.n	8000e12 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000e30:	4b28      	ldr	r3, [pc, #160]	; (8000ed4 <HAL_RCC_OscConfig+0x240>)
 8000e32:	681b      	ldr	r3, [r3, #0]
 8000e34:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000e38:	687b      	ldr	r3, [r7, #4]
 8000e3a:	691b      	ldr	r3, [r3, #16]
 8000e3c:	00db      	lsls	r3, r3, #3
 8000e3e:	4925      	ldr	r1, [pc, #148]	; (8000ed4 <HAL_RCC_OscConfig+0x240>)
 8000e40:	4313      	orrs	r3, r2
 8000e42:	600b      	str	r3, [r1, #0]
 8000e44:	e015      	b.n	8000e72 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8000e46:	4b24      	ldr	r3, [pc, #144]	; (8000ed8 <HAL_RCC_OscConfig+0x244>)
 8000e48:	2200      	movs	r2, #0
 8000e4a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000e4c:	f7ff fc52 	bl	80006f4 <HAL_GetTick>
 8000e50:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000e52:	e008      	b.n	8000e66 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000e54:	f7ff fc4e 	bl	80006f4 <HAL_GetTick>
 8000e58:	4602      	mov	r2, r0
 8000e5a:	693b      	ldr	r3, [r7, #16]
 8000e5c:	1ad3      	subs	r3, r2, r3
 8000e5e:	2b02      	cmp	r3, #2
 8000e60:	d901      	bls.n	8000e66 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8000e62:	2303      	movs	r3, #3
 8000e64:	e187      	b.n	8001176 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000e66:	4b1b      	ldr	r3, [pc, #108]	; (8000ed4 <HAL_RCC_OscConfig+0x240>)
 8000e68:	681b      	ldr	r3, [r3, #0]
 8000e6a:	f003 0302 	and.w	r3, r3, #2
 8000e6e:	2b00      	cmp	r3, #0
 8000e70:	d1f0      	bne.n	8000e54 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000e72:	687b      	ldr	r3, [r7, #4]
 8000e74:	681b      	ldr	r3, [r3, #0]
 8000e76:	f003 0308 	and.w	r3, r3, #8
 8000e7a:	2b00      	cmp	r3, #0
 8000e7c:	d036      	beq.n	8000eec <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8000e7e:	687b      	ldr	r3, [r7, #4]
 8000e80:	695b      	ldr	r3, [r3, #20]
 8000e82:	2b00      	cmp	r3, #0
 8000e84:	d016      	beq.n	8000eb4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8000e86:	4b15      	ldr	r3, [pc, #84]	; (8000edc <HAL_RCC_OscConfig+0x248>)
 8000e88:	2201      	movs	r2, #1
 8000e8a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8000e8c:	f7ff fc32 	bl	80006f4 <HAL_GetTick>
 8000e90:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000e92:	e008      	b.n	8000ea6 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000e94:	f7ff fc2e 	bl	80006f4 <HAL_GetTick>
 8000e98:	4602      	mov	r2, r0
 8000e9a:	693b      	ldr	r3, [r7, #16]
 8000e9c:	1ad3      	subs	r3, r2, r3
 8000e9e:	2b02      	cmp	r3, #2
 8000ea0:	d901      	bls.n	8000ea6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8000ea2:	2303      	movs	r3, #3
 8000ea4:	e167      	b.n	8001176 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000ea6:	4b0b      	ldr	r3, [pc, #44]	; (8000ed4 <HAL_RCC_OscConfig+0x240>)
 8000ea8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8000eaa:	f003 0302 	and.w	r3, r3, #2
 8000eae:	2b00      	cmp	r3, #0
 8000eb0:	d0f0      	beq.n	8000e94 <HAL_RCC_OscConfig+0x200>
 8000eb2:	e01b      	b.n	8000eec <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8000eb4:	4b09      	ldr	r3, [pc, #36]	; (8000edc <HAL_RCC_OscConfig+0x248>)
 8000eb6:	2200      	movs	r2, #0
 8000eb8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000eba:	f7ff fc1b 	bl	80006f4 <HAL_GetTick>
 8000ebe:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000ec0:	e00e      	b.n	8000ee0 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000ec2:	f7ff fc17 	bl	80006f4 <HAL_GetTick>
 8000ec6:	4602      	mov	r2, r0
 8000ec8:	693b      	ldr	r3, [r7, #16]
 8000eca:	1ad3      	subs	r3, r2, r3
 8000ecc:	2b02      	cmp	r3, #2
 8000ece:	d907      	bls.n	8000ee0 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8000ed0:	2303      	movs	r3, #3
 8000ed2:	e150      	b.n	8001176 <HAL_RCC_OscConfig+0x4e2>
 8000ed4:	40023800 	.word	0x40023800
 8000ed8:	42470000 	.word	0x42470000
 8000edc:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000ee0:	4b88      	ldr	r3, [pc, #544]	; (8001104 <HAL_RCC_OscConfig+0x470>)
 8000ee2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8000ee4:	f003 0302 	and.w	r3, r3, #2
 8000ee8:	2b00      	cmp	r3, #0
 8000eea:	d1ea      	bne.n	8000ec2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000eec:	687b      	ldr	r3, [r7, #4]
 8000eee:	681b      	ldr	r3, [r3, #0]
 8000ef0:	f003 0304 	and.w	r3, r3, #4
 8000ef4:	2b00      	cmp	r3, #0
 8000ef6:	f000 8097 	beq.w	8001028 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8000efa:	2300      	movs	r3, #0
 8000efc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000efe:	4b81      	ldr	r3, [pc, #516]	; (8001104 <HAL_RCC_OscConfig+0x470>)
 8000f00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f02:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f06:	2b00      	cmp	r3, #0
 8000f08:	d10f      	bne.n	8000f2a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8000f0a:	2300      	movs	r3, #0
 8000f0c:	60bb      	str	r3, [r7, #8]
 8000f0e:	4b7d      	ldr	r3, [pc, #500]	; (8001104 <HAL_RCC_OscConfig+0x470>)
 8000f10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f12:	4a7c      	ldr	r2, [pc, #496]	; (8001104 <HAL_RCC_OscConfig+0x470>)
 8000f14:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000f18:	6413      	str	r3, [r2, #64]	; 0x40
 8000f1a:	4b7a      	ldr	r3, [pc, #488]	; (8001104 <HAL_RCC_OscConfig+0x470>)
 8000f1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f1e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f22:	60bb      	str	r3, [r7, #8]
 8000f24:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8000f26:	2301      	movs	r3, #1
 8000f28:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000f2a:	4b77      	ldr	r3, [pc, #476]	; (8001108 <HAL_RCC_OscConfig+0x474>)
 8000f2c:	681b      	ldr	r3, [r3, #0]
 8000f2e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000f32:	2b00      	cmp	r3, #0
 8000f34:	d118      	bne.n	8000f68 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8000f36:	4b74      	ldr	r3, [pc, #464]	; (8001108 <HAL_RCC_OscConfig+0x474>)
 8000f38:	681b      	ldr	r3, [r3, #0]
 8000f3a:	4a73      	ldr	r2, [pc, #460]	; (8001108 <HAL_RCC_OscConfig+0x474>)
 8000f3c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000f40:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8000f42:	f7ff fbd7 	bl	80006f4 <HAL_GetTick>
 8000f46:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000f48:	e008      	b.n	8000f5c <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000f4a:	f7ff fbd3 	bl	80006f4 <HAL_GetTick>
 8000f4e:	4602      	mov	r2, r0
 8000f50:	693b      	ldr	r3, [r7, #16]
 8000f52:	1ad3      	subs	r3, r2, r3
 8000f54:	2b02      	cmp	r3, #2
 8000f56:	d901      	bls.n	8000f5c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8000f58:	2303      	movs	r3, #3
 8000f5a:	e10c      	b.n	8001176 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000f5c:	4b6a      	ldr	r3, [pc, #424]	; (8001108 <HAL_RCC_OscConfig+0x474>)
 8000f5e:	681b      	ldr	r3, [r3, #0]
 8000f60:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000f64:	2b00      	cmp	r3, #0
 8000f66:	d0f0      	beq.n	8000f4a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000f68:	687b      	ldr	r3, [r7, #4]
 8000f6a:	689b      	ldr	r3, [r3, #8]
 8000f6c:	2b01      	cmp	r3, #1
 8000f6e:	d106      	bne.n	8000f7e <HAL_RCC_OscConfig+0x2ea>
 8000f70:	4b64      	ldr	r3, [pc, #400]	; (8001104 <HAL_RCC_OscConfig+0x470>)
 8000f72:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000f74:	4a63      	ldr	r2, [pc, #396]	; (8001104 <HAL_RCC_OscConfig+0x470>)
 8000f76:	f043 0301 	orr.w	r3, r3, #1
 8000f7a:	6713      	str	r3, [r2, #112]	; 0x70
 8000f7c:	e01c      	b.n	8000fb8 <HAL_RCC_OscConfig+0x324>
 8000f7e:	687b      	ldr	r3, [r7, #4]
 8000f80:	689b      	ldr	r3, [r3, #8]
 8000f82:	2b05      	cmp	r3, #5
 8000f84:	d10c      	bne.n	8000fa0 <HAL_RCC_OscConfig+0x30c>
 8000f86:	4b5f      	ldr	r3, [pc, #380]	; (8001104 <HAL_RCC_OscConfig+0x470>)
 8000f88:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000f8a:	4a5e      	ldr	r2, [pc, #376]	; (8001104 <HAL_RCC_OscConfig+0x470>)
 8000f8c:	f043 0304 	orr.w	r3, r3, #4
 8000f90:	6713      	str	r3, [r2, #112]	; 0x70
 8000f92:	4b5c      	ldr	r3, [pc, #368]	; (8001104 <HAL_RCC_OscConfig+0x470>)
 8000f94:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000f96:	4a5b      	ldr	r2, [pc, #364]	; (8001104 <HAL_RCC_OscConfig+0x470>)
 8000f98:	f043 0301 	orr.w	r3, r3, #1
 8000f9c:	6713      	str	r3, [r2, #112]	; 0x70
 8000f9e:	e00b      	b.n	8000fb8 <HAL_RCC_OscConfig+0x324>
 8000fa0:	4b58      	ldr	r3, [pc, #352]	; (8001104 <HAL_RCC_OscConfig+0x470>)
 8000fa2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000fa4:	4a57      	ldr	r2, [pc, #348]	; (8001104 <HAL_RCC_OscConfig+0x470>)
 8000fa6:	f023 0301 	bic.w	r3, r3, #1
 8000faa:	6713      	str	r3, [r2, #112]	; 0x70
 8000fac:	4b55      	ldr	r3, [pc, #340]	; (8001104 <HAL_RCC_OscConfig+0x470>)
 8000fae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000fb0:	4a54      	ldr	r2, [pc, #336]	; (8001104 <HAL_RCC_OscConfig+0x470>)
 8000fb2:	f023 0304 	bic.w	r3, r3, #4
 8000fb6:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8000fb8:	687b      	ldr	r3, [r7, #4]
 8000fba:	689b      	ldr	r3, [r3, #8]
 8000fbc:	2b00      	cmp	r3, #0
 8000fbe:	d015      	beq.n	8000fec <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8000fc0:	f7ff fb98 	bl	80006f4 <HAL_GetTick>
 8000fc4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000fc6:	e00a      	b.n	8000fde <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000fc8:	f7ff fb94 	bl	80006f4 <HAL_GetTick>
 8000fcc:	4602      	mov	r2, r0
 8000fce:	693b      	ldr	r3, [r7, #16]
 8000fd0:	1ad3      	subs	r3, r2, r3
 8000fd2:	f241 3288 	movw	r2, #5000	; 0x1388
 8000fd6:	4293      	cmp	r3, r2
 8000fd8:	d901      	bls.n	8000fde <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8000fda:	2303      	movs	r3, #3
 8000fdc:	e0cb      	b.n	8001176 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000fde:	4b49      	ldr	r3, [pc, #292]	; (8001104 <HAL_RCC_OscConfig+0x470>)
 8000fe0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000fe2:	f003 0302 	and.w	r3, r3, #2
 8000fe6:	2b00      	cmp	r3, #0
 8000fe8:	d0ee      	beq.n	8000fc8 <HAL_RCC_OscConfig+0x334>
 8000fea:	e014      	b.n	8001016 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000fec:	f7ff fb82 	bl	80006f4 <HAL_GetTick>
 8000ff0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000ff2:	e00a      	b.n	800100a <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000ff4:	f7ff fb7e 	bl	80006f4 <HAL_GetTick>
 8000ff8:	4602      	mov	r2, r0
 8000ffa:	693b      	ldr	r3, [r7, #16]
 8000ffc:	1ad3      	subs	r3, r2, r3
 8000ffe:	f241 3288 	movw	r2, #5000	; 0x1388
 8001002:	4293      	cmp	r3, r2
 8001004:	d901      	bls.n	800100a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8001006:	2303      	movs	r3, #3
 8001008:	e0b5      	b.n	8001176 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800100a:	4b3e      	ldr	r3, [pc, #248]	; (8001104 <HAL_RCC_OscConfig+0x470>)
 800100c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800100e:	f003 0302 	and.w	r3, r3, #2
 8001012:	2b00      	cmp	r3, #0
 8001014:	d1ee      	bne.n	8000ff4 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001016:	7dfb      	ldrb	r3, [r7, #23]
 8001018:	2b01      	cmp	r3, #1
 800101a:	d105      	bne.n	8001028 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800101c:	4b39      	ldr	r3, [pc, #228]	; (8001104 <HAL_RCC_OscConfig+0x470>)
 800101e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001020:	4a38      	ldr	r2, [pc, #224]	; (8001104 <HAL_RCC_OscConfig+0x470>)
 8001022:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001026:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	699b      	ldr	r3, [r3, #24]
 800102c:	2b00      	cmp	r3, #0
 800102e:	f000 80a1 	beq.w	8001174 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001032:	4b34      	ldr	r3, [pc, #208]	; (8001104 <HAL_RCC_OscConfig+0x470>)
 8001034:	689b      	ldr	r3, [r3, #8]
 8001036:	f003 030c 	and.w	r3, r3, #12
 800103a:	2b08      	cmp	r3, #8
 800103c:	d05c      	beq.n	80010f8 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800103e:	687b      	ldr	r3, [r7, #4]
 8001040:	699b      	ldr	r3, [r3, #24]
 8001042:	2b02      	cmp	r3, #2
 8001044:	d141      	bne.n	80010ca <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001046:	4b31      	ldr	r3, [pc, #196]	; (800110c <HAL_RCC_OscConfig+0x478>)
 8001048:	2200      	movs	r2, #0
 800104a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800104c:	f7ff fb52 	bl	80006f4 <HAL_GetTick>
 8001050:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001052:	e008      	b.n	8001066 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001054:	f7ff fb4e 	bl	80006f4 <HAL_GetTick>
 8001058:	4602      	mov	r2, r0
 800105a:	693b      	ldr	r3, [r7, #16]
 800105c:	1ad3      	subs	r3, r2, r3
 800105e:	2b02      	cmp	r3, #2
 8001060:	d901      	bls.n	8001066 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8001062:	2303      	movs	r3, #3
 8001064:	e087      	b.n	8001176 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001066:	4b27      	ldr	r3, [pc, #156]	; (8001104 <HAL_RCC_OscConfig+0x470>)
 8001068:	681b      	ldr	r3, [r3, #0]
 800106a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800106e:	2b00      	cmp	r3, #0
 8001070:	d1f0      	bne.n	8001054 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	69da      	ldr	r2, [r3, #28]
 8001076:	687b      	ldr	r3, [r7, #4]
 8001078:	6a1b      	ldr	r3, [r3, #32]
 800107a:	431a      	orrs	r2, r3
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001080:	019b      	lsls	r3, r3, #6
 8001082:	431a      	orrs	r2, r3
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001088:	085b      	lsrs	r3, r3, #1
 800108a:	3b01      	subs	r3, #1
 800108c:	041b      	lsls	r3, r3, #16
 800108e:	431a      	orrs	r2, r3
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001094:	061b      	lsls	r3, r3, #24
 8001096:	491b      	ldr	r1, [pc, #108]	; (8001104 <HAL_RCC_OscConfig+0x470>)
 8001098:	4313      	orrs	r3, r2
 800109a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800109c:	4b1b      	ldr	r3, [pc, #108]	; (800110c <HAL_RCC_OscConfig+0x478>)
 800109e:	2201      	movs	r2, #1
 80010a0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80010a2:	f7ff fb27 	bl	80006f4 <HAL_GetTick>
 80010a6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80010a8:	e008      	b.n	80010bc <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80010aa:	f7ff fb23 	bl	80006f4 <HAL_GetTick>
 80010ae:	4602      	mov	r2, r0
 80010b0:	693b      	ldr	r3, [r7, #16]
 80010b2:	1ad3      	subs	r3, r2, r3
 80010b4:	2b02      	cmp	r3, #2
 80010b6:	d901      	bls.n	80010bc <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80010b8:	2303      	movs	r3, #3
 80010ba:	e05c      	b.n	8001176 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80010bc:	4b11      	ldr	r3, [pc, #68]	; (8001104 <HAL_RCC_OscConfig+0x470>)
 80010be:	681b      	ldr	r3, [r3, #0]
 80010c0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80010c4:	2b00      	cmp	r3, #0
 80010c6:	d0f0      	beq.n	80010aa <HAL_RCC_OscConfig+0x416>
 80010c8:	e054      	b.n	8001174 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80010ca:	4b10      	ldr	r3, [pc, #64]	; (800110c <HAL_RCC_OscConfig+0x478>)
 80010cc:	2200      	movs	r2, #0
 80010ce:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80010d0:	f7ff fb10 	bl	80006f4 <HAL_GetTick>
 80010d4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80010d6:	e008      	b.n	80010ea <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80010d8:	f7ff fb0c 	bl	80006f4 <HAL_GetTick>
 80010dc:	4602      	mov	r2, r0
 80010de:	693b      	ldr	r3, [r7, #16]
 80010e0:	1ad3      	subs	r3, r2, r3
 80010e2:	2b02      	cmp	r3, #2
 80010e4:	d901      	bls.n	80010ea <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80010e6:	2303      	movs	r3, #3
 80010e8:	e045      	b.n	8001176 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80010ea:	4b06      	ldr	r3, [pc, #24]	; (8001104 <HAL_RCC_OscConfig+0x470>)
 80010ec:	681b      	ldr	r3, [r3, #0]
 80010ee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80010f2:	2b00      	cmp	r3, #0
 80010f4:	d1f0      	bne.n	80010d8 <HAL_RCC_OscConfig+0x444>
 80010f6:	e03d      	b.n	8001174 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	699b      	ldr	r3, [r3, #24]
 80010fc:	2b01      	cmp	r3, #1
 80010fe:	d107      	bne.n	8001110 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8001100:	2301      	movs	r3, #1
 8001102:	e038      	b.n	8001176 <HAL_RCC_OscConfig+0x4e2>
 8001104:	40023800 	.word	0x40023800
 8001108:	40007000 	.word	0x40007000
 800110c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001110:	4b1b      	ldr	r3, [pc, #108]	; (8001180 <HAL_RCC_OscConfig+0x4ec>)
 8001112:	685b      	ldr	r3, [r3, #4]
 8001114:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	699b      	ldr	r3, [r3, #24]
 800111a:	2b01      	cmp	r3, #1
 800111c:	d028      	beq.n	8001170 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800111e:	68fb      	ldr	r3, [r7, #12]
 8001120:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001128:	429a      	cmp	r2, r3
 800112a:	d121      	bne.n	8001170 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800112c:	68fb      	ldr	r3, [r7, #12]
 800112e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001136:	429a      	cmp	r2, r3
 8001138:	d11a      	bne.n	8001170 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800113a:	68fa      	ldr	r2, [r7, #12]
 800113c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001140:	4013      	ands	r3, r2
 8001142:	687a      	ldr	r2, [r7, #4]
 8001144:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001146:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001148:	4293      	cmp	r3, r2
 800114a:	d111      	bne.n	8001170 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800114c:	68fb      	ldr	r3, [r7, #12]
 800114e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001156:	085b      	lsrs	r3, r3, #1
 8001158:	3b01      	subs	r3, #1
 800115a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800115c:	429a      	cmp	r2, r3
 800115e:	d107      	bne.n	8001170 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001160:	68fb      	ldr	r3, [r7, #12]
 8001162:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800116a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800116c:	429a      	cmp	r2, r3
 800116e:	d001      	beq.n	8001174 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8001170:	2301      	movs	r3, #1
 8001172:	e000      	b.n	8001176 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8001174:	2300      	movs	r3, #0
}
 8001176:	4618      	mov	r0, r3
 8001178:	3718      	adds	r7, #24
 800117a:	46bd      	mov	sp, r7
 800117c:	bd80      	pop	{r7, pc}
 800117e:	bf00      	nop
 8001180:	40023800 	.word	0x40023800

08001184 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001184:	b580      	push	{r7, lr}
 8001186:	b084      	sub	sp, #16
 8001188:	af00      	add	r7, sp, #0
 800118a:	6078      	str	r0, [r7, #4]
 800118c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	2b00      	cmp	r3, #0
 8001192:	d101      	bne.n	8001198 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001194:	2301      	movs	r3, #1
 8001196:	e0cc      	b.n	8001332 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001198:	4b68      	ldr	r3, [pc, #416]	; (800133c <HAL_RCC_ClockConfig+0x1b8>)
 800119a:	681b      	ldr	r3, [r3, #0]
 800119c:	f003 030f 	and.w	r3, r3, #15
 80011a0:	683a      	ldr	r2, [r7, #0]
 80011a2:	429a      	cmp	r2, r3
 80011a4:	d90c      	bls.n	80011c0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80011a6:	4b65      	ldr	r3, [pc, #404]	; (800133c <HAL_RCC_ClockConfig+0x1b8>)
 80011a8:	683a      	ldr	r2, [r7, #0]
 80011aa:	b2d2      	uxtb	r2, r2
 80011ac:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80011ae:	4b63      	ldr	r3, [pc, #396]	; (800133c <HAL_RCC_ClockConfig+0x1b8>)
 80011b0:	681b      	ldr	r3, [r3, #0]
 80011b2:	f003 030f 	and.w	r3, r3, #15
 80011b6:	683a      	ldr	r2, [r7, #0]
 80011b8:	429a      	cmp	r2, r3
 80011ba:	d001      	beq.n	80011c0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80011bc:	2301      	movs	r3, #1
 80011be:	e0b8      	b.n	8001332 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	681b      	ldr	r3, [r3, #0]
 80011c4:	f003 0302 	and.w	r3, r3, #2
 80011c8:	2b00      	cmp	r3, #0
 80011ca:	d020      	beq.n	800120e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	681b      	ldr	r3, [r3, #0]
 80011d0:	f003 0304 	and.w	r3, r3, #4
 80011d4:	2b00      	cmp	r3, #0
 80011d6:	d005      	beq.n	80011e4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80011d8:	4b59      	ldr	r3, [pc, #356]	; (8001340 <HAL_RCC_ClockConfig+0x1bc>)
 80011da:	689b      	ldr	r3, [r3, #8]
 80011dc:	4a58      	ldr	r2, [pc, #352]	; (8001340 <HAL_RCC_ClockConfig+0x1bc>)
 80011de:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80011e2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	681b      	ldr	r3, [r3, #0]
 80011e8:	f003 0308 	and.w	r3, r3, #8
 80011ec:	2b00      	cmp	r3, #0
 80011ee:	d005      	beq.n	80011fc <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80011f0:	4b53      	ldr	r3, [pc, #332]	; (8001340 <HAL_RCC_ClockConfig+0x1bc>)
 80011f2:	689b      	ldr	r3, [r3, #8]
 80011f4:	4a52      	ldr	r2, [pc, #328]	; (8001340 <HAL_RCC_ClockConfig+0x1bc>)
 80011f6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80011fa:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80011fc:	4b50      	ldr	r3, [pc, #320]	; (8001340 <HAL_RCC_ClockConfig+0x1bc>)
 80011fe:	689b      	ldr	r3, [r3, #8]
 8001200:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	689b      	ldr	r3, [r3, #8]
 8001208:	494d      	ldr	r1, [pc, #308]	; (8001340 <HAL_RCC_ClockConfig+0x1bc>)
 800120a:	4313      	orrs	r3, r2
 800120c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	681b      	ldr	r3, [r3, #0]
 8001212:	f003 0301 	and.w	r3, r3, #1
 8001216:	2b00      	cmp	r3, #0
 8001218:	d044      	beq.n	80012a4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	685b      	ldr	r3, [r3, #4]
 800121e:	2b01      	cmp	r3, #1
 8001220:	d107      	bne.n	8001232 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001222:	4b47      	ldr	r3, [pc, #284]	; (8001340 <HAL_RCC_ClockConfig+0x1bc>)
 8001224:	681b      	ldr	r3, [r3, #0]
 8001226:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800122a:	2b00      	cmp	r3, #0
 800122c:	d119      	bne.n	8001262 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800122e:	2301      	movs	r3, #1
 8001230:	e07f      	b.n	8001332 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	685b      	ldr	r3, [r3, #4]
 8001236:	2b02      	cmp	r3, #2
 8001238:	d003      	beq.n	8001242 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800123e:	2b03      	cmp	r3, #3
 8001240:	d107      	bne.n	8001252 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001242:	4b3f      	ldr	r3, [pc, #252]	; (8001340 <HAL_RCC_ClockConfig+0x1bc>)
 8001244:	681b      	ldr	r3, [r3, #0]
 8001246:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800124a:	2b00      	cmp	r3, #0
 800124c:	d109      	bne.n	8001262 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800124e:	2301      	movs	r3, #1
 8001250:	e06f      	b.n	8001332 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001252:	4b3b      	ldr	r3, [pc, #236]	; (8001340 <HAL_RCC_ClockConfig+0x1bc>)
 8001254:	681b      	ldr	r3, [r3, #0]
 8001256:	f003 0302 	and.w	r3, r3, #2
 800125a:	2b00      	cmp	r3, #0
 800125c:	d101      	bne.n	8001262 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800125e:	2301      	movs	r3, #1
 8001260:	e067      	b.n	8001332 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001262:	4b37      	ldr	r3, [pc, #220]	; (8001340 <HAL_RCC_ClockConfig+0x1bc>)
 8001264:	689b      	ldr	r3, [r3, #8]
 8001266:	f023 0203 	bic.w	r2, r3, #3
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	685b      	ldr	r3, [r3, #4]
 800126e:	4934      	ldr	r1, [pc, #208]	; (8001340 <HAL_RCC_ClockConfig+0x1bc>)
 8001270:	4313      	orrs	r3, r2
 8001272:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001274:	f7ff fa3e 	bl	80006f4 <HAL_GetTick>
 8001278:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800127a:	e00a      	b.n	8001292 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800127c:	f7ff fa3a 	bl	80006f4 <HAL_GetTick>
 8001280:	4602      	mov	r2, r0
 8001282:	68fb      	ldr	r3, [r7, #12]
 8001284:	1ad3      	subs	r3, r2, r3
 8001286:	f241 3288 	movw	r2, #5000	; 0x1388
 800128a:	4293      	cmp	r3, r2
 800128c:	d901      	bls.n	8001292 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800128e:	2303      	movs	r3, #3
 8001290:	e04f      	b.n	8001332 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001292:	4b2b      	ldr	r3, [pc, #172]	; (8001340 <HAL_RCC_ClockConfig+0x1bc>)
 8001294:	689b      	ldr	r3, [r3, #8]
 8001296:	f003 020c 	and.w	r2, r3, #12
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	685b      	ldr	r3, [r3, #4]
 800129e:	009b      	lsls	r3, r3, #2
 80012a0:	429a      	cmp	r2, r3
 80012a2:	d1eb      	bne.n	800127c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80012a4:	4b25      	ldr	r3, [pc, #148]	; (800133c <HAL_RCC_ClockConfig+0x1b8>)
 80012a6:	681b      	ldr	r3, [r3, #0]
 80012a8:	f003 030f 	and.w	r3, r3, #15
 80012ac:	683a      	ldr	r2, [r7, #0]
 80012ae:	429a      	cmp	r2, r3
 80012b0:	d20c      	bcs.n	80012cc <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80012b2:	4b22      	ldr	r3, [pc, #136]	; (800133c <HAL_RCC_ClockConfig+0x1b8>)
 80012b4:	683a      	ldr	r2, [r7, #0]
 80012b6:	b2d2      	uxtb	r2, r2
 80012b8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80012ba:	4b20      	ldr	r3, [pc, #128]	; (800133c <HAL_RCC_ClockConfig+0x1b8>)
 80012bc:	681b      	ldr	r3, [r3, #0]
 80012be:	f003 030f 	and.w	r3, r3, #15
 80012c2:	683a      	ldr	r2, [r7, #0]
 80012c4:	429a      	cmp	r2, r3
 80012c6:	d001      	beq.n	80012cc <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80012c8:	2301      	movs	r3, #1
 80012ca:	e032      	b.n	8001332 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	681b      	ldr	r3, [r3, #0]
 80012d0:	f003 0304 	and.w	r3, r3, #4
 80012d4:	2b00      	cmp	r3, #0
 80012d6:	d008      	beq.n	80012ea <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80012d8:	4b19      	ldr	r3, [pc, #100]	; (8001340 <HAL_RCC_ClockConfig+0x1bc>)
 80012da:	689b      	ldr	r3, [r3, #8]
 80012dc:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	68db      	ldr	r3, [r3, #12]
 80012e4:	4916      	ldr	r1, [pc, #88]	; (8001340 <HAL_RCC_ClockConfig+0x1bc>)
 80012e6:	4313      	orrs	r3, r2
 80012e8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	681b      	ldr	r3, [r3, #0]
 80012ee:	f003 0308 	and.w	r3, r3, #8
 80012f2:	2b00      	cmp	r3, #0
 80012f4:	d009      	beq.n	800130a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80012f6:	4b12      	ldr	r3, [pc, #72]	; (8001340 <HAL_RCC_ClockConfig+0x1bc>)
 80012f8:	689b      	ldr	r3, [r3, #8]
 80012fa:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	691b      	ldr	r3, [r3, #16]
 8001302:	00db      	lsls	r3, r3, #3
 8001304:	490e      	ldr	r1, [pc, #56]	; (8001340 <HAL_RCC_ClockConfig+0x1bc>)
 8001306:	4313      	orrs	r3, r2
 8001308:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800130a:	f000 f821 	bl	8001350 <HAL_RCC_GetSysClockFreq>
 800130e:	4602      	mov	r2, r0
 8001310:	4b0b      	ldr	r3, [pc, #44]	; (8001340 <HAL_RCC_ClockConfig+0x1bc>)
 8001312:	689b      	ldr	r3, [r3, #8]
 8001314:	091b      	lsrs	r3, r3, #4
 8001316:	f003 030f 	and.w	r3, r3, #15
 800131a:	490a      	ldr	r1, [pc, #40]	; (8001344 <HAL_RCC_ClockConfig+0x1c0>)
 800131c:	5ccb      	ldrb	r3, [r1, r3]
 800131e:	fa22 f303 	lsr.w	r3, r2, r3
 8001322:	4a09      	ldr	r2, [pc, #36]	; (8001348 <HAL_RCC_ClockConfig+0x1c4>)
 8001324:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001326:	4b09      	ldr	r3, [pc, #36]	; (800134c <HAL_RCC_ClockConfig+0x1c8>)
 8001328:	681b      	ldr	r3, [r3, #0]
 800132a:	4618      	mov	r0, r3
 800132c:	f7ff f9a0 	bl	8000670 <HAL_InitTick>

  return HAL_OK;
 8001330:	2300      	movs	r3, #0
}
 8001332:	4618      	mov	r0, r3
 8001334:	3710      	adds	r7, #16
 8001336:	46bd      	mov	sp, r7
 8001338:	bd80      	pop	{r7, pc}
 800133a:	bf00      	nop
 800133c:	40023c00 	.word	0x40023c00
 8001340:	40023800 	.word	0x40023800
 8001344:	0800182c 	.word	0x0800182c
 8001348:	2000000c 	.word	0x2000000c
 800134c:	20000010 	.word	0x20000010

08001350 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001350:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001354:	b094      	sub	sp, #80	; 0x50
 8001356:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8001358:	2300      	movs	r3, #0
 800135a:	647b      	str	r3, [r7, #68]	; 0x44
 800135c:	2300      	movs	r3, #0
 800135e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001360:	2300      	movs	r3, #0
 8001362:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8001364:	2300      	movs	r3, #0
 8001366:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001368:	4b7c      	ldr	r3, [pc, #496]	; (800155c <HAL_RCC_GetSysClockFreq+0x20c>)
 800136a:	689b      	ldr	r3, [r3, #8]
 800136c:	f003 030c 	and.w	r3, r3, #12
 8001370:	2b08      	cmp	r3, #8
 8001372:	d00d      	beq.n	8001390 <HAL_RCC_GetSysClockFreq+0x40>
 8001374:	2b08      	cmp	r3, #8
 8001376:	f200 80e7 	bhi.w	8001548 <HAL_RCC_GetSysClockFreq+0x1f8>
 800137a:	2b00      	cmp	r3, #0
 800137c:	d002      	beq.n	8001384 <HAL_RCC_GetSysClockFreq+0x34>
 800137e:	2b04      	cmp	r3, #4
 8001380:	d003      	beq.n	800138a <HAL_RCC_GetSysClockFreq+0x3a>
 8001382:	e0e1      	b.n	8001548 <HAL_RCC_GetSysClockFreq+0x1f8>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001384:	4b76      	ldr	r3, [pc, #472]	; (8001560 <HAL_RCC_GetSysClockFreq+0x210>)
 8001386:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8001388:	e0e1      	b.n	800154e <HAL_RCC_GetSysClockFreq+0x1fe>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800138a:	4b76      	ldr	r3, [pc, #472]	; (8001564 <HAL_RCC_GetSysClockFreq+0x214>)
 800138c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800138e:	e0de      	b.n	800154e <HAL_RCC_GetSysClockFreq+0x1fe>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001390:	4b72      	ldr	r3, [pc, #456]	; (800155c <HAL_RCC_GetSysClockFreq+0x20c>)
 8001392:	685b      	ldr	r3, [r3, #4]
 8001394:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001398:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800139a:	4b70      	ldr	r3, [pc, #448]	; (800155c <HAL_RCC_GetSysClockFreq+0x20c>)
 800139c:	685b      	ldr	r3, [r3, #4]
 800139e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80013a2:	2b00      	cmp	r3, #0
 80013a4:	d065      	beq.n	8001472 <HAL_RCC_GetSysClockFreq+0x122>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80013a6:	4b6d      	ldr	r3, [pc, #436]	; (800155c <HAL_RCC_GetSysClockFreq+0x20c>)
 80013a8:	685b      	ldr	r3, [r3, #4]
 80013aa:	099b      	lsrs	r3, r3, #6
 80013ac:	2200      	movs	r2, #0
 80013ae:	63bb      	str	r3, [r7, #56]	; 0x38
 80013b0:	63fa      	str	r2, [r7, #60]	; 0x3c
 80013b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80013b4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80013b8:	633b      	str	r3, [r7, #48]	; 0x30
 80013ba:	2300      	movs	r3, #0
 80013bc:	637b      	str	r3, [r7, #52]	; 0x34
 80013be:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80013c2:	4622      	mov	r2, r4
 80013c4:	462b      	mov	r3, r5
 80013c6:	f04f 0000 	mov.w	r0, #0
 80013ca:	f04f 0100 	mov.w	r1, #0
 80013ce:	0159      	lsls	r1, r3, #5
 80013d0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80013d4:	0150      	lsls	r0, r2, #5
 80013d6:	4602      	mov	r2, r0
 80013d8:	460b      	mov	r3, r1
 80013da:	4621      	mov	r1, r4
 80013dc:	1a51      	subs	r1, r2, r1
 80013de:	6139      	str	r1, [r7, #16]
 80013e0:	4629      	mov	r1, r5
 80013e2:	eb63 0301 	sbc.w	r3, r3, r1
 80013e6:	617b      	str	r3, [r7, #20]
 80013e8:	f04f 0200 	mov.w	r2, #0
 80013ec:	f04f 0300 	mov.w	r3, #0
 80013f0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80013f4:	4659      	mov	r1, fp
 80013f6:	018b      	lsls	r3, r1, #6
 80013f8:	4651      	mov	r1, sl
 80013fa:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80013fe:	4651      	mov	r1, sl
 8001400:	018a      	lsls	r2, r1, #6
 8001402:	46d4      	mov	ip, sl
 8001404:	ebb2 080c 	subs.w	r8, r2, ip
 8001408:	4659      	mov	r1, fp
 800140a:	eb63 0901 	sbc.w	r9, r3, r1
 800140e:	f04f 0200 	mov.w	r2, #0
 8001412:	f04f 0300 	mov.w	r3, #0
 8001416:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800141a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800141e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001422:	4690      	mov	r8, r2
 8001424:	4699      	mov	r9, r3
 8001426:	4623      	mov	r3, r4
 8001428:	eb18 0303 	adds.w	r3, r8, r3
 800142c:	60bb      	str	r3, [r7, #8]
 800142e:	462b      	mov	r3, r5
 8001430:	eb49 0303 	adc.w	r3, r9, r3
 8001434:	60fb      	str	r3, [r7, #12]
 8001436:	f04f 0200 	mov.w	r2, #0
 800143a:	f04f 0300 	mov.w	r3, #0
 800143e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8001442:	4629      	mov	r1, r5
 8001444:	024b      	lsls	r3, r1, #9
 8001446:	4620      	mov	r0, r4
 8001448:	4629      	mov	r1, r5
 800144a:	4604      	mov	r4, r0
 800144c:	ea43 53d4 	orr.w	r3, r3, r4, lsr #23
 8001450:	4601      	mov	r1, r0
 8001452:	024a      	lsls	r2, r1, #9
 8001454:	4610      	mov	r0, r2
 8001456:	4619      	mov	r1, r3
 8001458:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800145a:	2200      	movs	r2, #0
 800145c:	62bb      	str	r3, [r7, #40]	; 0x28
 800145e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8001460:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8001464:	f7fe fec2 	bl	80001ec <__aeabi_uldivmod>
 8001468:	4602      	mov	r2, r0
 800146a:	460b      	mov	r3, r1
 800146c:	4613      	mov	r3, r2
 800146e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001470:	e05c      	b.n	800152c <HAL_RCC_GetSysClockFreq+0x1dc>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001472:	4b3a      	ldr	r3, [pc, #232]	; (800155c <HAL_RCC_GetSysClockFreq+0x20c>)
 8001474:	685b      	ldr	r3, [r3, #4]
 8001476:	099b      	lsrs	r3, r3, #6
 8001478:	2200      	movs	r2, #0
 800147a:	4618      	mov	r0, r3
 800147c:	4611      	mov	r1, r2
 800147e:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8001482:	623b      	str	r3, [r7, #32]
 8001484:	2300      	movs	r3, #0
 8001486:	627b      	str	r3, [r7, #36]	; 0x24
 8001488:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 800148c:	4642      	mov	r2, r8
 800148e:	464b      	mov	r3, r9
 8001490:	f04f 0000 	mov.w	r0, #0
 8001494:	f04f 0100 	mov.w	r1, #0
 8001498:	0159      	lsls	r1, r3, #5
 800149a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800149e:	0150      	lsls	r0, r2, #5
 80014a0:	4602      	mov	r2, r0
 80014a2:	460b      	mov	r3, r1
 80014a4:	46c4      	mov	ip, r8
 80014a6:	ebb2 0a0c 	subs.w	sl, r2, ip
 80014aa:	4640      	mov	r0, r8
 80014ac:	4649      	mov	r1, r9
 80014ae:	468c      	mov	ip, r1
 80014b0:	eb63 0b0c 	sbc.w	fp, r3, ip
 80014b4:	f04f 0200 	mov.w	r2, #0
 80014b8:	f04f 0300 	mov.w	r3, #0
 80014bc:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80014c0:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80014c4:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80014c8:	ebb2 040a 	subs.w	r4, r2, sl
 80014cc:	eb63 050b 	sbc.w	r5, r3, fp
 80014d0:	f04f 0200 	mov.w	r2, #0
 80014d4:	f04f 0300 	mov.w	r3, #0
 80014d8:	00eb      	lsls	r3, r5, #3
 80014da:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80014de:	00e2      	lsls	r2, r4, #3
 80014e0:	4614      	mov	r4, r2
 80014e2:	461d      	mov	r5, r3
 80014e4:	4603      	mov	r3, r0
 80014e6:	18e3      	adds	r3, r4, r3
 80014e8:	603b      	str	r3, [r7, #0]
 80014ea:	460b      	mov	r3, r1
 80014ec:	eb45 0303 	adc.w	r3, r5, r3
 80014f0:	607b      	str	r3, [r7, #4]
 80014f2:	f04f 0200 	mov.w	r2, #0
 80014f6:	f04f 0300 	mov.w	r3, #0
 80014fa:	e9d7 4500 	ldrd	r4, r5, [r7]
 80014fe:	4629      	mov	r1, r5
 8001500:	028b      	lsls	r3, r1, #10
 8001502:	4620      	mov	r0, r4
 8001504:	4629      	mov	r1, r5
 8001506:	4604      	mov	r4, r0
 8001508:	ea43 5394 	orr.w	r3, r3, r4, lsr #22
 800150c:	4601      	mov	r1, r0
 800150e:	028a      	lsls	r2, r1, #10
 8001510:	4610      	mov	r0, r2
 8001512:	4619      	mov	r1, r3
 8001514:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001516:	2200      	movs	r2, #0
 8001518:	61bb      	str	r3, [r7, #24]
 800151a:	61fa      	str	r2, [r7, #28]
 800151c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001520:	f7fe fe64 	bl	80001ec <__aeabi_uldivmod>
 8001524:	4602      	mov	r2, r0
 8001526:	460b      	mov	r3, r1
 8001528:	4613      	mov	r3, r2
 800152a:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800152c:	4b0b      	ldr	r3, [pc, #44]	; (800155c <HAL_RCC_GetSysClockFreq+0x20c>)
 800152e:	685b      	ldr	r3, [r3, #4]
 8001530:	0c1b      	lsrs	r3, r3, #16
 8001532:	f003 0303 	and.w	r3, r3, #3
 8001536:	3301      	adds	r3, #1
 8001538:	005b      	lsls	r3, r3, #1
 800153a:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 800153c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800153e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001540:	fbb2 f3f3 	udiv	r3, r2, r3
 8001544:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001546:	e002      	b.n	800154e <HAL_RCC_GetSysClockFreq+0x1fe>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001548:	4b05      	ldr	r3, [pc, #20]	; (8001560 <HAL_RCC_GetSysClockFreq+0x210>)
 800154a:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800154c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800154e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8001550:	4618      	mov	r0, r3
 8001552:	3750      	adds	r7, #80	; 0x50
 8001554:	46bd      	mov	sp, r7
 8001556:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800155a:	bf00      	nop
 800155c:	40023800 	.word	0x40023800
 8001560:	00f42400 	.word	0x00f42400
 8001564:	007a1200 	.word	0x007a1200

08001568 <delayInit>:
 * Function that initiates a delay.
 * @param delay Pointer to a defined delay struct.
 * @param duration in milliseconds.
 * @note if duration is 0 or a negative number, it defaults to DEFAULT_DELAY.
*/
void delayInit(delay_t *delay, tick_t duration){
 8001568:	b480      	push	{r7}
 800156a:	b083      	sub	sp, #12
 800156c:	af00      	add	r7, sp, #0
 800156e:	6078      	str	r0, [r7, #4]
 8001570:	6039      	str	r1, [r7, #0]
    if (duration <= 0){
 8001572:	683b      	ldr	r3, [r7, #0]
 8001574:	2b00      	cmp	r3, #0
 8001576:	d101      	bne.n	800157c <delayInit+0x14>
        duration = DEFAULT_DELAY;
 8001578:	2364      	movs	r3, #100	; 0x64
 800157a:	603b      	str	r3, [r7, #0]
    }
    delay->duration = duration;
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	683a      	ldr	r2, [r7, #0]
 8001580:	605a      	str	r2, [r3, #4]
    delay->running = false;
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	2200      	movs	r2, #0
 8001586:	721a      	strb	r2, [r3, #8]
    delay->startTime = 0;
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	2200      	movs	r2, #0
 800158c:	601a      	str	r2, [r3, #0]

}
 800158e:	bf00      	nop
 8001590:	370c      	adds	r7, #12
 8001592:	46bd      	mov	sp, r7
 8001594:	bc80      	pop	{r7}
 8001596:	4770      	bx	lr

08001598 <delayRead>:
 * @brief Checks if an specific delay has elapsed.
 * Function that checks the current status of a delay and updates its values.
 * @param delay Pointer to a defined delay struct.
 * @retval bool indicating running state.
*/
bool_t delayRead(delay_t *delay){
 8001598:	b580      	push	{r7, lr}
 800159a:	b084      	sub	sp, #16
 800159c:	af00      	add	r7, sp, #0
 800159e:	6078      	str	r0, [r7, #4]

    tick_t currentTime = HAL_GetTick();
 80015a0:	f7ff f8a8 	bl	80006f4 <HAL_GetTick>
 80015a4:	60f8      	str	r0, [r7, #12]
    bool isRunning = delay->running;
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	7a1b      	ldrb	r3, [r3, #8]
 80015aa:	72fb      	strb	r3, [r7, #11]

    if (isRunning && (currentTime - delay->startTime >= delay->duration)){
 80015ac:	7afb      	ldrb	r3, [r7, #11]
 80015ae:	2b00      	cmp	r3, #0
 80015b0:	d00c      	beq.n	80015cc <delayRead+0x34>
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	681b      	ldr	r3, [r3, #0]
 80015b6:	68fa      	ldr	r2, [r7, #12]
 80015b8:	1ad2      	subs	r2, r2, r3
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	685b      	ldr	r3, [r3, #4]
 80015be:	429a      	cmp	r2, r3
 80015c0:	d304      	bcc.n	80015cc <delayRead+0x34>
        delay->running = false;
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	2200      	movs	r2, #0
 80015c6:	721a      	strb	r2, [r3, #8]
        return true;
 80015c8:	2301      	movs	r3, #1
 80015ca:	e00d      	b.n	80015e8 <delayRead+0x50>
    }

	if (!isRunning) {
 80015cc:	7afb      	ldrb	r3, [r7, #11]
 80015ce:	f083 0301 	eor.w	r3, r3, #1
 80015d2:	b2db      	uxtb	r3, r3
 80015d4:	2b00      	cmp	r3, #0
 80015d6:	d007      	beq.n	80015e8 <delayRead+0x50>
		  delay->running = true;
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	2201      	movs	r2, #1
 80015dc:	721a      	strb	r2, [r3, #8]
		  delay->startTime = currentTime;
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	68fa      	ldr	r2, [r7, #12]
 80015e2:	601a      	str	r2, [r3, #0]
		  return false;
 80015e4:	2300      	movs	r3, #0
 80015e6:	e7ff      	b.n	80015e8 <delayRead+0x50>
	  }
}
 80015e8:	4618      	mov	r0, r3
 80015ea:	3710      	adds	r7, #16
 80015ec:	46bd      	mov	sp, r7
 80015ee:	bd80      	pop	{r7, pc}

080015f0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80015f0:	b580      	push	{r7, lr}
 80015f2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80015f4:	f7ff f820 	bl	8000638 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80015f8:	f000 f81a 	bl	8001630 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80015fc:	f000 f876 	bl	80016ec <MX_GPIO_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  BSP_LED_Init(GPIO_PIN_12);
 8001600:	2000      	movs	r0, #0
 8001602:	f7fe ff71 	bl	80004e8 <BSP_LED_Init>
  delayInit(&delay_a, 1000);
 8001606:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800160a:	4807      	ldr	r0, [pc, #28]	; (8001628 <main+0x38>)
 800160c:	f7ff ffac 	bl	8001568 <delayInit>

  while (1)
  {

	  if (delayRead(&delay_a)){
 8001610:	4805      	ldr	r0, [pc, #20]	; (8001628 <main+0x38>)
 8001612:	f7ff ffc1 	bl	8001598 <delayRead>
 8001616:	4603      	mov	r3, r0
 8001618:	2b00      	cmp	r3, #0
 800161a:	d0f9      	beq.n	8001610 <main+0x20>
		  HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_12);
 800161c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001620:	4802      	ldr	r0, [pc, #8]	; (800162c <main+0x3c>)
 8001622:	f7ff fb17 	bl	8000c54 <HAL_GPIO_TogglePin>
	  if (delayRead(&delay_a)){
 8001626:	e7f3      	b.n	8001610 <main+0x20>
 8001628:	20000038 	.word	0x20000038
 800162c:	40020c00 	.word	0x40020c00

08001630 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001630:	b580      	push	{r7, lr}
 8001632:	b094      	sub	sp, #80	; 0x50
 8001634:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001636:	f107 0320 	add.w	r3, r7, #32
 800163a:	2230      	movs	r2, #48	; 0x30
 800163c:	2100      	movs	r1, #0
 800163e:	4618      	mov	r0, r3
 8001640:	f000 f8b7 	bl	80017b2 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001644:	f107 030c 	add.w	r3, r7, #12
 8001648:	2200      	movs	r2, #0
 800164a:	601a      	str	r2, [r3, #0]
 800164c:	605a      	str	r2, [r3, #4]
 800164e:	609a      	str	r2, [r3, #8]
 8001650:	60da      	str	r2, [r3, #12]
 8001652:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001654:	2300      	movs	r3, #0
 8001656:	60bb      	str	r3, [r7, #8]
 8001658:	4b22      	ldr	r3, [pc, #136]	; (80016e4 <SystemClock_Config+0xb4>)
 800165a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800165c:	4a21      	ldr	r2, [pc, #132]	; (80016e4 <SystemClock_Config+0xb4>)
 800165e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001662:	6413      	str	r3, [r2, #64]	; 0x40
 8001664:	4b1f      	ldr	r3, [pc, #124]	; (80016e4 <SystemClock_Config+0xb4>)
 8001666:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001668:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800166c:	60bb      	str	r3, [r7, #8]
 800166e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001670:	2300      	movs	r3, #0
 8001672:	607b      	str	r3, [r7, #4]
 8001674:	4b1c      	ldr	r3, [pc, #112]	; (80016e8 <SystemClock_Config+0xb8>)
 8001676:	681b      	ldr	r3, [r3, #0]
 8001678:	4a1b      	ldr	r2, [pc, #108]	; (80016e8 <SystemClock_Config+0xb8>)
 800167a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800167e:	6013      	str	r3, [r2, #0]
 8001680:	4b19      	ldr	r3, [pc, #100]	; (80016e8 <SystemClock_Config+0xb8>)
 8001682:	681b      	ldr	r3, [r3, #0]
 8001684:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001688:	607b      	str	r3, [r7, #4]
 800168a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800168c:	2302      	movs	r3, #2
 800168e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001690:	2301      	movs	r3, #1
 8001692:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001694:	2310      	movs	r3, #16
 8001696:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001698:	2300      	movs	r3, #0
 800169a:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800169c:	f107 0320 	add.w	r3, r7, #32
 80016a0:	4618      	mov	r0, r3
 80016a2:	f7ff faf7 	bl	8000c94 <HAL_RCC_OscConfig>
 80016a6:	4603      	mov	r3, r0
 80016a8:	2b00      	cmp	r3, #0
 80016aa:	d001      	beq.n	80016b0 <SystemClock_Config+0x80>
  {
    Error_Handler();
 80016ac:	f000 f852 	bl	8001754 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80016b0:	230f      	movs	r3, #15
 80016b2:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80016b4:	2300      	movs	r3, #0
 80016b6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80016b8:	2300      	movs	r3, #0
 80016ba:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80016bc:	2300      	movs	r3, #0
 80016be:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80016c0:	2300      	movs	r3, #0
 80016c2:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80016c4:	f107 030c 	add.w	r3, r7, #12
 80016c8:	2100      	movs	r1, #0
 80016ca:	4618      	mov	r0, r3
 80016cc:	f7ff fd5a 	bl	8001184 <HAL_RCC_ClockConfig>
 80016d0:	4603      	mov	r3, r0
 80016d2:	2b00      	cmp	r3, #0
 80016d4:	d001      	beq.n	80016da <SystemClock_Config+0xaa>
  {
    Error_Handler();
 80016d6:	f000 f83d 	bl	8001754 <Error_Handler>
  }
}
 80016da:	bf00      	nop
 80016dc:	3750      	adds	r7, #80	; 0x50
 80016de:	46bd      	mov	sp, r7
 80016e0:	bd80      	pop	{r7, pc}
 80016e2:	bf00      	nop
 80016e4:	40023800 	.word	0x40023800
 80016e8:	40007000 	.word	0x40007000

080016ec <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80016ec:	b580      	push	{r7, lr}
 80016ee:	b086      	sub	sp, #24
 80016f0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016f2:	1d3b      	adds	r3, r7, #4
 80016f4:	2200      	movs	r2, #0
 80016f6:	601a      	str	r2, [r3, #0]
 80016f8:	605a      	str	r2, [r3, #4]
 80016fa:	609a      	str	r2, [r3, #8]
 80016fc:	60da      	str	r2, [r3, #12]
 80016fe:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001700:	2300      	movs	r3, #0
 8001702:	603b      	str	r3, [r7, #0]
 8001704:	4b11      	ldr	r3, [pc, #68]	; (800174c <MX_GPIO_Init+0x60>)
 8001706:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001708:	4a10      	ldr	r2, [pc, #64]	; (800174c <MX_GPIO_Init+0x60>)
 800170a:	f043 0308 	orr.w	r3, r3, #8
 800170e:	6313      	str	r3, [r2, #48]	; 0x30
 8001710:	4b0e      	ldr	r3, [pc, #56]	; (800174c <MX_GPIO_Init+0x60>)
 8001712:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001714:	f003 0308 	and.w	r3, r3, #8
 8001718:	603b      	str	r3, [r7, #0]
 800171a:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);
 800171c:	2200      	movs	r2, #0
 800171e:	f44f 4170 	mov.w	r1, #61440	; 0xf000
 8001722:	480b      	ldr	r0, [pc, #44]	; (8001750 <MX_GPIO_Init+0x64>)
 8001724:	f7ff fa7e 	bl	8000c24 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PD12 PD13 PD14 PD15 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8001728:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 800172c:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800172e:	2301      	movs	r3, #1
 8001730:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001732:	2300      	movs	r3, #0
 8001734:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001736:	2300      	movs	r3, #0
 8001738:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800173a:	1d3b      	adds	r3, r7, #4
 800173c:	4619      	mov	r1, r3
 800173e:	4804      	ldr	r0, [pc, #16]	; (8001750 <MX_GPIO_Init+0x64>)
 8001740:	f7ff f8c6 	bl	80008d0 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001744:	bf00      	nop
 8001746:	3718      	adds	r7, #24
 8001748:	46bd      	mov	sp, r7
 800174a:	bd80      	pop	{r7, pc}
 800174c:	40023800 	.word	0x40023800
 8001750:	40020c00 	.word	0x40020c00

08001754 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001754:	b480      	push	{r7}
 8001756:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001758:	b672      	cpsid	i
}
 800175a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800175c:	e7fe      	b.n	800175c <Error_Handler+0x8>
	...

08001760 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8001760:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001798 <LoopFillZerobss+0x14>
 
/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8001764:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8001766:	e003      	b.n	8001770 <LoopCopyDataInit>

08001768 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8001768:	4b0c      	ldr	r3, [pc, #48]	; (800179c <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 800176a:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 800176c:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800176e:	3104      	adds	r1, #4

08001770 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8001770:	480b      	ldr	r0, [pc, #44]	; (80017a0 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8001772:	4b0c      	ldr	r3, [pc, #48]	; (80017a4 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8001774:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8001776:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8001778:	d3f6      	bcc.n	8001768 <CopyDataInit>
  ldr  r2, =_sbss
 800177a:	4a0b      	ldr	r2, [pc, #44]	; (80017a8 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 800177c:	e002      	b.n	8001784 <LoopFillZerobss>

0800177e <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 800177e:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8001780:	f842 3b04 	str.w	r3, [r2], #4

08001784 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8001784:	4b09      	ldr	r3, [pc, #36]	; (80017ac <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8001786:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8001788:	d3f9      	bcc.n	800177e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800178a:	f7fe fefd 	bl	8000588 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800178e:	f000 f819 	bl	80017c4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001792:	f7ff ff2d 	bl	80015f0 <main>
  bx  lr    
 8001796:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8001798:	20030000 	.word	0x20030000
  ldr  r3, =_sidata
 800179c:	0800184c 	.word	0x0800184c
  ldr  r0, =_sdata
 80017a0:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 80017a4:	20000018 	.word	0x20000018
  ldr  r2, =_sbss
 80017a8:	20000018 	.word	0x20000018
  ldr  r3, = _ebss
 80017ac:	20000044 	.word	0x20000044

080017b0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80017b0:	e7fe      	b.n	80017b0 <ADC_IRQHandler>

080017b2 <memset>:
 80017b2:	4402      	add	r2, r0
 80017b4:	4603      	mov	r3, r0
 80017b6:	4293      	cmp	r3, r2
 80017b8:	d100      	bne.n	80017bc <memset+0xa>
 80017ba:	4770      	bx	lr
 80017bc:	f803 1b01 	strb.w	r1, [r3], #1
 80017c0:	e7f9      	b.n	80017b6 <memset+0x4>
	...

080017c4 <__libc_init_array>:
 80017c4:	b570      	push	{r4, r5, r6, lr}
 80017c6:	4d0d      	ldr	r5, [pc, #52]	; (80017fc <__libc_init_array+0x38>)
 80017c8:	4c0d      	ldr	r4, [pc, #52]	; (8001800 <__libc_init_array+0x3c>)
 80017ca:	1b64      	subs	r4, r4, r5
 80017cc:	10a4      	asrs	r4, r4, #2
 80017ce:	2600      	movs	r6, #0
 80017d0:	42a6      	cmp	r6, r4
 80017d2:	d109      	bne.n	80017e8 <__libc_init_array+0x24>
 80017d4:	4d0b      	ldr	r5, [pc, #44]	; (8001804 <__libc_init_array+0x40>)
 80017d6:	4c0c      	ldr	r4, [pc, #48]	; (8001808 <__libc_init_array+0x44>)
 80017d8:	f000 f818 	bl	800180c <_init>
 80017dc:	1b64      	subs	r4, r4, r5
 80017de:	10a4      	asrs	r4, r4, #2
 80017e0:	2600      	movs	r6, #0
 80017e2:	42a6      	cmp	r6, r4
 80017e4:	d105      	bne.n	80017f2 <__libc_init_array+0x2e>
 80017e6:	bd70      	pop	{r4, r5, r6, pc}
 80017e8:	f855 3b04 	ldr.w	r3, [r5], #4
 80017ec:	4798      	blx	r3
 80017ee:	3601      	adds	r6, #1
 80017f0:	e7ee      	b.n	80017d0 <__libc_init_array+0xc>
 80017f2:	f855 3b04 	ldr.w	r3, [r5], #4
 80017f6:	4798      	blx	r3
 80017f8:	3601      	adds	r6, #1
 80017fa:	e7f2      	b.n	80017e2 <__libc_init_array+0x1e>
 80017fc:	08001844 	.word	0x08001844
 8001800:	08001844 	.word	0x08001844
 8001804:	08001844 	.word	0x08001844
 8001808:	08001848 	.word	0x08001848

0800180c <_init>:
 800180c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800180e:	bf00      	nop
 8001810:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001812:	bc08      	pop	{r3}
 8001814:	469e      	mov	lr, r3
 8001816:	4770      	bx	lr

08001818 <_fini>:
 8001818:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800181a:	bf00      	nop
 800181c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800181e:	bc08      	pop	{r3}
 8001820:	469e      	mov	lr, r3
 8001822:	4770      	bx	lr
