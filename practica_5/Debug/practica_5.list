
practica_5.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000028e8  080001ac  080001ac  000101ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000038  08002a94  08002a94  00012a94  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002acc  08002acc  00020050  2**0
                  CONTENTS
  4 .ARM          00000008  08002acc  08002acc  00012acc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08002ad4  08002ad4  00020050  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002ad4  08002ad4  00012ad4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002ad8  08002ad8  00012ad8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000050  20000000  08002adc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020050  2**0
                  CONTENTS
 10 .bss          00000078  20000050  20000050  00020050  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  200000c8  200000c8  00020050  2**0
                  ALLOC
 12 .ARM.attributes 0000002a  00000000  00000000  00020050  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  0002007a  2**0
                  CONTENTS, READONLY
 14 .debug_info   00008645  00000000  00000000  000200bd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00001991  00000000  00000000  00028702  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00000768  00000000  00000000  0002a098  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00000590  00000000  00000000  0002a800  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  00025220  00000000  00000000  0002ad90  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   0000b97f  00000000  00000000  0004ffb0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000e16c1  00000000  00000000  0005b92f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00001c88  00000000  00000000  0013cff0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000005b  00000000  00000000  0013ec78  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001ac <__do_global_dtors_aux>:
 80001ac:	b510      	push	{r4, lr}
 80001ae:	4c05      	ldr	r4, [pc, #20]	; (80001c4 <__do_global_dtors_aux+0x18>)
 80001b0:	7823      	ldrb	r3, [r4, #0]
 80001b2:	b933      	cbnz	r3, 80001c2 <__do_global_dtors_aux+0x16>
 80001b4:	4b04      	ldr	r3, [pc, #16]	; (80001c8 <__do_global_dtors_aux+0x1c>)
 80001b6:	b113      	cbz	r3, 80001be <__do_global_dtors_aux+0x12>
 80001b8:	4804      	ldr	r0, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x20>)
 80001ba:	f3af 8000 	nop.w
 80001be:	2301      	movs	r3, #1
 80001c0:	7023      	strb	r3, [r4, #0]
 80001c2:	bd10      	pop	{r4, pc}
 80001c4:	20000050 	.word	0x20000050
 80001c8:	00000000 	.word	0x00000000
 80001cc:	08002a7c 	.word	0x08002a7c

080001d0 <frame_dummy>:
 80001d0:	b508      	push	{r3, lr}
 80001d2:	4b03      	ldr	r3, [pc, #12]	; (80001e0 <frame_dummy+0x10>)
 80001d4:	b11b      	cbz	r3, 80001de <frame_dummy+0xe>
 80001d6:	4903      	ldr	r1, [pc, #12]	; (80001e4 <frame_dummy+0x14>)
 80001d8:	4803      	ldr	r0, [pc, #12]	; (80001e8 <frame_dummy+0x18>)
 80001da:	f3af 8000 	nop.w
 80001de:	bd08      	pop	{r3, pc}
 80001e0:	00000000 	.word	0x00000000
 80001e4:	20000054 	.word	0x20000054
 80001e8:	08002a7c 	.word	0x08002a7c

080001ec <strlen>:
 80001ec:	4603      	mov	r3, r0
 80001ee:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001f2:	2a00      	cmp	r2, #0
 80001f4:	d1fb      	bne.n	80001ee <strlen+0x2>
 80001f6:	1a18      	subs	r0, r3, r0
 80001f8:	3801      	subs	r0, #1
 80001fa:	4770      	bx	lr

080001fc <__aeabi_fmul>:
 80001fc:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000200:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000204:	bf1e      	ittt	ne
 8000206:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 800020a:	ea92 0f0c 	teqne	r2, ip
 800020e:	ea93 0f0c 	teqne	r3, ip
 8000212:	d06f      	beq.n	80002f4 <__aeabi_fmul+0xf8>
 8000214:	441a      	add	r2, r3
 8000216:	ea80 0c01 	eor.w	ip, r0, r1
 800021a:	0240      	lsls	r0, r0, #9
 800021c:	bf18      	it	ne
 800021e:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000222:	d01e      	beq.n	8000262 <__aeabi_fmul+0x66>
 8000224:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000228:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 800022c:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000230:	fba0 3101 	umull	r3, r1, r0, r1
 8000234:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000238:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 800023c:	bf3e      	ittt	cc
 800023e:	0049      	lslcc	r1, r1, #1
 8000240:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000244:	005b      	lslcc	r3, r3, #1
 8000246:	ea40 0001 	orr.w	r0, r0, r1
 800024a:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 800024e:	2afd      	cmp	r2, #253	; 0xfd
 8000250:	d81d      	bhi.n	800028e <__aeabi_fmul+0x92>
 8000252:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000256:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 800025a:	bf08      	it	eq
 800025c:	f020 0001 	biceq.w	r0, r0, #1
 8000260:	4770      	bx	lr
 8000262:	f090 0f00 	teq	r0, #0
 8000266:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 800026a:	bf08      	it	eq
 800026c:	0249      	lsleq	r1, r1, #9
 800026e:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000272:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000276:	3a7f      	subs	r2, #127	; 0x7f
 8000278:	bfc2      	ittt	gt
 800027a:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 800027e:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000282:	4770      	bxgt	lr
 8000284:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000288:	f04f 0300 	mov.w	r3, #0
 800028c:	3a01      	subs	r2, #1
 800028e:	dc5d      	bgt.n	800034c <__aeabi_fmul+0x150>
 8000290:	f112 0f19 	cmn.w	r2, #25
 8000294:	bfdc      	itt	le
 8000296:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 800029a:	4770      	bxle	lr
 800029c:	f1c2 0200 	rsb	r2, r2, #0
 80002a0:	0041      	lsls	r1, r0, #1
 80002a2:	fa21 f102 	lsr.w	r1, r1, r2
 80002a6:	f1c2 0220 	rsb	r2, r2, #32
 80002aa:	fa00 fc02 	lsl.w	ip, r0, r2
 80002ae:	ea5f 0031 	movs.w	r0, r1, rrx
 80002b2:	f140 0000 	adc.w	r0, r0, #0
 80002b6:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 80002ba:	bf08      	it	eq
 80002bc:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 80002c0:	4770      	bx	lr
 80002c2:	f092 0f00 	teq	r2, #0
 80002c6:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 80002ca:	bf02      	ittt	eq
 80002cc:	0040      	lsleq	r0, r0, #1
 80002ce:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 80002d2:	3a01      	subeq	r2, #1
 80002d4:	d0f9      	beq.n	80002ca <__aeabi_fmul+0xce>
 80002d6:	ea40 000c 	orr.w	r0, r0, ip
 80002da:	f093 0f00 	teq	r3, #0
 80002de:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 80002e2:	bf02      	ittt	eq
 80002e4:	0049      	lsleq	r1, r1, #1
 80002e6:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 80002ea:	3b01      	subeq	r3, #1
 80002ec:	d0f9      	beq.n	80002e2 <__aeabi_fmul+0xe6>
 80002ee:	ea41 010c 	orr.w	r1, r1, ip
 80002f2:	e78f      	b.n	8000214 <__aeabi_fmul+0x18>
 80002f4:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 80002f8:	ea92 0f0c 	teq	r2, ip
 80002fc:	bf18      	it	ne
 80002fe:	ea93 0f0c 	teqne	r3, ip
 8000302:	d00a      	beq.n	800031a <__aeabi_fmul+0x11e>
 8000304:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000308:	bf18      	it	ne
 800030a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 800030e:	d1d8      	bne.n	80002c2 <__aeabi_fmul+0xc6>
 8000310:	ea80 0001 	eor.w	r0, r0, r1
 8000314:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000318:	4770      	bx	lr
 800031a:	f090 0f00 	teq	r0, #0
 800031e:	bf17      	itett	ne
 8000320:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000324:	4608      	moveq	r0, r1
 8000326:	f091 0f00 	teqne	r1, #0
 800032a:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 800032e:	d014      	beq.n	800035a <__aeabi_fmul+0x15e>
 8000330:	ea92 0f0c 	teq	r2, ip
 8000334:	d101      	bne.n	800033a <__aeabi_fmul+0x13e>
 8000336:	0242      	lsls	r2, r0, #9
 8000338:	d10f      	bne.n	800035a <__aeabi_fmul+0x15e>
 800033a:	ea93 0f0c 	teq	r3, ip
 800033e:	d103      	bne.n	8000348 <__aeabi_fmul+0x14c>
 8000340:	024b      	lsls	r3, r1, #9
 8000342:	bf18      	it	ne
 8000344:	4608      	movne	r0, r1
 8000346:	d108      	bne.n	800035a <__aeabi_fmul+0x15e>
 8000348:	ea80 0001 	eor.w	r0, r0, r1
 800034c:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000350:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000354:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000358:	4770      	bx	lr
 800035a:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 800035e:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000362:	4770      	bx	lr

08000364 <__aeabi_frsub>:
 8000364:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000368:	e002      	b.n	8000370 <__addsf3>
 800036a:	bf00      	nop

0800036c <__aeabi_fsub>:
 800036c:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000370 <__addsf3>:
 8000370:	0042      	lsls	r2, r0, #1
 8000372:	bf1f      	itttt	ne
 8000374:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000378:	ea92 0f03 	teqne	r2, r3
 800037c:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000380:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000384:	d06a      	beq.n	800045c <__addsf3+0xec>
 8000386:	ea4f 6212 	mov.w	r2, r2, lsr #24
 800038a:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 800038e:	bfc1      	itttt	gt
 8000390:	18d2      	addgt	r2, r2, r3
 8000392:	4041      	eorgt	r1, r0
 8000394:	4048      	eorgt	r0, r1
 8000396:	4041      	eorgt	r1, r0
 8000398:	bfb8      	it	lt
 800039a:	425b      	neglt	r3, r3
 800039c:	2b19      	cmp	r3, #25
 800039e:	bf88      	it	hi
 80003a0:	4770      	bxhi	lr
 80003a2:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 80003a6:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80003aa:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 80003ae:	bf18      	it	ne
 80003b0:	4240      	negne	r0, r0
 80003b2:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80003b6:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 80003ba:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 80003be:	bf18      	it	ne
 80003c0:	4249      	negne	r1, r1
 80003c2:	ea92 0f03 	teq	r2, r3
 80003c6:	d03f      	beq.n	8000448 <__addsf3+0xd8>
 80003c8:	f1a2 0201 	sub.w	r2, r2, #1
 80003cc:	fa41 fc03 	asr.w	ip, r1, r3
 80003d0:	eb10 000c 	adds.w	r0, r0, ip
 80003d4:	f1c3 0320 	rsb	r3, r3, #32
 80003d8:	fa01 f103 	lsl.w	r1, r1, r3
 80003dc:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 80003e0:	d502      	bpl.n	80003e8 <__addsf3+0x78>
 80003e2:	4249      	negs	r1, r1
 80003e4:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 80003e8:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 80003ec:	d313      	bcc.n	8000416 <__addsf3+0xa6>
 80003ee:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 80003f2:	d306      	bcc.n	8000402 <__addsf3+0x92>
 80003f4:	0840      	lsrs	r0, r0, #1
 80003f6:	ea4f 0131 	mov.w	r1, r1, rrx
 80003fa:	f102 0201 	add.w	r2, r2, #1
 80003fe:	2afe      	cmp	r2, #254	; 0xfe
 8000400:	d251      	bcs.n	80004a6 <__addsf3+0x136>
 8000402:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000406:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 800040a:	bf08      	it	eq
 800040c:	f020 0001 	biceq.w	r0, r0, #1
 8000410:	ea40 0003 	orr.w	r0, r0, r3
 8000414:	4770      	bx	lr
 8000416:	0049      	lsls	r1, r1, #1
 8000418:	eb40 0000 	adc.w	r0, r0, r0
 800041c:	3a01      	subs	r2, #1
 800041e:	bf28      	it	cs
 8000420:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000424:	d2ed      	bcs.n	8000402 <__addsf3+0x92>
 8000426:	fab0 fc80 	clz	ip, r0
 800042a:	f1ac 0c08 	sub.w	ip, ip, #8
 800042e:	ebb2 020c 	subs.w	r2, r2, ip
 8000432:	fa00 f00c 	lsl.w	r0, r0, ip
 8000436:	bfaa      	itet	ge
 8000438:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 800043c:	4252      	neglt	r2, r2
 800043e:	4318      	orrge	r0, r3
 8000440:	bfbc      	itt	lt
 8000442:	40d0      	lsrlt	r0, r2
 8000444:	4318      	orrlt	r0, r3
 8000446:	4770      	bx	lr
 8000448:	f092 0f00 	teq	r2, #0
 800044c:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000450:	bf06      	itte	eq
 8000452:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000456:	3201      	addeq	r2, #1
 8000458:	3b01      	subne	r3, #1
 800045a:	e7b5      	b.n	80003c8 <__addsf3+0x58>
 800045c:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000460:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000464:	bf18      	it	ne
 8000466:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 800046a:	d021      	beq.n	80004b0 <__addsf3+0x140>
 800046c:	ea92 0f03 	teq	r2, r3
 8000470:	d004      	beq.n	800047c <__addsf3+0x10c>
 8000472:	f092 0f00 	teq	r2, #0
 8000476:	bf08      	it	eq
 8000478:	4608      	moveq	r0, r1
 800047a:	4770      	bx	lr
 800047c:	ea90 0f01 	teq	r0, r1
 8000480:	bf1c      	itt	ne
 8000482:	2000      	movne	r0, #0
 8000484:	4770      	bxne	lr
 8000486:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 800048a:	d104      	bne.n	8000496 <__addsf3+0x126>
 800048c:	0040      	lsls	r0, r0, #1
 800048e:	bf28      	it	cs
 8000490:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000494:	4770      	bx	lr
 8000496:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 800049a:	bf3c      	itt	cc
 800049c:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 80004a0:	4770      	bxcc	lr
 80004a2:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 80004a6:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 80004aa:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80004ae:	4770      	bx	lr
 80004b0:	ea7f 6222 	mvns.w	r2, r2, asr #24
 80004b4:	bf16      	itet	ne
 80004b6:	4608      	movne	r0, r1
 80004b8:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 80004bc:	4601      	movne	r1, r0
 80004be:	0242      	lsls	r2, r0, #9
 80004c0:	bf06      	itte	eq
 80004c2:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 80004c6:	ea90 0f01 	teqeq	r0, r1
 80004ca:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 80004ce:	4770      	bx	lr

080004d0 <__aeabi_ui2f>:
 80004d0:	f04f 0300 	mov.w	r3, #0
 80004d4:	e004      	b.n	80004e0 <__aeabi_i2f+0x8>
 80004d6:	bf00      	nop

080004d8 <__aeabi_i2f>:
 80004d8:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 80004dc:	bf48      	it	mi
 80004de:	4240      	negmi	r0, r0
 80004e0:	ea5f 0c00 	movs.w	ip, r0
 80004e4:	bf08      	it	eq
 80004e6:	4770      	bxeq	lr
 80004e8:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 80004ec:	4601      	mov	r1, r0
 80004ee:	f04f 0000 	mov.w	r0, #0
 80004f2:	e01c      	b.n	800052e <__aeabi_l2f+0x2a>

080004f4 <__aeabi_ul2f>:
 80004f4:	ea50 0201 	orrs.w	r2, r0, r1
 80004f8:	bf08      	it	eq
 80004fa:	4770      	bxeq	lr
 80004fc:	f04f 0300 	mov.w	r3, #0
 8000500:	e00a      	b.n	8000518 <__aeabi_l2f+0x14>
 8000502:	bf00      	nop

08000504 <__aeabi_l2f>:
 8000504:	ea50 0201 	orrs.w	r2, r0, r1
 8000508:	bf08      	it	eq
 800050a:	4770      	bxeq	lr
 800050c:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000510:	d502      	bpl.n	8000518 <__aeabi_l2f+0x14>
 8000512:	4240      	negs	r0, r0
 8000514:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000518:	ea5f 0c01 	movs.w	ip, r1
 800051c:	bf02      	ittt	eq
 800051e:	4684      	moveq	ip, r0
 8000520:	4601      	moveq	r1, r0
 8000522:	2000      	moveq	r0, #0
 8000524:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000528:	bf08      	it	eq
 800052a:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 800052e:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000532:	fabc f28c 	clz	r2, ip
 8000536:	3a08      	subs	r2, #8
 8000538:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 800053c:	db10      	blt.n	8000560 <__aeabi_l2f+0x5c>
 800053e:	fa01 fc02 	lsl.w	ip, r1, r2
 8000542:	4463      	add	r3, ip
 8000544:	fa00 fc02 	lsl.w	ip, r0, r2
 8000548:	f1c2 0220 	rsb	r2, r2, #32
 800054c:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000550:	fa20 f202 	lsr.w	r2, r0, r2
 8000554:	eb43 0002 	adc.w	r0, r3, r2
 8000558:	bf08      	it	eq
 800055a:	f020 0001 	biceq.w	r0, r0, #1
 800055e:	4770      	bx	lr
 8000560:	f102 0220 	add.w	r2, r2, #32
 8000564:	fa01 fc02 	lsl.w	ip, r1, r2
 8000568:	f1c2 0220 	rsb	r2, r2, #32
 800056c:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000570:	fa21 f202 	lsr.w	r2, r1, r2
 8000574:	eb43 0002 	adc.w	r0, r3, r2
 8000578:	bf08      	it	eq
 800057a:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 800057e:	4770      	bx	lr

08000580 <__aeabi_f2uiz>:
 8000580:	0042      	lsls	r2, r0, #1
 8000582:	d20e      	bcs.n	80005a2 <__aeabi_f2uiz+0x22>
 8000584:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8000588:	d30b      	bcc.n	80005a2 <__aeabi_f2uiz+0x22>
 800058a:	f04f 039e 	mov.w	r3, #158	; 0x9e
 800058e:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000592:	d409      	bmi.n	80005a8 <__aeabi_f2uiz+0x28>
 8000594:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000598:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800059c:	fa23 f002 	lsr.w	r0, r3, r2
 80005a0:	4770      	bx	lr
 80005a2:	f04f 0000 	mov.w	r0, #0
 80005a6:	4770      	bx	lr
 80005a8:	f112 0f61 	cmn.w	r2, #97	; 0x61
 80005ac:	d101      	bne.n	80005b2 <__aeabi_f2uiz+0x32>
 80005ae:	0242      	lsls	r2, r0, #9
 80005b0:	d102      	bne.n	80005b8 <__aeabi_f2uiz+0x38>
 80005b2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80005b6:	4770      	bx	lr
 80005b8:	f04f 0000 	mov.w	r0, #0
 80005bc:	4770      	bx	lr
 80005be:	bf00      	nop

080005c0 <__aeabi_uldivmod>:
 80005c0:	b953      	cbnz	r3, 80005d8 <__aeabi_uldivmod+0x18>
 80005c2:	b94a      	cbnz	r2, 80005d8 <__aeabi_uldivmod+0x18>
 80005c4:	2900      	cmp	r1, #0
 80005c6:	bf08      	it	eq
 80005c8:	2800      	cmpeq	r0, #0
 80005ca:	bf1c      	itt	ne
 80005cc:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80005d0:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80005d4:	f000 b970 	b.w	80008b8 <__aeabi_idiv0>
 80005d8:	f1ad 0c08 	sub.w	ip, sp, #8
 80005dc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80005e0:	f000 f806 	bl	80005f0 <__udivmoddi4>
 80005e4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80005e8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80005ec:	b004      	add	sp, #16
 80005ee:	4770      	bx	lr

080005f0 <__udivmoddi4>:
 80005f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80005f4:	9e08      	ldr	r6, [sp, #32]
 80005f6:	460d      	mov	r5, r1
 80005f8:	4604      	mov	r4, r0
 80005fa:	460f      	mov	r7, r1
 80005fc:	2b00      	cmp	r3, #0
 80005fe:	d14a      	bne.n	8000696 <__udivmoddi4+0xa6>
 8000600:	428a      	cmp	r2, r1
 8000602:	4694      	mov	ip, r2
 8000604:	d965      	bls.n	80006d2 <__udivmoddi4+0xe2>
 8000606:	fab2 f382 	clz	r3, r2
 800060a:	b143      	cbz	r3, 800061e <__udivmoddi4+0x2e>
 800060c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000610:	f1c3 0220 	rsb	r2, r3, #32
 8000614:	409f      	lsls	r7, r3
 8000616:	fa20 f202 	lsr.w	r2, r0, r2
 800061a:	4317      	orrs	r7, r2
 800061c:	409c      	lsls	r4, r3
 800061e:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000622:	fa1f f58c 	uxth.w	r5, ip
 8000626:	fbb7 f1fe 	udiv	r1, r7, lr
 800062a:	0c22      	lsrs	r2, r4, #16
 800062c:	fb0e 7711 	mls	r7, lr, r1, r7
 8000630:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000634:	fb01 f005 	mul.w	r0, r1, r5
 8000638:	4290      	cmp	r0, r2
 800063a:	d90a      	bls.n	8000652 <__udivmoddi4+0x62>
 800063c:	eb1c 0202 	adds.w	r2, ip, r2
 8000640:	f101 37ff 	add.w	r7, r1, #4294967295	; 0xffffffff
 8000644:	f080 811b 	bcs.w	800087e <__udivmoddi4+0x28e>
 8000648:	4290      	cmp	r0, r2
 800064a:	f240 8118 	bls.w	800087e <__udivmoddi4+0x28e>
 800064e:	3902      	subs	r1, #2
 8000650:	4462      	add	r2, ip
 8000652:	1a12      	subs	r2, r2, r0
 8000654:	b2a4      	uxth	r4, r4
 8000656:	fbb2 f0fe 	udiv	r0, r2, lr
 800065a:	fb0e 2210 	mls	r2, lr, r0, r2
 800065e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000662:	fb00 f505 	mul.w	r5, r0, r5
 8000666:	42a5      	cmp	r5, r4
 8000668:	d90a      	bls.n	8000680 <__udivmoddi4+0x90>
 800066a:	eb1c 0404 	adds.w	r4, ip, r4
 800066e:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000672:	f080 8106 	bcs.w	8000882 <__udivmoddi4+0x292>
 8000676:	42a5      	cmp	r5, r4
 8000678:	f240 8103 	bls.w	8000882 <__udivmoddi4+0x292>
 800067c:	4464      	add	r4, ip
 800067e:	3802      	subs	r0, #2
 8000680:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000684:	1b64      	subs	r4, r4, r5
 8000686:	2100      	movs	r1, #0
 8000688:	b11e      	cbz	r6, 8000692 <__udivmoddi4+0xa2>
 800068a:	40dc      	lsrs	r4, r3
 800068c:	2300      	movs	r3, #0
 800068e:	e9c6 4300 	strd	r4, r3, [r6]
 8000692:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000696:	428b      	cmp	r3, r1
 8000698:	d908      	bls.n	80006ac <__udivmoddi4+0xbc>
 800069a:	2e00      	cmp	r6, #0
 800069c:	f000 80ec 	beq.w	8000878 <__udivmoddi4+0x288>
 80006a0:	2100      	movs	r1, #0
 80006a2:	e9c6 0500 	strd	r0, r5, [r6]
 80006a6:	4608      	mov	r0, r1
 80006a8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80006ac:	fab3 f183 	clz	r1, r3
 80006b0:	2900      	cmp	r1, #0
 80006b2:	d149      	bne.n	8000748 <__udivmoddi4+0x158>
 80006b4:	42ab      	cmp	r3, r5
 80006b6:	d302      	bcc.n	80006be <__udivmoddi4+0xce>
 80006b8:	4282      	cmp	r2, r0
 80006ba:	f200 80f7 	bhi.w	80008ac <__udivmoddi4+0x2bc>
 80006be:	1a84      	subs	r4, r0, r2
 80006c0:	eb65 0203 	sbc.w	r2, r5, r3
 80006c4:	2001      	movs	r0, #1
 80006c6:	4617      	mov	r7, r2
 80006c8:	2e00      	cmp	r6, #0
 80006ca:	d0e2      	beq.n	8000692 <__udivmoddi4+0xa2>
 80006cc:	e9c6 4700 	strd	r4, r7, [r6]
 80006d0:	e7df      	b.n	8000692 <__udivmoddi4+0xa2>
 80006d2:	b902      	cbnz	r2, 80006d6 <__udivmoddi4+0xe6>
 80006d4:	deff      	udf	#255	; 0xff
 80006d6:	fab2 f382 	clz	r3, r2
 80006da:	2b00      	cmp	r3, #0
 80006dc:	f040 808f 	bne.w	80007fe <__udivmoddi4+0x20e>
 80006e0:	1a8a      	subs	r2, r1, r2
 80006e2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80006e6:	fa1f fe8c 	uxth.w	lr, ip
 80006ea:	2101      	movs	r1, #1
 80006ec:	fbb2 f5f7 	udiv	r5, r2, r7
 80006f0:	fb07 2015 	mls	r0, r7, r5, r2
 80006f4:	0c22      	lsrs	r2, r4, #16
 80006f6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80006fa:	fb0e f005 	mul.w	r0, lr, r5
 80006fe:	4290      	cmp	r0, r2
 8000700:	d908      	bls.n	8000714 <__udivmoddi4+0x124>
 8000702:	eb1c 0202 	adds.w	r2, ip, r2
 8000706:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 800070a:	d202      	bcs.n	8000712 <__udivmoddi4+0x122>
 800070c:	4290      	cmp	r0, r2
 800070e:	f200 80ca 	bhi.w	80008a6 <__udivmoddi4+0x2b6>
 8000712:	4645      	mov	r5, r8
 8000714:	1a12      	subs	r2, r2, r0
 8000716:	b2a4      	uxth	r4, r4
 8000718:	fbb2 f0f7 	udiv	r0, r2, r7
 800071c:	fb07 2210 	mls	r2, r7, r0, r2
 8000720:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000724:	fb0e fe00 	mul.w	lr, lr, r0
 8000728:	45a6      	cmp	lr, r4
 800072a:	d908      	bls.n	800073e <__udivmoddi4+0x14e>
 800072c:	eb1c 0404 	adds.w	r4, ip, r4
 8000730:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000734:	d202      	bcs.n	800073c <__udivmoddi4+0x14c>
 8000736:	45a6      	cmp	lr, r4
 8000738:	f200 80ba 	bhi.w	80008b0 <__udivmoddi4+0x2c0>
 800073c:	4610      	mov	r0, r2
 800073e:	eba4 040e 	sub.w	r4, r4, lr
 8000742:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000746:	e79f      	b.n	8000688 <__udivmoddi4+0x98>
 8000748:	f1c1 0720 	rsb	r7, r1, #32
 800074c:	408b      	lsls	r3, r1
 800074e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000752:	ea4c 0c03 	orr.w	ip, ip, r3
 8000756:	fa05 f401 	lsl.w	r4, r5, r1
 800075a:	fa20 f307 	lsr.w	r3, r0, r7
 800075e:	40fd      	lsrs	r5, r7
 8000760:	4323      	orrs	r3, r4
 8000762:	fa00 f901 	lsl.w	r9, r0, r1
 8000766:	ea4f 401c 	mov.w	r0, ip, lsr #16
 800076a:	fa1f fe8c 	uxth.w	lr, ip
 800076e:	fbb5 f8f0 	udiv	r8, r5, r0
 8000772:	0c1c      	lsrs	r4, r3, #16
 8000774:	fb00 5518 	mls	r5, r0, r8, r5
 8000778:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 800077c:	fb08 f50e 	mul.w	r5, r8, lr
 8000780:	42a5      	cmp	r5, r4
 8000782:	fa02 f201 	lsl.w	r2, r2, r1
 8000786:	d90b      	bls.n	80007a0 <__udivmoddi4+0x1b0>
 8000788:	eb1c 0404 	adds.w	r4, ip, r4
 800078c:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000790:	f080 8087 	bcs.w	80008a2 <__udivmoddi4+0x2b2>
 8000794:	42a5      	cmp	r5, r4
 8000796:	f240 8084 	bls.w	80008a2 <__udivmoddi4+0x2b2>
 800079a:	f1a8 0802 	sub.w	r8, r8, #2
 800079e:	4464      	add	r4, ip
 80007a0:	1b64      	subs	r4, r4, r5
 80007a2:	b29d      	uxth	r5, r3
 80007a4:	fbb4 f3f0 	udiv	r3, r4, r0
 80007a8:	fb00 4413 	mls	r4, r0, r3, r4
 80007ac:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80007b0:	fb03 fe0e 	mul.w	lr, r3, lr
 80007b4:	45a6      	cmp	lr, r4
 80007b6:	d908      	bls.n	80007ca <__udivmoddi4+0x1da>
 80007b8:	eb1c 0404 	adds.w	r4, ip, r4
 80007bc:	f103 30ff 	add.w	r0, r3, #4294967295	; 0xffffffff
 80007c0:	d26b      	bcs.n	800089a <__udivmoddi4+0x2aa>
 80007c2:	45a6      	cmp	lr, r4
 80007c4:	d969      	bls.n	800089a <__udivmoddi4+0x2aa>
 80007c6:	3b02      	subs	r3, #2
 80007c8:	4464      	add	r4, ip
 80007ca:	ea43 4008 	orr.w	r0, r3, r8, lsl #16
 80007ce:	fba0 8302 	umull	r8, r3, r0, r2
 80007d2:	eba4 040e 	sub.w	r4, r4, lr
 80007d6:	429c      	cmp	r4, r3
 80007d8:	46c6      	mov	lr, r8
 80007da:	461d      	mov	r5, r3
 80007dc:	d355      	bcc.n	800088a <__udivmoddi4+0x29a>
 80007de:	d052      	beq.n	8000886 <__udivmoddi4+0x296>
 80007e0:	b156      	cbz	r6, 80007f8 <__udivmoddi4+0x208>
 80007e2:	ebb9 030e 	subs.w	r3, r9, lr
 80007e6:	eb64 0405 	sbc.w	r4, r4, r5
 80007ea:	fa04 f707 	lsl.w	r7, r4, r7
 80007ee:	40cb      	lsrs	r3, r1
 80007f0:	40cc      	lsrs	r4, r1
 80007f2:	431f      	orrs	r7, r3
 80007f4:	e9c6 7400 	strd	r7, r4, [r6]
 80007f8:	2100      	movs	r1, #0
 80007fa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80007fe:	f1c3 0120 	rsb	r1, r3, #32
 8000802:	fa02 fc03 	lsl.w	ip, r2, r3
 8000806:	fa20 f201 	lsr.w	r2, r0, r1
 800080a:	fa25 f101 	lsr.w	r1, r5, r1
 800080e:	409d      	lsls	r5, r3
 8000810:	432a      	orrs	r2, r5
 8000812:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000816:	fa1f fe8c 	uxth.w	lr, ip
 800081a:	fbb1 f0f7 	udiv	r0, r1, r7
 800081e:	fb07 1510 	mls	r5, r7, r0, r1
 8000822:	0c11      	lsrs	r1, r2, #16
 8000824:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000828:	fb00 f50e 	mul.w	r5, r0, lr
 800082c:	428d      	cmp	r5, r1
 800082e:	fa04 f403 	lsl.w	r4, r4, r3
 8000832:	d908      	bls.n	8000846 <__udivmoddi4+0x256>
 8000834:	eb1c 0101 	adds.w	r1, ip, r1
 8000838:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 800083c:	d22f      	bcs.n	800089e <__udivmoddi4+0x2ae>
 800083e:	428d      	cmp	r5, r1
 8000840:	d92d      	bls.n	800089e <__udivmoddi4+0x2ae>
 8000842:	3802      	subs	r0, #2
 8000844:	4461      	add	r1, ip
 8000846:	1b49      	subs	r1, r1, r5
 8000848:	b292      	uxth	r2, r2
 800084a:	fbb1 f5f7 	udiv	r5, r1, r7
 800084e:	fb07 1115 	mls	r1, r7, r5, r1
 8000852:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000856:	fb05 f10e 	mul.w	r1, r5, lr
 800085a:	4291      	cmp	r1, r2
 800085c:	d908      	bls.n	8000870 <__udivmoddi4+0x280>
 800085e:	eb1c 0202 	adds.w	r2, ip, r2
 8000862:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000866:	d216      	bcs.n	8000896 <__udivmoddi4+0x2a6>
 8000868:	4291      	cmp	r1, r2
 800086a:	d914      	bls.n	8000896 <__udivmoddi4+0x2a6>
 800086c:	3d02      	subs	r5, #2
 800086e:	4462      	add	r2, ip
 8000870:	1a52      	subs	r2, r2, r1
 8000872:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000876:	e739      	b.n	80006ec <__udivmoddi4+0xfc>
 8000878:	4631      	mov	r1, r6
 800087a:	4630      	mov	r0, r6
 800087c:	e709      	b.n	8000692 <__udivmoddi4+0xa2>
 800087e:	4639      	mov	r1, r7
 8000880:	e6e7      	b.n	8000652 <__udivmoddi4+0x62>
 8000882:	4610      	mov	r0, r2
 8000884:	e6fc      	b.n	8000680 <__udivmoddi4+0x90>
 8000886:	45c1      	cmp	r9, r8
 8000888:	d2aa      	bcs.n	80007e0 <__udivmoddi4+0x1f0>
 800088a:	ebb8 0e02 	subs.w	lr, r8, r2
 800088e:	eb63 050c 	sbc.w	r5, r3, ip
 8000892:	3801      	subs	r0, #1
 8000894:	e7a4      	b.n	80007e0 <__udivmoddi4+0x1f0>
 8000896:	4645      	mov	r5, r8
 8000898:	e7ea      	b.n	8000870 <__udivmoddi4+0x280>
 800089a:	4603      	mov	r3, r0
 800089c:	e795      	b.n	80007ca <__udivmoddi4+0x1da>
 800089e:	4640      	mov	r0, r8
 80008a0:	e7d1      	b.n	8000846 <__udivmoddi4+0x256>
 80008a2:	46d0      	mov	r8, sl
 80008a4:	e77c      	b.n	80007a0 <__udivmoddi4+0x1b0>
 80008a6:	3d02      	subs	r5, #2
 80008a8:	4462      	add	r2, ip
 80008aa:	e733      	b.n	8000714 <__udivmoddi4+0x124>
 80008ac:	4608      	mov	r0, r1
 80008ae:	e70b      	b.n	80006c8 <__udivmoddi4+0xd8>
 80008b0:	4464      	add	r4, ip
 80008b2:	3802      	subs	r0, #2
 80008b4:	e743      	b.n	800073e <__udivmoddi4+0x14e>
 80008b6:	bf00      	nop

080008b8 <__aeabi_idiv0>:
 80008b8:	4770      	bx	lr
 80008ba:	bf00      	nop

080008bc <debounceFSM_init>:
static delay_t debounce_delay;

static bool_t key_state = false;


void debounceFSM_init(void){
 80008bc:	b480      	push	{r7}
 80008be:	af00      	add	r7, sp, #0
	state = BUTTON_UP;
 80008c0:	4b03      	ldr	r3, [pc, #12]	; (80008d0 <debounceFSM_init+0x14>)
 80008c2:	2200      	movs	r2, #0
 80008c4:	701a      	strb	r2, [r3, #0]
}
 80008c6:	bf00      	nop
 80008c8:	46bd      	mov	sp, r7
 80008ca:	bc80      	pop	{r7}
 80008cc:	4770      	bx	lr
 80008ce:	bf00      	nop
 80008d0:	2000006c 	.word	0x2000006c

080008d4 <debounceFSM_update>:

void debounceFSM_update(void){
 80008d4:	b580      	push	{r7, lr}
 80008d6:	af00      	add	r7, sp, #0
	delayInit(&debounce_delay, 40);
 80008d8:	2128      	movs	r1, #40	; 0x28
 80008da:	482d      	ldr	r0, [pc, #180]	; (8000990 <debounceFSM_update+0xbc>)
 80008dc:	f000 f8e4 	bl	8000aa8 <delayInit>

	switch (state){
 80008e0:	4b2c      	ldr	r3, [pc, #176]	; (8000994 <debounceFSM_update+0xc0>)
 80008e2:	781b      	ldrb	r3, [r3, #0]
 80008e4:	2b03      	cmp	r3, #3
 80008e6:	d851      	bhi.n	800098c <debounceFSM_update+0xb8>
 80008e8:	a201      	add	r2, pc, #4	; (adr r2, 80008f0 <debounceFSM_update+0x1c>)
 80008ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80008ee:	bf00      	nop
 80008f0:	08000901 	.word	0x08000901
 80008f4:	08000915 	.word	0x08000915
 80008f8:	08000947 	.word	0x08000947
 80008fc:	0800095b 	.word	0x0800095b
	case BUTTON_UP:
		if (BSP_PB_GetState(BUTTON_USER)){
 8000900:	2000      	movs	r0, #0
 8000902:	f000 fa4f 	bl	8000da4 <BSP_PB_GetState>
 8000906:	4603      	mov	r3, r0
 8000908:	2b00      	cmp	r3, #0
 800090a:	d03c      	beq.n	8000986 <debounceFSM_update+0xb2>
			state = BUTTON_FALLING;
 800090c:	4b21      	ldr	r3, [pc, #132]	; (8000994 <debounceFSM_update+0xc0>)
 800090e:	2201      	movs	r2, #1
 8000910:	701a      	strb	r2, [r3, #0]
		}
		break;
 8000912:	e038      	b.n	8000986 <debounceFSM_update+0xb2>


	case BUTTON_FALLING:
		uartSendString((uint8_t*)"falling...");
 8000914:	4820      	ldr	r0, [pc, #128]	; (8000998 <debounceFSM_update+0xc4>)
 8000916:	f000 f93b 	bl	8000b90 <uartSendString>
		delayRead(&debounce_delay);
 800091a:	481d      	ldr	r0, [pc, #116]	; (8000990 <debounceFSM_update+0xbc>)
 800091c:	f000 f8dc 	bl	8000ad8 <delayRead>
		if (BSP_PB_GetState(BUTTON_USER)){
 8000920:	2000      	movs	r0, #0
 8000922:	f000 fa3f 	bl	8000da4 <BSP_PB_GetState>
 8000926:	4603      	mov	r3, r0
 8000928:	2b00      	cmp	r3, #0
 800092a:	d008      	beq.n	800093e <debounceFSM_update+0x6a>
			state = BUTTON_DOWN;
 800092c:	4b19      	ldr	r3, [pc, #100]	; (8000994 <debounceFSM_update+0xc0>)
 800092e:	2202      	movs	r2, #2
 8000930:	701a      	strb	r2, [r3, #0]
			key_state = true;
 8000932:	4b1a      	ldr	r3, [pc, #104]	; (800099c <debounceFSM_update+0xc8>)
 8000934:	2201      	movs	r2, #1
 8000936:	701a      	strb	r2, [r3, #0]
			buttonPressed();
 8000938:	f000 f834 	bl	80009a4 <buttonPressed>
		}else {
			state = BUTTON_UP;
		}
		break;
 800093c:	e026      	b.n	800098c <debounceFSM_update+0xb8>
			state = BUTTON_UP;
 800093e:	4b15      	ldr	r3, [pc, #84]	; (8000994 <debounceFSM_update+0xc0>)
 8000940:	2200      	movs	r2, #0
 8000942:	701a      	strb	r2, [r3, #0]
		break;
 8000944:	e022      	b.n	800098c <debounceFSM_update+0xb8>

	case BUTTON_DOWN:
		if(!BSP_PB_GetState(BUTTON_USER)){
 8000946:	2000      	movs	r0, #0
 8000948:	f000 fa2c 	bl	8000da4 <BSP_PB_GetState>
 800094c:	4603      	mov	r3, r0
 800094e:	2b00      	cmp	r3, #0
 8000950:	d11b      	bne.n	800098a <debounceFSM_update+0xb6>
			state = BUTTON_RAISING;
 8000952:	4b10      	ldr	r3, [pc, #64]	; (8000994 <debounceFSM_update+0xc0>)
 8000954:	2203      	movs	r2, #3
 8000956:	701a      	strb	r2, [r3, #0]

		}
		break;
 8000958:	e017      	b.n	800098a <debounceFSM_update+0xb6>

	case BUTTON_RAISING:
		uartSendString((uint8_t*)"raising...");
 800095a:	4811      	ldr	r0, [pc, #68]	; (80009a0 <debounceFSM_update+0xcc>)
 800095c:	f000 f918 	bl	8000b90 <uartSendString>
		delayRead(&debounce_delay);
 8000960:	480b      	ldr	r0, [pc, #44]	; (8000990 <debounceFSM_update+0xbc>)
 8000962:	f000 f8b9 	bl	8000ad8 <delayRead>
		if (!BSP_PB_GetState(BUTTON_USER)){
 8000966:	2000      	movs	r0, #0
 8000968:	f000 fa1c 	bl	8000da4 <BSP_PB_GetState>
 800096c:	4603      	mov	r3, r0
 800096e:	2b00      	cmp	r3, #0
 8000970:	d105      	bne.n	800097e <debounceFSM_update+0xaa>
			state = BUTTON_UP;
 8000972:	4b08      	ldr	r3, [pc, #32]	; (8000994 <debounceFSM_update+0xc0>)
 8000974:	2200      	movs	r2, #0
 8000976:	701a      	strb	r2, [r3, #0]
			buttonReleased();
 8000978:	f000 f81b 	bl	80009b2 <buttonReleased>
		}else {
			state = BUTTON_DOWN;
		}
		break;
 800097c:	e006      	b.n	800098c <debounceFSM_update+0xb8>
			state = BUTTON_DOWN;
 800097e:	4b05      	ldr	r3, [pc, #20]	; (8000994 <debounceFSM_update+0xc0>)
 8000980:	2202      	movs	r2, #2
 8000982:	701a      	strb	r2, [r3, #0]
		break;
 8000984:	e002      	b.n	800098c <debounceFSM_update+0xb8>
		break;
 8000986:	bf00      	nop
 8000988:	e000      	b.n	800098c <debounceFSM_update+0xb8>
		break;
 800098a:	bf00      	nop
	}
}
 800098c:	bf00      	nop
 800098e:	bd80      	pop	{r7, pc}
 8000990:	20000070 	.word	0x20000070
 8000994:	2000006c 	.word	0x2000006c
 8000998:	08002a94 	.word	0x08002a94
 800099c:	2000007c 	.word	0x2000007c
 80009a0:	08002aa0 	.word	0x08002aa0

080009a4 <buttonPressed>:

void buttonPressed(void){
 80009a4:	b580      	push	{r7, lr}
 80009a6:	af00      	add	r7, sp, #0
	BSP_LED_On(LED1);
 80009a8:	2000      	movs	r0, #0
 80009aa:	f000 f957 	bl	8000c5c <BSP_LED_On>

}
 80009ae:	bf00      	nop
 80009b0:	bd80      	pop	{r7, pc}

080009b2 <buttonReleased>:
void buttonReleased(void){
 80009b2:	b580      	push	{r7, lr}
 80009b4:	af00      	add	r7, sp, #0
	BSP_LED_Off(LED1);
 80009b6:	2000      	movs	r0, #0
 80009b8:	f000 f96a 	bl	8000c90 <BSP_LED_Off>
}
 80009bc:	bf00      	nop
 80009be:	bd80      	pop	{r7, pc}

080009c0 <readKey>:

bool_t readKey(){
 80009c0:	b480      	push	{r7}
 80009c2:	af00      	add	r7, sp, #0

	if (key_state){
 80009c4:	4b06      	ldr	r3, [pc, #24]	; (80009e0 <readKey+0x20>)
 80009c6:	781b      	ldrb	r3, [r3, #0]
 80009c8:	2b00      	cmp	r3, #0
 80009ca:	d004      	beq.n	80009d6 <readKey+0x16>
		key_state = false;
 80009cc:	4b04      	ldr	r3, [pc, #16]	; (80009e0 <readKey+0x20>)
 80009ce:	2200      	movs	r2, #0
 80009d0:	701a      	strb	r2, [r3, #0]
		return true;
 80009d2:	2301      	movs	r3, #1
 80009d4:	e000      	b.n	80009d8 <readKey+0x18>
	}else {
		return false;
 80009d6:	2300      	movs	r3, #0
	}
}
 80009d8:	4618      	mov	r0, r3
 80009da:	46bd      	mov	sp, r7
 80009dc:	bc80      	pop	{r7}
 80009de:	4770      	bx	lr
 80009e0:	2000007c 	.word	0x2000007c

080009e4 <periodicBlinkInit>:
 * Function that initiates sequentially an array of leds.
 * @param delays Pointer to an array of defined delays.
 * @param duties Pointer to an array of duty cycles per led.
 * @param numLed length of the array of leds.
 */
void periodicBlinkInit(delay_t *delays,duty_cycle * duties, size_t numLed){
 80009e4:	b580      	push	{r7, lr}
 80009e6:	b088      	sub	sp, #32
 80009e8:	af00      	add	r7, sp, #0
 80009ea:	60f8      	str	r0, [r7, #12]
 80009ec:	60b9      	str	r1, [r7, #8]
 80009ee:	607a      	str	r2, [r7, #4]


	for (uint8_t i = 0; i < numLed; i++){
 80009f0:	2300      	movs	r3, #0
 80009f2:	77fb      	strb	r3, [r7, #31]
 80009f4:	e03a      	b.n	8000a6c <periodicBlinkInit+0x88>
		tick_t duration = (tick_t)(duties[i].duration)*(duties[i].dutyCycle);
 80009f6:	7ffb      	ldrb	r3, [r7, #31]
 80009f8:	011b      	lsls	r3, r3, #4
 80009fa:	68ba      	ldr	r2, [r7, #8]
 80009fc:	4413      	add	r3, r2
 80009fe:	681b      	ldr	r3, [r3, #0]
 8000a00:	4618      	mov	r0, r3
 8000a02:	f7ff fd65 	bl	80004d0 <__aeabi_ui2f>
 8000a06:	7ffb      	ldrb	r3, [r7, #31]
 8000a08:	011b      	lsls	r3, r3, #4
 8000a0a:	68ba      	ldr	r2, [r7, #8]
 8000a0c:	4413      	add	r3, r2
 8000a0e:	685b      	ldr	r3, [r3, #4]
 8000a10:	4619      	mov	r1, r3
 8000a12:	f7ff fbf3 	bl	80001fc <__aeabi_fmul>
 8000a16:	4603      	mov	r3, r0
 8000a18:	4618      	mov	r0, r3
 8000a1a:	f7ff fdb1 	bl	8000580 <__aeabi_f2uiz>
 8000a1e:	4603      	mov	r3, r0
 8000a20:	61bb      	str	r3, [r7, #24]
		BSP_LED_Init(duties[i].led);
 8000a22:	7ffb      	ldrb	r3, [r7, #31]
 8000a24:	011b      	lsls	r3, r3, #4
 8000a26:	68ba      	ldr	r2, [r7, #8]
 8000a28:	4413      	add	r3, r2
 8000a2a:	891b      	ldrh	r3, [r3, #8]
 8000a2c:	b2db      	uxtb	r3, r3
 8000a2e:	4618      	mov	r0, r3
 8000a30:	f000 f8c4 	bl	8000bbc <BSP_LED_Init>
		delayInit(&delays[i], duration);
 8000a34:	7ffa      	ldrb	r2, [r7, #31]
 8000a36:	4613      	mov	r3, r2
 8000a38:	005b      	lsls	r3, r3, #1
 8000a3a:	4413      	add	r3, r2
 8000a3c:	009b      	lsls	r3, r3, #2
 8000a3e:	461a      	mov	r2, r3
 8000a40:	68fb      	ldr	r3, [r7, #12]
 8000a42:	4413      	add	r3, r2
 8000a44:	69b9      	ldr	r1, [r7, #24]
 8000a46:	4618      	mov	r0, r3
 8000a48:	f000 f82e 	bl	8000aa8 <delayInit>
		uint32_t dutyCounter = duties[i].counter*2;
 8000a4c:	7ffb      	ldrb	r3, [r7, #31]
 8000a4e:	011b      	lsls	r3, r3, #4
 8000a50:	68ba      	ldr	r2, [r7, #8]
 8000a52:	4413      	add	r3, r2
 8000a54:	68db      	ldr	r3, [r3, #12]
 8000a56:	005b      	lsls	r3, r3, #1
 8000a58:	617b      	str	r3, [r7, #20]
		duties[i].counter = dutyCounter;
 8000a5a:	7ffb      	ldrb	r3, [r7, #31]
 8000a5c:	011b      	lsls	r3, r3, #4
 8000a5e:	68ba      	ldr	r2, [r7, #8]
 8000a60:	4413      	add	r3, r2
 8000a62:	697a      	ldr	r2, [r7, #20]
 8000a64:	60da      	str	r2, [r3, #12]
	for (uint8_t i = 0; i < numLed; i++){
 8000a66:	7ffb      	ldrb	r3, [r7, #31]
 8000a68:	3301      	adds	r3, #1
 8000a6a:	77fb      	strb	r3, [r7, #31]
 8000a6c:	7ffb      	ldrb	r3, [r7, #31]
 8000a6e:	687a      	ldr	r2, [r7, #4]
 8000a70:	429a      	cmp	r2, r3
 8000a72:	d8c0      	bhi.n	80009f6 <periodicBlinkInit+0x12>
	}

}
 8000a74:	bf00      	nop
 8000a76:	bf00      	nop
 8000a78:	3720      	adds	r7, #32
 8000a7a:	46bd      	mov	sp, r7
 8000a7c:	bd80      	pop	{r7, pc}

08000a7e <blink>:
 * @brief Performs blinking on demand given a leds.
 * Function that blinks sequentially an array of leds.
 * @param delays Pointer to an array of defined delays.
 * @param duties Pointer to an array of duty cycles per led.
 */
void blink(delay_t *delay,duty_cycle * duty){
 8000a7e:	b580      	push	{r7, lr}
 8000a80:	b082      	sub	sp, #8
 8000a82:	af00      	add	r7, sp, #0
 8000a84:	6078      	str	r0, [r7, #4]
 8000a86:	6039      	str	r1, [r7, #0]

	if (delayRead(delay)){
 8000a88:	6878      	ldr	r0, [r7, #4]
 8000a8a:	f000 f825 	bl	8000ad8 <delayRead>
 8000a8e:	4603      	mov	r3, r0
 8000a90:	2b00      	cmp	r3, #0
 8000a92:	d005      	beq.n	8000aa0 <blink+0x22>

		BSP_LED_Toggle(duty->led);
 8000a94:	683b      	ldr	r3, [r7, #0]
 8000a96:	891b      	ldrh	r3, [r3, #8]
 8000a98:	b2db      	uxtb	r3, r3
 8000a9a:	4618      	mov	r0, r3
 8000a9c:	f000 f912 	bl	8000cc4 <BSP_LED_Toggle>
	}
}
 8000aa0:	bf00      	nop
 8000aa2:	3708      	adds	r7, #8
 8000aa4:	46bd      	mov	sp, r7
 8000aa6:	bd80      	pop	{r7, pc}

08000aa8 <delayInit>:
 * Function that initiates a delay.
 * @param delay Pointer to a defined delay struct.
 * @param duration in milliseconds.
 * @note if duration is 0 or a negative number, it defaults to DEFAULT_DELAY.
 */
void delayInit(delay_t *delay, tick_t duration){
 8000aa8:	b480      	push	{r7}
 8000aaa:	b083      	sub	sp, #12
 8000aac:	af00      	add	r7, sp, #0
 8000aae:	6078      	str	r0, [r7, #4]
 8000ab0:	6039      	str	r1, [r7, #0]
	if (duration <= 0){
 8000ab2:	683b      	ldr	r3, [r7, #0]
 8000ab4:	2b00      	cmp	r3, #0
 8000ab6:	d101      	bne.n	8000abc <delayInit+0x14>
		duration = DEFAULT_DELAY;
 8000ab8:	2364      	movs	r3, #100	; 0x64
 8000aba:	603b      	str	r3, [r7, #0]
	}
	delay->duration = duration;
 8000abc:	687b      	ldr	r3, [r7, #4]
 8000abe:	683a      	ldr	r2, [r7, #0]
 8000ac0:	605a      	str	r2, [r3, #4]
	delay->running = false;
 8000ac2:	687b      	ldr	r3, [r7, #4]
 8000ac4:	2200      	movs	r2, #0
 8000ac6:	721a      	strb	r2, [r3, #8]
	delay->startTime = 0;
 8000ac8:	687b      	ldr	r3, [r7, #4]
 8000aca:	2200      	movs	r2, #0
 8000acc:	601a      	str	r2, [r3, #0]

}
 8000ace:	bf00      	nop
 8000ad0:	370c      	adds	r7, #12
 8000ad2:	46bd      	mov	sp, r7
 8000ad4:	bc80      	pop	{r7}
 8000ad6:	4770      	bx	lr

08000ad8 <delayRead>:
 * @brief Checks if an specific delay has elapsed.
 * Function that checks the current status of a delay and updates its values.
 * @param delay Pointer to a defined delay struct.
 * @retval bool indicating running state.
 */
bool_t delayRead(delay_t *delay){
 8000ad8:	b580      	push	{r7, lr}
 8000ada:	b084      	sub	sp, #16
 8000adc:	af00      	add	r7, sp, #0
 8000ade:	6078      	str	r0, [r7, #4]

	tick_t currentTime = HAL_GetTick();
 8000ae0:	f000 fa2c 	bl	8000f3c <HAL_GetTick>
 8000ae4:	60f8      	str	r0, [r7, #12]
	bool isRunning = delay->running;
 8000ae6:	687b      	ldr	r3, [r7, #4]
 8000ae8:	7a1b      	ldrb	r3, [r3, #8]
 8000aea:	72fb      	strb	r3, [r7, #11]

	if (isRunning && (currentTime - delay->startTime >= delay->duration)){
 8000aec:	7afb      	ldrb	r3, [r7, #11]
 8000aee:	2b00      	cmp	r3, #0
 8000af0:	d00c      	beq.n	8000b0c <delayRead+0x34>
 8000af2:	687b      	ldr	r3, [r7, #4]
 8000af4:	681b      	ldr	r3, [r3, #0]
 8000af6:	68fa      	ldr	r2, [r7, #12]
 8000af8:	1ad2      	subs	r2, r2, r3
 8000afa:	687b      	ldr	r3, [r7, #4]
 8000afc:	685b      	ldr	r3, [r3, #4]
 8000afe:	429a      	cmp	r2, r3
 8000b00:	d304      	bcc.n	8000b0c <delayRead+0x34>
		delay->running = false;
 8000b02:	687b      	ldr	r3, [r7, #4]
 8000b04:	2200      	movs	r2, #0
 8000b06:	721a      	strb	r2, [r3, #8]
		return true;
 8000b08:	2301      	movs	r3, #1
 8000b0a:	e00c      	b.n	8000b26 <delayRead+0x4e>
	}

	if (!isRunning) {
 8000b0c:	7afb      	ldrb	r3, [r7, #11]
 8000b0e:	f083 0301 	eor.w	r3, r3, #1
 8000b12:	b2db      	uxtb	r3, r3
 8000b14:	2b00      	cmp	r3, #0
 8000b16:	d005      	beq.n	8000b24 <delayRead+0x4c>
		delay->running = true;
 8000b18:	687b      	ldr	r3, [r7, #4]
 8000b1a:	2201      	movs	r2, #1
 8000b1c:	721a      	strb	r2, [r3, #8]
		delay->startTime = currentTime;
 8000b1e:	687b      	ldr	r3, [r7, #4]
 8000b20:	68fa      	ldr	r2, [r7, #12]
 8000b22:	601a      	str	r2, [r3, #0]

	}
	return false;
 8000b24:	2300      	movs	r3, #0
}
 8000b26:	4618      	mov	r0, r3
 8000b28:	3710      	adds	r7, #16
 8000b2a:	46bd      	mov	sp, r7
 8000b2c:	bd80      	pop	{r7, pc}
	...

08000b30 <uartInit>:

#include "API_uart.h"
#include <string.h>
UART_HandleTypeDef huart;

bool_t uartInit(){
 8000b30:	b580      	push	{r7, lr}
 8000b32:	b082      	sub	sp, #8
 8000b34:	af00      	add	r7, sp, #0
	huart.Instance = USART3;
 8000b36:	4b14      	ldr	r3, [pc, #80]	; (8000b88 <uartInit+0x58>)
 8000b38:	4a14      	ldr	r2, [pc, #80]	; (8000b8c <uartInit+0x5c>)
 8000b3a:	601a      	str	r2, [r3, #0]
	huart.Init.BaudRate = 115200;
 8000b3c:	4b12      	ldr	r3, [pc, #72]	; (8000b88 <uartInit+0x58>)
 8000b3e:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000b42:	605a      	str	r2, [r3, #4]
	huart.Init.WordLength = UART_WORDLENGTH_8B;
 8000b44:	4b10      	ldr	r3, [pc, #64]	; (8000b88 <uartInit+0x58>)
 8000b46:	2200      	movs	r2, #0
 8000b48:	609a      	str	r2, [r3, #8]
	huart.Init.StopBits = UART_STOPBITS_1;
 8000b4a:	4b0f      	ldr	r3, [pc, #60]	; (8000b88 <uartInit+0x58>)
 8000b4c:	2200      	movs	r2, #0
 8000b4e:	60da      	str	r2, [r3, #12]
	huart.Init.Parity = UART_PARITY_NONE;
 8000b50:	4b0d      	ldr	r3, [pc, #52]	; (8000b88 <uartInit+0x58>)
 8000b52:	2200      	movs	r2, #0
 8000b54:	611a      	str	r2, [r3, #16]
	huart.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000b56:	4b0c      	ldr	r3, [pc, #48]	; (8000b88 <uartInit+0x58>)
 8000b58:	2200      	movs	r2, #0
 8000b5a:	619a      	str	r2, [r3, #24]
	huart.Init.Mode  = UART_MODE_TX_RX;
 8000b5c:	4b0a      	ldr	r3, [pc, #40]	; (8000b88 <uartInit+0x58>)
 8000b5e:	220c      	movs	r2, #12
 8000b60:	615a      	str	r2, [r3, #20]
	huart.Init.OverSampling = UART_OVERSAMPLING_16;
 8000b62:	4b09      	ldr	r3, [pc, #36]	; (8000b88 <uartInit+0x58>)
 8000b64:	2200      	movs	r2, #0
 8000b66:	61da      	str	r2, [r3, #28]

	HAL_StatusTypeDef status = HAL_UART_Init(&huart);
 8000b68:	4807      	ldr	r0, [pc, #28]	; (8000b88 <uartInit+0x58>)
 8000b6a:	f001 f9e5 	bl	8001f38 <HAL_UART_Init>
 8000b6e:	4603      	mov	r3, r0
 8000b70:	71fb      	strb	r3, [r7, #7]
	if (status != HAL_OK){
 8000b72:	79fb      	ldrb	r3, [r7, #7]
 8000b74:	2b00      	cmp	r3, #0
 8000b76:	d001      	beq.n	8000b7c <uartInit+0x4c>
		return false;
 8000b78:	2300      	movs	r3, #0
 8000b7a:	e000      	b.n	8000b7e <uartInit+0x4e>
	}else{
		return true;
 8000b7c:	2301      	movs	r3, #1
	}
}
 8000b7e:	4618      	mov	r0, r3
 8000b80:	3708      	adds	r7, #8
 8000b82:	46bd      	mov	sp, r7
 8000b84:	bd80      	pop	{r7, pc}
 8000b86:	bf00      	nop
 8000b88:	20000080 	.word	0x20000080
 8000b8c:	40004800 	.word	0x40004800

08000b90 <uartSendString>:
void uartSendString(uint8_t * pstring){
 8000b90:	b580      	push	{r7, lr}
 8000b92:	b082      	sub	sp, #8
 8000b94:	af00      	add	r7, sp, #0
 8000b96:	6078      	str	r0, [r7, #4]


	HAL_UART_Transmit(&huart, pstring, strlen((char*)pstring), HAL_MAX_DELAY);
 8000b98:	6878      	ldr	r0, [r7, #4]
 8000b9a:	f7ff fb27 	bl	80001ec <strlen>
 8000b9e:	4603      	mov	r3, r0
 8000ba0:	b29a      	uxth	r2, r3
 8000ba2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000ba6:	6879      	ldr	r1, [r7, #4]
 8000ba8:	4803      	ldr	r0, [pc, #12]	; (8000bb8 <uartSendString+0x28>)
 8000baa:	f001 fa12 	bl	8001fd2 <HAL_UART_Transmit>

}
 8000bae:	bf00      	nop
 8000bb0:	3708      	adds	r7, #8
 8000bb2:	46bd      	mov	sp, r7
 8000bb4:	bd80      	pop	{r7, pc}
 8000bb6:	bf00      	nop
 8000bb8:	20000080 	.word	0x20000080

08000bbc <BSP_LED_Init>:
  *     @arg  LED1
  *     @arg  LED2
  *     @arg  LED3
  */
void BSP_LED_Init(Led_TypeDef Led)
{
 8000bbc:	b580      	push	{r7, lr}
 8000bbe:	b08a      	sub	sp, #40	; 0x28
 8000bc0:	af00      	add	r7, sp, #0
 8000bc2:	4603      	mov	r3, r0
 8000bc4:	71fb      	strb	r3, [r7, #7]
  GPIO_InitTypeDef  GPIO_InitStruct;
  
  /* Enable the GPIO_LED Clock */
  LEDx_GPIO_CLK_ENABLE(Led);
 8000bc6:	79fb      	ldrb	r3, [r7, #7]
 8000bc8:	2b00      	cmp	r3, #0
 8000bca:	d10e      	bne.n	8000bea <BSP_LED_Init+0x2e>
 8000bcc:	2300      	movs	r3, #0
 8000bce:	613b      	str	r3, [r7, #16]
 8000bd0:	4b1f      	ldr	r3, [pc, #124]	; (8000c50 <BSP_LED_Init+0x94>)
 8000bd2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bd4:	4a1e      	ldr	r2, [pc, #120]	; (8000c50 <BSP_LED_Init+0x94>)
 8000bd6:	f043 0302 	orr.w	r3, r3, #2
 8000bda:	6313      	str	r3, [r2, #48]	; 0x30
 8000bdc:	4b1c      	ldr	r3, [pc, #112]	; (8000c50 <BSP_LED_Init+0x94>)
 8000bde:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000be0:	f003 0302 	and.w	r3, r3, #2
 8000be4:	613b      	str	r3, [r7, #16]
 8000be6:	693b      	ldr	r3, [r7, #16]
 8000be8:	e00d      	b.n	8000c06 <BSP_LED_Init+0x4a>
 8000bea:	2300      	movs	r3, #0
 8000bec:	60fb      	str	r3, [r7, #12]
 8000bee:	4b18      	ldr	r3, [pc, #96]	; (8000c50 <BSP_LED_Init+0x94>)
 8000bf0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bf2:	4a17      	ldr	r2, [pc, #92]	; (8000c50 <BSP_LED_Init+0x94>)
 8000bf4:	f043 0302 	orr.w	r3, r3, #2
 8000bf8:	6313      	str	r3, [r2, #48]	; 0x30
 8000bfa:	4b15      	ldr	r3, [pc, #84]	; (8000c50 <BSP_LED_Init+0x94>)
 8000bfc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bfe:	f003 0302 	and.w	r3, r3, #2
 8000c02:	60fb      	str	r3, [r7, #12]
 8000c04:	68fb      	ldr	r3, [r7, #12]
  
  /* Configure the GPIO_LED pin */
  GPIO_InitStruct.Pin = GPIO_PIN[Led];
 8000c06:	79fb      	ldrb	r3, [r7, #7]
 8000c08:	4a12      	ldr	r2, [pc, #72]	; (8000c54 <BSP_LED_Init+0x98>)
 8000c0a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000c0e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c10:	2301      	movs	r3, #1
 8000c12:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c14:	2300      	movs	r3, #0
 8000c16:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FAST;
 8000c18:	2302      	movs	r3, #2
 8000c1a:	623b      	str	r3, [r7, #32]
  
  HAL_GPIO_Init(GPIO_PORT[Led], &GPIO_InitStruct);
 8000c1c:	79fb      	ldrb	r3, [r7, #7]
 8000c1e:	4a0e      	ldr	r2, [pc, #56]	; (8000c58 <BSP_LED_Init+0x9c>)
 8000c20:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000c24:	f107 0214 	add.w	r2, r7, #20
 8000c28:	4611      	mov	r1, r2
 8000c2a:	4618      	mov	r0, r3
 8000c2c:	f000 fa9e 	bl	800116c <HAL_GPIO_Init>
  HAL_GPIO_WritePin(GPIO_PORT[Led], GPIO_PIN[Led], GPIO_PIN_RESET); 
 8000c30:	79fb      	ldrb	r3, [r7, #7]
 8000c32:	4a09      	ldr	r2, [pc, #36]	; (8000c58 <BSP_LED_Init+0x9c>)
 8000c34:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8000c38:	79fb      	ldrb	r3, [r7, #7]
 8000c3a:	4a06      	ldr	r2, [pc, #24]	; (8000c54 <BSP_LED_Init+0x98>)
 8000c3c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000c40:	2200      	movs	r2, #0
 8000c42:	4619      	mov	r1, r3
 8000c44:	f000 fc53 	bl	80014ee <HAL_GPIO_WritePin>
}
 8000c48:	bf00      	nop
 8000c4a:	3728      	adds	r7, #40	; 0x28
 8000c4c:	46bd      	mov	sp, r7
 8000c4e:	bd80      	pop	{r7, pc}
 8000c50:	40023800 	.word	0x40023800
 8000c54:	08002aac 	.word	0x08002aac
 8000c58:	20000000 	.word	0x20000000

08000c5c <BSP_LED_On>:
  * @param  Led: Specifies the Led to be set on. 
  *   This parameter can be one of following parameters:
  *     @arg LED2
  */
void BSP_LED_On(Led_TypeDef Led)
{
 8000c5c:	b580      	push	{r7, lr}
 8000c5e:	b082      	sub	sp, #8
 8000c60:	af00      	add	r7, sp, #0
 8000c62:	4603      	mov	r3, r0
 8000c64:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_WritePin(GPIO_PORT[Led], GPIO_PIN[Led], GPIO_PIN_SET); 
 8000c66:	79fb      	ldrb	r3, [r7, #7]
 8000c68:	4a07      	ldr	r2, [pc, #28]	; (8000c88 <BSP_LED_On+0x2c>)
 8000c6a:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8000c6e:	79fb      	ldrb	r3, [r7, #7]
 8000c70:	4a06      	ldr	r2, [pc, #24]	; (8000c8c <BSP_LED_On+0x30>)
 8000c72:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000c76:	2201      	movs	r2, #1
 8000c78:	4619      	mov	r1, r3
 8000c7a:	f000 fc38 	bl	80014ee <HAL_GPIO_WritePin>
}
 8000c7e:	bf00      	nop
 8000c80:	3708      	adds	r7, #8
 8000c82:	46bd      	mov	sp, r7
 8000c84:	bd80      	pop	{r7, pc}
 8000c86:	bf00      	nop
 8000c88:	20000000 	.word	0x20000000
 8000c8c:	08002aac 	.word	0x08002aac

08000c90 <BSP_LED_Off>:
  *     @arg  LED1
  *     @arg  LED2
  *     @arg  LED3
  */
void BSP_LED_Off(Led_TypeDef Led)
{
 8000c90:	b580      	push	{r7, lr}
 8000c92:	b082      	sub	sp, #8
 8000c94:	af00      	add	r7, sp, #0
 8000c96:	4603      	mov	r3, r0
 8000c98:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_WritePin(GPIO_PORT[Led], GPIO_PIN[Led], GPIO_PIN_RESET); 
 8000c9a:	79fb      	ldrb	r3, [r7, #7]
 8000c9c:	4a07      	ldr	r2, [pc, #28]	; (8000cbc <BSP_LED_Off+0x2c>)
 8000c9e:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8000ca2:	79fb      	ldrb	r3, [r7, #7]
 8000ca4:	4a06      	ldr	r2, [pc, #24]	; (8000cc0 <BSP_LED_Off+0x30>)
 8000ca6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000caa:	2200      	movs	r2, #0
 8000cac:	4619      	mov	r1, r3
 8000cae:	f000 fc1e 	bl	80014ee <HAL_GPIO_WritePin>
}
 8000cb2:	bf00      	nop
 8000cb4:	3708      	adds	r7, #8
 8000cb6:	46bd      	mov	sp, r7
 8000cb8:	bd80      	pop	{r7, pc}
 8000cba:	bf00      	nop
 8000cbc:	20000000 	.word	0x20000000
 8000cc0:	08002aac 	.word	0x08002aac

08000cc4 <BSP_LED_Toggle>:
  *     @arg  LED1
  *     @arg  LED2
  *     @arg  LED3 
  */
void BSP_LED_Toggle(Led_TypeDef Led)
{
 8000cc4:	b580      	push	{r7, lr}
 8000cc6:	b082      	sub	sp, #8
 8000cc8:	af00      	add	r7, sp, #0
 8000cca:	4603      	mov	r3, r0
 8000ccc:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_TogglePin(GPIO_PORT[Led], GPIO_PIN[Led]);
 8000cce:	79fb      	ldrb	r3, [r7, #7]
 8000cd0:	4a07      	ldr	r2, [pc, #28]	; (8000cf0 <BSP_LED_Toggle+0x2c>)
 8000cd2:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000cd6:	79fb      	ldrb	r3, [r7, #7]
 8000cd8:	4906      	ldr	r1, [pc, #24]	; (8000cf4 <BSP_LED_Toggle+0x30>)
 8000cda:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8000cde:	4619      	mov	r1, r3
 8000ce0:	4610      	mov	r0, r2
 8000ce2:	f000 fc1c 	bl	800151e <HAL_GPIO_TogglePin>
}
 8000ce6:	bf00      	nop
 8000ce8:	3708      	adds	r7, #8
 8000cea:	46bd      	mov	sp, r7
 8000cec:	bd80      	pop	{r7, pc}
 8000cee:	bf00      	nop
 8000cf0:	20000000 	.word	0x20000000
 8000cf4:	08002aac 	.word	0x08002aac

08000cf8 <BSP_PB_Init>:
  *     @arg BUTTON_MODE_GPIO: Button will be used as simple IO 
  *     @arg BUTTON_MODE_EXTI: Button will be connected to EXTI line with interrupt
  *                            generation capability  
  */
void BSP_PB_Init(Button_TypeDef Button, ButtonMode_TypeDef ButtonMode)
{
 8000cf8:	b580      	push	{r7, lr}
 8000cfa:	b088      	sub	sp, #32
 8000cfc:	af00      	add	r7, sp, #0
 8000cfe:	4603      	mov	r3, r0
 8000d00:	460a      	mov	r2, r1
 8000d02:	71fb      	strb	r3, [r7, #7]
 8000d04:	4613      	mov	r3, r2
 8000d06:	71bb      	strb	r3, [r7, #6]
  GPIO_InitTypeDef GPIO_InitStruct;
  
  /* Enable the BUTTON Clock */
  BUTTONx_GPIO_CLK_ENABLE(Button);
 8000d08:	2300      	movs	r3, #0
 8000d0a:	60bb      	str	r3, [r7, #8]
 8000d0c:	4b23      	ldr	r3, [pc, #140]	; (8000d9c <BSP_PB_Init+0xa4>)
 8000d0e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d10:	4a22      	ldr	r2, [pc, #136]	; (8000d9c <BSP_PB_Init+0xa4>)
 8000d12:	f043 0304 	orr.w	r3, r3, #4
 8000d16:	6313      	str	r3, [r2, #48]	; 0x30
 8000d18:	4b20      	ldr	r3, [pc, #128]	; (8000d9c <BSP_PB_Init+0xa4>)
 8000d1a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d1c:	f003 0304 	and.w	r3, r3, #4
 8000d20:	60bb      	str	r3, [r7, #8]
 8000d22:	68bb      	ldr	r3, [r7, #8]
  
  if(ButtonMode == BUTTON_MODE_GPIO)
 8000d24:	79bb      	ldrb	r3, [r7, #6]
 8000d26:	2b00      	cmp	r3, #0
 8000d28:	d112      	bne.n	8000d50 <BSP_PB_Init+0x58>
  {
    /* Configure Button pin as input */
    GPIO_InitStruct.Pin = BUTTON_PIN[Button];
 8000d2a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000d2e:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000d30:	2300      	movs	r3, #0
 8000d32:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000d34:	2302      	movs	r3, #2
 8000d36:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FAST;
 8000d38:	2302      	movs	r3, #2
 8000d3a:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(BUTTON_PORT[Button], &GPIO_InitStruct);
 8000d3c:	79fb      	ldrb	r3, [r7, #7]
 8000d3e:	4a18      	ldr	r2, [pc, #96]	; (8000da0 <BSP_PB_Init+0xa8>)
 8000d40:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000d44:	f107 020c 	add.w	r2, r7, #12
 8000d48:	4611      	mov	r1, r2
 8000d4a:	4618      	mov	r0, r3
 8000d4c:	f000 fa0e 	bl	800116c <HAL_GPIO_Init>
  }
  
  if(ButtonMode == BUTTON_MODE_EXTI)
 8000d50:	79bb      	ldrb	r3, [r7, #6]
 8000d52:	2b01      	cmp	r3, #1
 8000d54:	d11d      	bne.n	8000d92 <BSP_PB_Init+0x9a>
  {
    /* Configure Button pin as input with External interrupt */
    GPIO_InitStruct.Pin = BUTTON_PIN[Button];
 8000d56:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000d5a:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d5c:	2300      	movs	r3, #0
 8000d5e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING; 
 8000d60:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000d64:	613b      	str	r3, [r7, #16]
    HAL_GPIO_Init(BUTTON_PORT[Button], &GPIO_InitStruct);
 8000d66:	79fb      	ldrb	r3, [r7, #7]
 8000d68:	4a0d      	ldr	r2, [pc, #52]	; (8000da0 <BSP_PB_Init+0xa8>)
 8000d6a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000d6e:	f107 020c 	add.w	r2, r7, #12
 8000d72:	4611      	mov	r1, r2
 8000d74:	4618      	mov	r0, r3
 8000d76:	f000 f9f9 	bl	800116c <HAL_GPIO_Init>
    
    /* Enable and set Button EXTI Interrupt to the lowest priority */
    HAL_NVIC_SetPriority((IRQn_Type)(BUTTON_IRQn[Button]), 0x0F, 0x00);
 8000d7a:	2328      	movs	r3, #40	; 0x28
 8000d7c:	b25b      	sxtb	r3, r3
 8000d7e:	2200      	movs	r2, #0
 8000d80:	210f      	movs	r1, #15
 8000d82:	4618      	mov	r0, r3
 8000d84:	f000 f9bb 	bl	80010fe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ((IRQn_Type)(BUTTON_IRQn[Button]));
 8000d88:	2328      	movs	r3, #40	; 0x28
 8000d8a:	b25b      	sxtb	r3, r3
 8000d8c:	4618      	mov	r0, r3
 8000d8e:	f000 f9d2 	bl	8001136 <HAL_NVIC_EnableIRQ>
  }
}
 8000d92:	bf00      	nop
 8000d94:	3720      	adds	r7, #32
 8000d96:	46bd      	mov	sp, r7
 8000d98:	bd80      	pop	{r7, pc}
 8000d9a:	bf00      	nop
 8000d9c:	40023800 	.word	0x40023800
 8000da0:	2000000c 	.word	0x2000000c

08000da4 <BSP_PB_GetState>:
  * @param  Button: Specifies the Button to be checked.
  *   This parameter should be: BUTTON_USER  
  * @retval The Button GPIO pin value.
  */
uint32_t BSP_PB_GetState(Button_TypeDef Button)
{
 8000da4:	b580      	push	{r7, lr}
 8000da6:	b082      	sub	sp, #8
 8000da8:	af00      	add	r7, sp, #0
 8000daa:	4603      	mov	r3, r0
 8000dac:	71fb      	strb	r3, [r7, #7]
  return HAL_GPIO_ReadPin(BUTTON_PORT[Button], BUTTON_PIN[Button]);
 8000dae:	79fb      	ldrb	r3, [r7, #7]
 8000db0:	4a06      	ldr	r2, [pc, #24]	; (8000dcc <BSP_PB_GetState+0x28>)
 8000db2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000db6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000dba:	4611      	mov	r1, r2
 8000dbc:	4618      	mov	r0, r3
 8000dbe:	f000 fb7f 	bl	80014c0 <HAL_GPIO_ReadPin>
 8000dc2:	4603      	mov	r3, r0
}
 8000dc4:	4618      	mov	r0, r3
 8000dc6:	3708      	adds	r7, #8
 8000dc8:	46bd      	mov	sp, r7
 8000dca:	bd80      	pop	{r7, pc}
 8000dcc:	2000000c 	.word	0x2000000c

08000dd0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000dd0:	b480      	push	{r7}
 8000dd2:	af00      	add	r7, sp, #0
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8000dd4:	4b12      	ldr	r3, [pc, #72]	; (8000e20 <SystemInit+0x50>)
 8000dd6:	681b      	ldr	r3, [r3, #0]
 8000dd8:	4a11      	ldr	r2, [pc, #68]	; (8000e20 <SystemInit+0x50>)
 8000dda:	f043 0301 	orr.w	r3, r3, #1
 8000dde:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000de0:	4b0f      	ldr	r3, [pc, #60]	; (8000e20 <SystemInit+0x50>)
 8000de2:	2200      	movs	r2, #0
 8000de4:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8000de6:	4b0e      	ldr	r3, [pc, #56]	; (8000e20 <SystemInit+0x50>)
 8000de8:	681b      	ldr	r3, [r3, #0]
 8000dea:	4a0d      	ldr	r2, [pc, #52]	; (8000e20 <SystemInit+0x50>)
 8000dec:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8000df0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000df4:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 8000df6:	4b0a      	ldr	r3, [pc, #40]	; (8000e20 <SystemInit+0x50>)
 8000df8:	4a0a      	ldr	r2, [pc, #40]	; (8000e24 <SystemInit+0x54>)
 8000dfa:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8000dfc:	4b08      	ldr	r3, [pc, #32]	; (8000e20 <SystemInit+0x50>)
 8000dfe:	681b      	ldr	r3, [r3, #0]
 8000e00:	4a07      	ldr	r2, [pc, #28]	; (8000e20 <SystemInit+0x50>)
 8000e02:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000e06:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8000e08:	4b05      	ldr	r3, [pc, #20]	; (8000e20 <SystemInit+0x50>)
 8000e0a:	2200      	movs	r2, #0
 8000e0c:	60da      	str	r2, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000e0e:	4b06      	ldr	r3, [pc, #24]	; (8000e28 <SystemInit+0x58>)
 8000e10:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000e14:	609a      	str	r2, [r3, #8]
#endif
}
 8000e16:	bf00      	nop
 8000e18:	46bd      	mov	sp, r7
 8000e1a:	bc80      	pop	{r7}
 8000e1c:	4770      	bx	lr
 8000e1e:	bf00      	nop
 8000e20:	40023800 	.word	0x40023800
 8000e24:	24003010 	.word	0x24003010
 8000e28:	e000ed00 	.word	0xe000ed00

08000e2c <NMI_Handler>:
  * @brief   This function handles NMI exception.
  * @param  None
  * @retval None
  */
void NMI_Handler(void)
{
 8000e2c:	b480      	push	{r7}
 8000e2e:	af00      	add	r7, sp, #0
}
 8000e30:	bf00      	nop
 8000e32:	46bd      	mov	sp, r7
 8000e34:	bc80      	pop	{r7}
 8000e36:	4770      	bx	lr

08000e38 <HardFault_Handler>:
  * @brief  This function handles Hard Fault exception.
  * @param  None
  * @retval None
  */
void HardFault_Handler(void)
{
 8000e38:	b480      	push	{r7}
 8000e3a:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Hard Fault exception occurs */
  while (1)
 8000e3c:	e7fe      	b.n	8000e3c <HardFault_Handler+0x4>

08000e3e <MemManage_Handler>:
  * @brief  This function handles Memory Manage exception.
  * @param  None
  * @retval None
  */
void MemManage_Handler(void)
{
 8000e3e:	b480      	push	{r7}
 8000e40:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Memory Manage exception occurs */
  while (1)
 8000e42:	e7fe      	b.n	8000e42 <MemManage_Handler+0x4>

08000e44 <BusFault_Handler>:
  * @brief  This function handles Bus Fault exception.
  * @param  None
  * @retval None
  */
void BusFault_Handler(void)
{
 8000e44:	b480      	push	{r7}
 8000e46:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Bus Fault exception occurs */
  while (1)
 8000e48:	e7fe      	b.n	8000e48 <BusFault_Handler+0x4>

08000e4a <UsageFault_Handler>:
  * @brief  This function handles Usage Fault exception.
  * @param  None
  * @retval None
  */
void UsageFault_Handler(void)
{
 8000e4a:	b480      	push	{r7}
 8000e4c:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Usage Fault exception occurs */
  while (1)
 8000e4e:	e7fe      	b.n	8000e4e <UsageFault_Handler+0x4>

08000e50 <SVC_Handler>:
  * @brief  This function handles SVCall exception.
  * @param  None
  * @retval None
  */
void SVC_Handler(void)
{
 8000e50:	b480      	push	{r7}
 8000e52:	af00      	add	r7, sp, #0
}
 8000e54:	bf00      	nop
 8000e56:	46bd      	mov	sp, r7
 8000e58:	bc80      	pop	{r7}
 8000e5a:	4770      	bx	lr

08000e5c <DebugMon_Handler>:
  * @brief  This function handles Debug Monitor exception.
  * @param  None
  * @retval None
  */
void DebugMon_Handler(void)
{
 8000e5c:	b480      	push	{r7}
 8000e5e:	af00      	add	r7, sp, #0
}
 8000e60:	bf00      	nop
 8000e62:	46bd      	mov	sp, r7
 8000e64:	bc80      	pop	{r7}
 8000e66:	4770      	bx	lr

08000e68 <PendSV_Handler>:
  * @brief  This function handles PendSVC exception.
  * @param  None
  * @retval None
  */
void PendSV_Handler(void)
{
 8000e68:	b480      	push	{r7}
 8000e6a:	af00      	add	r7, sp, #0
}
 8000e6c:	bf00      	nop
 8000e6e:	46bd      	mov	sp, r7
 8000e70:	bc80      	pop	{r7}
 8000e72:	4770      	bx	lr

08000e74 <SysTick_Handler>:
  * @brief  This function handles SysTick Handler.
  * @param  None
  * @retval None
  */
void SysTick_Handler(void)
{
 8000e74:	b580      	push	{r7, lr}
 8000e76:	af00      	add	r7, sp, #0
    HAL_IncTick();
 8000e78:	f000 f84e 	bl	8000f18 <HAL_IncTick>
}
 8000e7c:	bf00      	nop
 8000e7e:	bd80      	pop	{r7, pc}

08000e80 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000e80:	b580      	push	{r7, lr}
 8000e82:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000e84:	4b0b      	ldr	r3, [pc, #44]	; (8000eb4 <HAL_Init+0x34>)
 8000e86:	681b      	ldr	r3, [r3, #0]
 8000e88:	4a0a      	ldr	r2, [pc, #40]	; (8000eb4 <HAL_Init+0x34>)
 8000e8a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000e8e:	6013      	str	r3, [r2, #0]
#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000e90:	4b08      	ldr	r3, [pc, #32]	; (8000eb4 <HAL_Init+0x34>)
 8000e92:	681b      	ldr	r3, [r3, #0]
 8000e94:	4a07      	ldr	r2, [pc, #28]	; (8000eb4 <HAL_Init+0x34>)
 8000e96:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000e9a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000e9c:	2003      	movs	r0, #3
 8000e9e:	f000 f923 	bl	80010e8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000ea2:	200f      	movs	r0, #15
 8000ea4:	f000 f808 	bl	8000eb8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000ea8:	f000 fba4 	bl	80015f4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000eac:	2300      	movs	r3, #0
}
 8000eae:	4618      	mov	r0, r3
 8000eb0:	bd80      	pop	{r7, pc}
 8000eb2:	bf00      	nop
 8000eb4:	40023c00 	.word	0x40023c00

08000eb8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000eb8:	b580      	push	{r7, lr}
 8000eba:	b082      	sub	sp, #8
 8000ebc:	af00      	add	r7, sp, #0
 8000ebe:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000ec0:	4b12      	ldr	r3, [pc, #72]	; (8000f0c <HAL_InitTick+0x54>)
 8000ec2:	681a      	ldr	r2, [r3, #0]
 8000ec4:	4b12      	ldr	r3, [pc, #72]	; (8000f10 <HAL_InitTick+0x58>)
 8000ec6:	781b      	ldrb	r3, [r3, #0]
 8000ec8:	4619      	mov	r1, r3
 8000eca:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000ece:	fbb3 f3f1 	udiv	r3, r3, r1
 8000ed2:	fbb2 f3f3 	udiv	r3, r2, r3
 8000ed6:	4618      	mov	r0, r3
 8000ed8:	f000 f93b 	bl	8001152 <HAL_SYSTICK_Config>
 8000edc:	4603      	mov	r3, r0
 8000ede:	2b00      	cmp	r3, #0
 8000ee0:	d001      	beq.n	8000ee6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000ee2:	2301      	movs	r3, #1
 8000ee4:	e00e      	b.n	8000f04 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000ee6:	687b      	ldr	r3, [r7, #4]
 8000ee8:	2b0f      	cmp	r3, #15
 8000eea:	d80a      	bhi.n	8000f02 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000eec:	2200      	movs	r2, #0
 8000eee:	6879      	ldr	r1, [r7, #4]
 8000ef0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000ef4:	f000 f903 	bl	80010fe <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000ef8:	4a06      	ldr	r2, [pc, #24]	; (8000f14 <HAL_InitTick+0x5c>)
 8000efa:	687b      	ldr	r3, [r7, #4]
 8000efc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000efe:	2300      	movs	r3, #0
 8000f00:	e000      	b.n	8000f04 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000f02:	2301      	movs	r3, #1
}
 8000f04:	4618      	mov	r0, r3
 8000f06:	3708      	adds	r7, #8
 8000f08:	46bd      	mov	sp, r7
 8000f0a:	bd80      	pop	{r7, pc}
 8000f0c:	20000010 	.word	0x20000010
 8000f10:	20000018 	.word	0x20000018
 8000f14:	20000014 	.word	0x20000014

08000f18 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000f18:	b480      	push	{r7}
 8000f1a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000f1c:	4b05      	ldr	r3, [pc, #20]	; (8000f34 <HAL_IncTick+0x1c>)
 8000f1e:	781b      	ldrb	r3, [r3, #0]
 8000f20:	461a      	mov	r2, r3
 8000f22:	4b05      	ldr	r3, [pc, #20]	; (8000f38 <HAL_IncTick+0x20>)
 8000f24:	681b      	ldr	r3, [r3, #0]
 8000f26:	4413      	add	r3, r2
 8000f28:	4a03      	ldr	r2, [pc, #12]	; (8000f38 <HAL_IncTick+0x20>)
 8000f2a:	6013      	str	r3, [r2, #0]
}
 8000f2c:	bf00      	nop
 8000f2e:	46bd      	mov	sp, r7
 8000f30:	bc80      	pop	{r7}
 8000f32:	4770      	bx	lr
 8000f34:	20000018 	.word	0x20000018
 8000f38:	200000c4 	.word	0x200000c4

08000f3c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000f3c:	b480      	push	{r7}
 8000f3e:	af00      	add	r7, sp, #0
  return uwTick;
 8000f40:	4b02      	ldr	r3, [pc, #8]	; (8000f4c <HAL_GetTick+0x10>)
 8000f42:	681b      	ldr	r3, [r3, #0]
}
 8000f44:	4618      	mov	r0, r3
 8000f46:	46bd      	mov	sp, r7
 8000f48:	bc80      	pop	{r7}
 8000f4a:	4770      	bx	lr
 8000f4c:	200000c4 	.word	0x200000c4

08000f50 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f50:	b480      	push	{r7}
 8000f52:	b085      	sub	sp, #20
 8000f54:	af00      	add	r7, sp, #0
 8000f56:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000f58:	687b      	ldr	r3, [r7, #4]
 8000f5a:	f003 0307 	and.w	r3, r3, #7
 8000f5e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000f60:	4b0c      	ldr	r3, [pc, #48]	; (8000f94 <__NVIC_SetPriorityGrouping+0x44>)
 8000f62:	68db      	ldr	r3, [r3, #12]
 8000f64:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000f66:	68ba      	ldr	r2, [r7, #8]
 8000f68:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000f6c:	4013      	ands	r3, r2
 8000f6e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000f70:	68fb      	ldr	r3, [r7, #12]
 8000f72:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000f74:	68bb      	ldr	r3, [r7, #8]
 8000f76:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000f78:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000f7c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000f80:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000f82:	4a04      	ldr	r2, [pc, #16]	; (8000f94 <__NVIC_SetPriorityGrouping+0x44>)
 8000f84:	68bb      	ldr	r3, [r7, #8]
 8000f86:	60d3      	str	r3, [r2, #12]
}
 8000f88:	bf00      	nop
 8000f8a:	3714      	adds	r7, #20
 8000f8c:	46bd      	mov	sp, r7
 8000f8e:	bc80      	pop	{r7}
 8000f90:	4770      	bx	lr
 8000f92:	bf00      	nop
 8000f94:	e000ed00 	.word	0xe000ed00

08000f98 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000f98:	b480      	push	{r7}
 8000f9a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000f9c:	4b04      	ldr	r3, [pc, #16]	; (8000fb0 <__NVIC_GetPriorityGrouping+0x18>)
 8000f9e:	68db      	ldr	r3, [r3, #12]
 8000fa0:	0a1b      	lsrs	r3, r3, #8
 8000fa2:	f003 0307 	and.w	r3, r3, #7
}
 8000fa6:	4618      	mov	r0, r3
 8000fa8:	46bd      	mov	sp, r7
 8000faa:	bc80      	pop	{r7}
 8000fac:	4770      	bx	lr
 8000fae:	bf00      	nop
 8000fb0:	e000ed00 	.word	0xe000ed00

08000fb4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000fb4:	b480      	push	{r7}
 8000fb6:	b083      	sub	sp, #12
 8000fb8:	af00      	add	r7, sp, #0
 8000fba:	4603      	mov	r3, r0
 8000fbc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000fbe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fc2:	2b00      	cmp	r3, #0
 8000fc4:	db0b      	blt.n	8000fde <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000fc6:	79fb      	ldrb	r3, [r7, #7]
 8000fc8:	f003 021f 	and.w	r2, r3, #31
 8000fcc:	4906      	ldr	r1, [pc, #24]	; (8000fe8 <__NVIC_EnableIRQ+0x34>)
 8000fce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fd2:	095b      	lsrs	r3, r3, #5
 8000fd4:	2001      	movs	r0, #1
 8000fd6:	fa00 f202 	lsl.w	r2, r0, r2
 8000fda:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000fde:	bf00      	nop
 8000fe0:	370c      	adds	r7, #12
 8000fe2:	46bd      	mov	sp, r7
 8000fe4:	bc80      	pop	{r7}
 8000fe6:	4770      	bx	lr
 8000fe8:	e000e100 	.word	0xe000e100

08000fec <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000fec:	b480      	push	{r7}
 8000fee:	b083      	sub	sp, #12
 8000ff0:	af00      	add	r7, sp, #0
 8000ff2:	4603      	mov	r3, r0
 8000ff4:	6039      	str	r1, [r7, #0]
 8000ff6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000ff8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ffc:	2b00      	cmp	r3, #0
 8000ffe:	db0a      	blt.n	8001016 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001000:	683b      	ldr	r3, [r7, #0]
 8001002:	b2da      	uxtb	r2, r3
 8001004:	490c      	ldr	r1, [pc, #48]	; (8001038 <__NVIC_SetPriority+0x4c>)
 8001006:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800100a:	0112      	lsls	r2, r2, #4
 800100c:	b2d2      	uxtb	r2, r2
 800100e:	440b      	add	r3, r1
 8001010:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001014:	e00a      	b.n	800102c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001016:	683b      	ldr	r3, [r7, #0]
 8001018:	b2da      	uxtb	r2, r3
 800101a:	4908      	ldr	r1, [pc, #32]	; (800103c <__NVIC_SetPriority+0x50>)
 800101c:	79fb      	ldrb	r3, [r7, #7]
 800101e:	f003 030f 	and.w	r3, r3, #15
 8001022:	3b04      	subs	r3, #4
 8001024:	0112      	lsls	r2, r2, #4
 8001026:	b2d2      	uxtb	r2, r2
 8001028:	440b      	add	r3, r1
 800102a:	761a      	strb	r2, [r3, #24]
}
 800102c:	bf00      	nop
 800102e:	370c      	adds	r7, #12
 8001030:	46bd      	mov	sp, r7
 8001032:	bc80      	pop	{r7}
 8001034:	4770      	bx	lr
 8001036:	bf00      	nop
 8001038:	e000e100 	.word	0xe000e100
 800103c:	e000ed00 	.word	0xe000ed00

08001040 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001040:	b480      	push	{r7}
 8001042:	b089      	sub	sp, #36	; 0x24
 8001044:	af00      	add	r7, sp, #0
 8001046:	60f8      	str	r0, [r7, #12]
 8001048:	60b9      	str	r1, [r7, #8]
 800104a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800104c:	68fb      	ldr	r3, [r7, #12]
 800104e:	f003 0307 	and.w	r3, r3, #7
 8001052:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001054:	69fb      	ldr	r3, [r7, #28]
 8001056:	f1c3 0307 	rsb	r3, r3, #7
 800105a:	2b04      	cmp	r3, #4
 800105c:	bf28      	it	cs
 800105e:	2304      	movcs	r3, #4
 8001060:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001062:	69fb      	ldr	r3, [r7, #28]
 8001064:	3304      	adds	r3, #4
 8001066:	2b06      	cmp	r3, #6
 8001068:	d902      	bls.n	8001070 <NVIC_EncodePriority+0x30>
 800106a:	69fb      	ldr	r3, [r7, #28]
 800106c:	3b03      	subs	r3, #3
 800106e:	e000      	b.n	8001072 <NVIC_EncodePriority+0x32>
 8001070:	2300      	movs	r3, #0
 8001072:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001074:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001078:	69bb      	ldr	r3, [r7, #24]
 800107a:	fa02 f303 	lsl.w	r3, r2, r3
 800107e:	43da      	mvns	r2, r3
 8001080:	68bb      	ldr	r3, [r7, #8]
 8001082:	401a      	ands	r2, r3
 8001084:	697b      	ldr	r3, [r7, #20]
 8001086:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001088:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800108c:	697b      	ldr	r3, [r7, #20]
 800108e:	fa01 f303 	lsl.w	r3, r1, r3
 8001092:	43d9      	mvns	r1, r3
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001098:	4313      	orrs	r3, r2
         );
}
 800109a:	4618      	mov	r0, r3
 800109c:	3724      	adds	r7, #36	; 0x24
 800109e:	46bd      	mov	sp, r7
 80010a0:	bc80      	pop	{r7}
 80010a2:	4770      	bx	lr

080010a4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80010a4:	b580      	push	{r7, lr}
 80010a6:	b082      	sub	sp, #8
 80010a8:	af00      	add	r7, sp, #0
 80010aa:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	3b01      	subs	r3, #1
 80010b0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80010b4:	d301      	bcc.n	80010ba <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80010b6:	2301      	movs	r3, #1
 80010b8:	e00f      	b.n	80010da <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80010ba:	4a0a      	ldr	r2, [pc, #40]	; (80010e4 <SysTick_Config+0x40>)
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	3b01      	subs	r3, #1
 80010c0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80010c2:	210f      	movs	r1, #15
 80010c4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80010c8:	f7ff ff90 	bl	8000fec <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80010cc:	4b05      	ldr	r3, [pc, #20]	; (80010e4 <SysTick_Config+0x40>)
 80010ce:	2200      	movs	r2, #0
 80010d0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80010d2:	4b04      	ldr	r3, [pc, #16]	; (80010e4 <SysTick_Config+0x40>)
 80010d4:	2207      	movs	r2, #7
 80010d6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80010d8:	2300      	movs	r3, #0
}
 80010da:	4618      	mov	r0, r3
 80010dc:	3708      	adds	r7, #8
 80010de:	46bd      	mov	sp, r7
 80010e0:	bd80      	pop	{r7, pc}
 80010e2:	bf00      	nop
 80010e4:	e000e010 	.word	0xe000e010

080010e8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80010e8:	b580      	push	{r7, lr}
 80010ea:	b082      	sub	sp, #8
 80010ec:	af00      	add	r7, sp, #0
 80010ee:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80010f0:	6878      	ldr	r0, [r7, #4]
 80010f2:	f7ff ff2d 	bl	8000f50 <__NVIC_SetPriorityGrouping>
}
 80010f6:	bf00      	nop
 80010f8:	3708      	adds	r7, #8
 80010fa:	46bd      	mov	sp, r7
 80010fc:	bd80      	pop	{r7, pc}

080010fe <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80010fe:	b580      	push	{r7, lr}
 8001100:	b086      	sub	sp, #24
 8001102:	af00      	add	r7, sp, #0
 8001104:	4603      	mov	r3, r0
 8001106:	60b9      	str	r1, [r7, #8]
 8001108:	607a      	str	r2, [r7, #4]
 800110a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800110c:	2300      	movs	r3, #0
 800110e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001110:	f7ff ff42 	bl	8000f98 <__NVIC_GetPriorityGrouping>
 8001114:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001116:	687a      	ldr	r2, [r7, #4]
 8001118:	68b9      	ldr	r1, [r7, #8]
 800111a:	6978      	ldr	r0, [r7, #20]
 800111c:	f7ff ff90 	bl	8001040 <NVIC_EncodePriority>
 8001120:	4602      	mov	r2, r0
 8001122:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001126:	4611      	mov	r1, r2
 8001128:	4618      	mov	r0, r3
 800112a:	f7ff ff5f 	bl	8000fec <__NVIC_SetPriority>
}
 800112e:	bf00      	nop
 8001130:	3718      	adds	r7, #24
 8001132:	46bd      	mov	sp, r7
 8001134:	bd80      	pop	{r7, pc}

08001136 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001136:	b580      	push	{r7, lr}
 8001138:	b082      	sub	sp, #8
 800113a:	af00      	add	r7, sp, #0
 800113c:	4603      	mov	r3, r0
 800113e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001140:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001144:	4618      	mov	r0, r3
 8001146:	f7ff ff35 	bl	8000fb4 <__NVIC_EnableIRQ>
}
 800114a:	bf00      	nop
 800114c:	3708      	adds	r7, #8
 800114e:	46bd      	mov	sp, r7
 8001150:	bd80      	pop	{r7, pc}

08001152 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001152:	b580      	push	{r7, lr}
 8001154:	b082      	sub	sp, #8
 8001156:	af00      	add	r7, sp, #0
 8001158:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800115a:	6878      	ldr	r0, [r7, #4]
 800115c:	f7ff ffa2 	bl	80010a4 <SysTick_Config>
 8001160:	4603      	mov	r3, r0
}
 8001162:	4618      	mov	r0, r3
 8001164:	3708      	adds	r7, #8
 8001166:	46bd      	mov	sp, r7
 8001168:	bd80      	pop	{r7, pc}
	...

0800116c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800116c:	b480      	push	{r7}
 800116e:	b089      	sub	sp, #36	; 0x24
 8001170:	af00      	add	r7, sp, #0
 8001172:	6078      	str	r0, [r7, #4]
 8001174:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001176:	2300      	movs	r3, #0
 8001178:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800117a:	2300      	movs	r3, #0
 800117c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800117e:	2300      	movs	r3, #0
 8001180:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001182:	2300      	movs	r3, #0
 8001184:	61fb      	str	r3, [r7, #28]
 8001186:	e177      	b.n	8001478 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001188:	2201      	movs	r2, #1
 800118a:	69fb      	ldr	r3, [r7, #28]
 800118c:	fa02 f303 	lsl.w	r3, r2, r3
 8001190:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001192:	683b      	ldr	r3, [r7, #0]
 8001194:	681b      	ldr	r3, [r3, #0]
 8001196:	697a      	ldr	r2, [r7, #20]
 8001198:	4013      	ands	r3, r2
 800119a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800119c:	693a      	ldr	r2, [r7, #16]
 800119e:	697b      	ldr	r3, [r7, #20]
 80011a0:	429a      	cmp	r2, r3
 80011a2:	f040 8166 	bne.w	8001472 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80011a6:	683b      	ldr	r3, [r7, #0]
 80011a8:	685b      	ldr	r3, [r3, #4]
 80011aa:	f003 0303 	and.w	r3, r3, #3
 80011ae:	2b01      	cmp	r3, #1
 80011b0:	d005      	beq.n	80011be <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80011b2:	683b      	ldr	r3, [r7, #0]
 80011b4:	685b      	ldr	r3, [r3, #4]
 80011b6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80011ba:	2b02      	cmp	r3, #2
 80011bc:	d130      	bne.n	8001220 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	689b      	ldr	r3, [r3, #8]
 80011c2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80011c4:	69fb      	ldr	r3, [r7, #28]
 80011c6:	005b      	lsls	r3, r3, #1
 80011c8:	2203      	movs	r2, #3
 80011ca:	fa02 f303 	lsl.w	r3, r2, r3
 80011ce:	43db      	mvns	r3, r3
 80011d0:	69ba      	ldr	r2, [r7, #24]
 80011d2:	4013      	ands	r3, r2
 80011d4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80011d6:	683b      	ldr	r3, [r7, #0]
 80011d8:	68da      	ldr	r2, [r3, #12]
 80011da:	69fb      	ldr	r3, [r7, #28]
 80011dc:	005b      	lsls	r3, r3, #1
 80011de:	fa02 f303 	lsl.w	r3, r2, r3
 80011e2:	69ba      	ldr	r2, [r7, #24]
 80011e4:	4313      	orrs	r3, r2
 80011e6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	69ba      	ldr	r2, [r7, #24]
 80011ec:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	685b      	ldr	r3, [r3, #4]
 80011f2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80011f4:	2201      	movs	r2, #1
 80011f6:	69fb      	ldr	r3, [r7, #28]
 80011f8:	fa02 f303 	lsl.w	r3, r2, r3
 80011fc:	43db      	mvns	r3, r3
 80011fe:	69ba      	ldr	r2, [r7, #24]
 8001200:	4013      	ands	r3, r2
 8001202:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001204:	683b      	ldr	r3, [r7, #0]
 8001206:	685b      	ldr	r3, [r3, #4]
 8001208:	091b      	lsrs	r3, r3, #4
 800120a:	f003 0201 	and.w	r2, r3, #1
 800120e:	69fb      	ldr	r3, [r7, #28]
 8001210:	fa02 f303 	lsl.w	r3, r2, r3
 8001214:	69ba      	ldr	r2, [r7, #24]
 8001216:	4313      	orrs	r3, r2
 8001218:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	69ba      	ldr	r2, [r7, #24]
 800121e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001220:	683b      	ldr	r3, [r7, #0]
 8001222:	685b      	ldr	r3, [r3, #4]
 8001224:	f003 0303 	and.w	r3, r3, #3
 8001228:	2b03      	cmp	r3, #3
 800122a:	d017      	beq.n	800125c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	68db      	ldr	r3, [r3, #12]
 8001230:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001232:	69fb      	ldr	r3, [r7, #28]
 8001234:	005b      	lsls	r3, r3, #1
 8001236:	2203      	movs	r2, #3
 8001238:	fa02 f303 	lsl.w	r3, r2, r3
 800123c:	43db      	mvns	r3, r3
 800123e:	69ba      	ldr	r2, [r7, #24]
 8001240:	4013      	ands	r3, r2
 8001242:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001244:	683b      	ldr	r3, [r7, #0]
 8001246:	689a      	ldr	r2, [r3, #8]
 8001248:	69fb      	ldr	r3, [r7, #28]
 800124a:	005b      	lsls	r3, r3, #1
 800124c:	fa02 f303 	lsl.w	r3, r2, r3
 8001250:	69ba      	ldr	r2, [r7, #24]
 8001252:	4313      	orrs	r3, r2
 8001254:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	69ba      	ldr	r2, [r7, #24]
 800125a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800125c:	683b      	ldr	r3, [r7, #0]
 800125e:	685b      	ldr	r3, [r3, #4]
 8001260:	f003 0303 	and.w	r3, r3, #3
 8001264:	2b02      	cmp	r3, #2
 8001266:	d123      	bne.n	80012b0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001268:	69fb      	ldr	r3, [r7, #28]
 800126a:	08da      	lsrs	r2, r3, #3
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	3208      	adds	r2, #8
 8001270:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001274:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001276:	69fb      	ldr	r3, [r7, #28]
 8001278:	f003 0307 	and.w	r3, r3, #7
 800127c:	009b      	lsls	r3, r3, #2
 800127e:	220f      	movs	r2, #15
 8001280:	fa02 f303 	lsl.w	r3, r2, r3
 8001284:	43db      	mvns	r3, r3
 8001286:	69ba      	ldr	r2, [r7, #24]
 8001288:	4013      	ands	r3, r2
 800128a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800128c:	683b      	ldr	r3, [r7, #0]
 800128e:	691a      	ldr	r2, [r3, #16]
 8001290:	69fb      	ldr	r3, [r7, #28]
 8001292:	f003 0307 	and.w	r3, r3, #7
 8001296:	009b      	lsls	r3, r3, #2
 8001298:	fa02 f303 	lsl.w	r3, r2, r3
 800129c:	69ba      	ldr	r2, [r7, #24]
 800129e:	4313      	orrs	r3, r2
 80012a0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80012a2:	69fb      	ldr	r3, [r7, #28]
 80012a4:	08da      	lsrs	r2, r3, #3
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	3208      	adds	r2, #8
 80012aa:	69b9      	ldr	r1, [r7, #24]
 80012ac:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	681b      	ldr	r3, [r3, #0]
 80012b4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80012b6:	69fb      	ldr	r3, [r7, #28]
 80012b8:	005b      	lsls	r3, r3, #1
 80012ba:	2203      	movs	r2, #3
 80012bc:	fa02 f303 	lsl.w	r3, r2, r3
 80012c0:	43db      	mvns	r3, r3
 80012c2:	69ba      	ldr	r2, [r7, #24]
 80012c4:	4013      	ands	r3, r2
 80012c6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80012c8:	683b      	ldr	r3, [r7, #0]
 80012ca:	685b      	ldr	r3, [r3, #4]
 80012cc:	f003 0203 	and.w	r2, r3, #3
 80012d0:	69fb      	ldr	r3, [r7, #28]
 80012d2:	005b      	lsls	r3, r3, #1
 80012d4:	fa02 f303 	lsl.w	r3, r2, r3
 80012d8:	69ba      	ldr	r2, [r7, #24]
 80012da:	4313      	orrs	r3, r2
 80012dc:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	69ba      	ldr	r2, [r7, #24]
 80012e2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80012e4:	683b      	ldr	r3, [r7, #0]
 80012e6:	685b      	ldr	r3, [r3, #4]
 80012e8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80012ec:	2b00      	cmp	r3, #0
 80012ee:	f000 80c0 	beq.w	8001472 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80012f2:	2300      	movs	r3, #0
 80012f4:	60fb      	str	r3, [r7, #12]
 80012f6:	4b65      	ldr	r3, [pc, #404]	; (800148c <HAL_GPIO_Init+0x320>)
 80012f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012fa:	4a64      	ldr	r2, [pc, #400]	; (800148c <HAL_GPIO_Init+0x320>)
 80012fc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001300:	6453      	str	r3, [r2, #68]	; 0x44
 8001302:	4b62      	ldr	r3, [pc, #392]	; (800148c <HAL_GPIO_Init+0x320>)
 8001304:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001306:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800130a:	60fb      	str	r3, [r7, #12]
 800130c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800130e:	4a60      	ldr	r2, [pc, #384]	; (8001490 <HAL_GPIO_Init+0x324>)
 8001310:	69fb      	ldr	r3, [r7, #28]
 8001312:	089b      	lsrs	r3, r3, #2
 8001314:	3302      	adds	r3, #2
 8001316:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800131a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800131c:	69fb      	ldr	r3, [r7, #28]
 800131e:	f003 0303 	and.w	r3, r3, #3
 8001322:	009b      	lsls	r3, r3, #2
 8001324:	220f      	movs	r2, #15
 8001326:	fa02 f303 	lsl.w	r3, r2, r3
 800132a:	43db      	mvns	r3, r3
 800132c:	69ba      	ldr	r2, [r7, #24]
 800132e:	4013      	ands	r3, r2
 8001330:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	4a57      	ldr	r2, [pc, #348]	; (8001494 <HAL_GPIO_Init+0x328>)
 8001336:	4293      	cmp	r3, r2
 8001338:	d037      	beq.n	80013aa <HAL_GPIO_Init+0x23e>
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	4a56      	ldr	r2, [pc, #344]	; (8001498 <HAL_GPIO_Init+0x32c>)
 800133e:	4293      	cmp	r3, r2
 8001340:	d031      	beq.n	80013a6 <HAL_GPIO_Init+0x23a>
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	4a55      	ldr	r2, [pc, #340]	; (800149c <HAL_GPIO_Init+0x330>)
 8001346:	4293      	cmp	r3, r2
 8001348:	d02b      	beq.n	80013a2 <HAL_GPIO_Init+0x236>
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	4a54      	ldr	r2, [pc, #336]	; (80014a0 <HAL_GPIO_Init+0x334>)
 800134e:	4293      	cmp	r3, r2
 8001350:	d025      	beq.n	800139e <HAL_GPIO_Init+0x232>
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	4a53      	ldr	r2, [pc, #332]	; (80014a4 <HAL_GPIO_Init+0x338>)
 8001356:	4293      	cmp	r3, r2
 8001358:	d01f      	beq.n	800139a <HAL_GPIO_Init+0x22e>
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	4a52      	ldr	r2, [pc, #328]	; (80014a8 <HAL_GPIO_Init+0x33c>)
 800135e:	4293      	cmp	r3, r2
 8001360:	d019      	beq.n	8001396 <HAL_GPIO_Init+0x22a>
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	4a51      	ldr	r2, [pc, #324]	; (80014ac <HAL_GPIO_Init+0x340>)
 8001366:	4293      	cmp	r3, r2
 8001368:	d013      	beq.n	8001392 <HAL_GPIO_Init+0x226>
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	4a50      	ldr	r2, [pc, #320]	; (80014b0 <HAL_GPIO_Init+0x344>)
 800136e:	4293      	cmp	r3, r2
 8001370:	d00d      	beq.n	800138e <HAL_GPIO_Init+0x222>
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	4a4f      	ldr	r2, [pc, #316]	; (80014b4 <HAL_GPIO_Init+0x348>)
 8001376:	4293      	cmp	r3, r2
 8001378:	d007      	beq.n	800138a <HAL_GPIO_Init+0x21e>
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	4a4e      	ldr	r2, [pc, #312]	; (80014b8 <HAL_GPIO_Init+0x34c>)
 800137e:	4293      	cmp	r3, r2
 8001380:	d101      	bne.n	8001386 <HAL_GPIO_Init+0x21a>
 8001382:	2309      	movs	r3, #9
 8001384:	e012      	b.n	80013ac <HAL_GPIO_Init+0x240>
 8001386:	230a      	movs	r3, #10
 8001388:	e010      	b.n	80013ac <HAL_GPIO_Init+0x240>
 800138a:	2308      	movs	r3, #8
 800138c:	e00e      	b.n	80013ac <HAL_GPIO_Init+0x240>
 800138e:	2307      	movs	r3, #7
 8001390:	e00c      	b.n	80013ac <HAL_GPIO_Init+0x240>
 8001392:	2306      	movs	r3, #6
 8001394:	e00a      	b.n	80013ac <HAL_GPIO_Init+0x240>
 8001396:	2305      	movs	r3, #5
 8001398:	e008      	b.n	80013ac <HAL_GPIO_Init+0x240>
 800139a:	2304      	movs	r3, #4
 800139c:	e006      	b.n	80013ac <HAL_GPIO_Init+0x240>
 800139e:	2303      	movs	r3, #3
 80013a0:	e004      	b.n	80013ac <HAL_GPIO_Init+0x240>
 80013a2:	2302      	movs	r3, #2
 80013a4:	e002      	b.n	80013ac <HAL_GPIO_Init+0x240>
 80013a6:	2301      	movs	r3, #1
 80013a8:	e000      	b.n	80013ac <HAL_GPIO_Init+0x240>
 80013aa:	2300      	movs	r3, #0
 80013ac:	69fa      	ldr	r2, [r7, #28]
 80013ae:	f002 0203 	and.w	r2, r2, #3
 80013b2:	0092      	lsls	r2, r2, #2
 80013b4:	4093      	lsls	r3, r2
 80013b6:	69ba      	ldr	r2, [r7, #24]
 80013b8:	4313      	orrs	r3, r2
 80013ba:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80013bc:	4934      	ldr	r1, [pc, #208]	; (8001490 <HAL_GPIO_Init+0x324>)
 80013be:	69fb      	ldr	r3, [r7, #28]
 80013c0:	089b      	lsrs	r3, r3, #2
 80013c2:	3302      	adds	r3, #2
 80013c4:	69ba      	ldr	r2, [r7, #24]
 80013c6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80013ca:	4b3c      	ldr	r3, [pc, #240]	; (80014bc <HAL_GPIO_Init+0x350>)
 80013cc:	689b      	ldr	r3, [r3, #8]
 80013ce:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80013d0:	693b      	ldr	r3, [r7, #16]
 80013d2:	43db      	mvns	r3, r3
 80013d4:	69ba      	ldr	r2, [r7, #24]
 80013d6:	4013      	ands	r3, r2
 80013d8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80013da:	683b      	ldr	r3, [r7, #0]
 80013dc:	685b      	ldr	r3, [r3, #4]
 80013de:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80013e2:	2b00      	cmp	r3, #0
 80013e4:	d003      	beq.n	80013ee <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80013e6:	69ba      	ldr	r2, [r7, #24]
 80013e8:	693b      	ldr	r3, [r7, #16]
 80013ea:	4313      	orrs	r3, r2
 80013ec:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80013ee:	4a33      	ldr	r2, [pc, #204]	; (80014bc <HAL_GPIO_Init+0x350>)
 80013f0:	69bb      	ldr	r3, [r7, #24]
 80013f2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80013f4:	4b31      	ldr	r3, [pc, #196]	; (80014bc <HAL_GPIO_Init+0x350>)
 80013f6:	68db      	ldr	r3, [r3, #12]
 80013f8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80013fa:	693b      	ldr	r3, [r7, #16]
 80013fc:	43db      	mvns	r3, r3
 80013fe:	69ba      	ldr	r2, [r7, #24]
 8001400:	4013      	ands	r3, r2
 8001402:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001404:	683b      	ldr	r3, [r7, #0]
 8001406:	685b      	ldr	r3, [r3, #4]
 8001408:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800140c:	2b00      	cmp	r3, #0
 800140e:	d003      	beq.n	8001418 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8001410:	69ba      	ldr	r2, [r7, #24]
 8001412:	693b      	ldr	r3, [r7, #16]
 8001414:	4313      	orrs	r3, r2
 8001416:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001418:	4a28      	ldr	r2, [pc, #160]	; (80014bc <HAL_GPIO_Init+0x350>)
 800141a:	69bb      	ldr	r3, [r7, #24]
 800141c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800141e:	4b27      	ldr	r3, [pc, #156]	; (80014bc <HAL_GPIO_Init+0x350>)
 8001420:	685b      	ldr	r3, [r3, #4]
 8001422:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001424:	693b      	ldr	r3, [r7, #16]
 8001426:	43db      	mvns	r3, r3
 8001428:	69ba      	ldr	r2, [r7, #24]
 800142a:	4013      	ands	r3, r2
 800142c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800142e:	683b      	ldr	r3, [r7, #0]
 8001430:	685b      	ldr	r3, [r3, #4]
 8001432:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001436:	2b00      	cmp	r3, #0
 8001438:	d003      	beq.n	8001442 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800143a:	69ba      	ldr	r2, [r7, #24]
 800143c:	693b      	ldr	r3, [r7, #16]
 800143e:	4313      	orrs	r3, r2
 8001440:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001442:	4a1e      	ldr	r2, [pc, #120]	; (80014bc <HAL_GPIO_Init+0x350>)
 8001444:	69bb      	ldr	r3, [r7, #24]
 8001446:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001448:	4b1c      	ldr	r3, [pc, #112]	; (80014bc <HAL_GPIO_Init+0x350>)
 800144a:	681b      	ldr	r3, [r3, #0]
 800144c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800144e:	693b      	ldr	r3, [r7, #16]
 8001450:	43db      	mvns	r3, r3
 8001452:	69ba      	ldr	r2, [r7, #24]
 8001454:	4013      	ands	r3, r2
 8001456:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001458:	683b      	ldr	r3, [r7, #0]
 800145a:	685b      	ldr	r3, [r3, #4]
 800145c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001460:	2b00      	cmp	r3, #0
 8001462:	d003      	beq.n	800146c <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8001464:	69ba      	ldr	r2, [r7, #24]
 8001466:	693b      	ldr	r3, [r7, #16]
 8001468:	4313      	orrs	r3, r2
 800146a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800146c:	4a13      	ldr	r2, [pc, #76]	; (80014bc <HAL_GPIO_Init+0x350>)
 800146e:	69bb      	ldr	r3, [r7, #24]
 8001470:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001472:	69fb      	ldr	r3, [r7, #28]
 8001474:	3301      	adds	r3, #1
 8001476:	61fb      	str	r3, [r7, #28]
 8001478:	69fb      	ldr	r3, [r7, #28]
 800147a:	2b0f      	cmp	r3, #15
 800147c:	f67f ae84 	bls.w	8001188 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001480:	bf00      	nop
 8001482:	bf00      	nop
 8001484:	3724      	adds	r7, #36	; 0x24
 8001486:	46bd      	mov	sp, r7
 8001488:	bc80      	pop	{r7}
 800148a:	4770      	bx	lr
 800148c:	40023800 	.word	0x40023800
 8001490:	40013800 	.word	0x40013800
 8001494:	40020000 	.word	0x40020000
 8001498:	40020400 	.word	0x40020400
 800149c:	40020800 	.word	0x40020800
 80014a0:	40020c00 	.word	0x40020c00
 80014a4:	40021000 	.word	0x40021000
 80014a8:	40021400 	.word	0x40021400
 80014ac:	40021800 	.word	0x40021800
 80014b0:	40021c00 	.word	0x40021c00
 80014b4:	40022000 	.word	0x40022000
 80014b8:	40022400 	.word	0x40022400
 80014bc:	40013c00 	.word	0x40013c00

080014c0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80014c0:	b480      	push	{r7}
 80014c2:	b085      	sub	sp, #20
 80014c4:	af00      	add	r7, sp, #0
 80014c6:	6078      	str	r0, [r7, #4]
 80014c8:	460b      	mov	r3, r1
 80014ca:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	691a      	ldr	r2, [r3, #16]
 80014d0:	887b      	ldrh	r3, [r7, #2]
 80014d2:	4013      	ands	r3, r2
 80014d4:	2b00      	cmp	r3, #0
 80014d6:	d002      	beq.n	80014de <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80014d8:	2301      	movs	r3, #1
 80014da:	73fb      	strb	r3, [r7, #15]
 80014dc:	e001      	b.n	80014e2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80014de:	2300      	movs	r3, #0
 80014e0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80014e2:	7bfb      	ldrb	r3, [r7, #15]
}
 80014e4:	4618      	mov	r0, r3
 80014e6:	3714      	adds	r7, #20
 80014e8:	46bd      	mov	sp, r7
 80014ea:	bc80      	pop	{r7}
 80014ec:	4770      	bx	lr

080014ee <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80014ee:	b480      	push	{r7}
 80014f0:	b083      	sub	sp, #12
 80014f2:	af00      	add	r7, sp, #0
 80014f4:	6078      	str	r0, [r7, #4]
 80014f6:	460b      	mov	r3, r1
 80014f8:	807b      	strh	r3, [r7, #2]
 80014fa:	4613      	mov	r3, r2
 80014fc:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80014fe:	787b      	ldrb	r3, [r7, #1]
 8001500:	2b00      	cmp	r3, #0
 8001502:	d003      	beq.n	800150c <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001504:	887a      	ldrh	r2, [r7, #2]
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800150a:	e003      	b.n	8001514 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800150c:	887b      	ldrh	r3, [r7, #2]
 800150e:	041a      	lsls	r2, r3, #16
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	619a      	str	r2, [r3, #24]
}
 8001514:	bf00      	nop
 8001516:	370c      	adds	r7, #12
 8001518:	46bd      	mov	sp, r7
 800151a:	bc80      	pop	{r7}
 800151c:	4770      	bx	lr

0800151e <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800151e:	b480      	push	{r7}
 8001520:	b085      	sub	sp, #20
 8001522:	af00      	add	r7, sp, #0
 8001524:	6078      	str	r0, [r7, #4]
 8001526:	460b      	mov	r3, r1
 8001528:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	695b      	ldr	r3, [r3, #20]
 800152e:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001530:	887a      	ldrh	r2, [r7, #2]
 8001532:	68fb      	ldr	r3, [r7, #12]
 8001534:	4013      	ands	r3, r2
 8001536:	041a      	lsls	r2, r3, #16
 8001538:	68fb      	ldr	r3, [r7, #12]
 800153a:	43d9      	mvns	r1, r3
 800153c:	887b      	ldrh	r3, [r7, #2]
 800153e:	400b      	ands	r3, r1
 8001540:	431a      	orrs	r2, r3
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	619a      	str	r2, [r3, #24]
}
 8001546:	bf00      	nop
 8001548:	3714      	adds	r7, #20
 800154a:	46bd      	mov	sp, r7
 800154c:	bc80      	pop	{r7}
 800154e:	4770      	bx	lr

08001550 <HAL_UART_MspInit>:
  *           - Peripheral's GPIO Configuration
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef *huart)
{
 8001550:	b580      	push	{r7, lr}
 8001552:	b08a      	sub	sp, #40	; 0x28
 8001554:	af00      	add	r7, sp, #0
 8001556:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef  GPIO_InitStruct;


  /*##-1- Enable peripherals and GPIO Clocks #################################*/
  /* Enable GPIO TX/RX clock */
  USARTx_TX_GPIO_CLK_ENABLE();
 8001558:	2300      	movs	r3, #0
 800155a:	613b      	str	r3, [r7, #16]
 800155c:	4b23      	ldr	r3, [pc, #140]	; (80015ec <HAL_UART_MspInit+0x9c>)
 800155e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001560:	4a22      	ldr	r2, [pc, #136]	; (80015ec <HAL_UART_MspInit+0x9c>)
 8001562:	f043 0308 	orr.w	r3, r3, #8
 8001566:	6313      	str	r3, [r2, #48]	; 0x30
 8001568:	4b20      	ldr	r3, [pc, #128]	; (80015ec <HAL_UART_MspInit+0x9c>)
 800156a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800156c:	f003 0308 	and.w	r3, r3, #8
 8001570:	613b      	str	r3, [r7, #16]
 8001572:	693b      	ldr	r3, [r7, #16]
  USARTx_RX_GPIO_CLK_ENABLE();
 8001574:	2300      	movs	r3, #0
 8001576:	60fb      	str	r3, [r7, #12]
 8001578:	4b1c      	ldr	r3, [pc, #112]	; (80015ec <HAL_UART_MspInit+0x9c>)
 800157a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800157c:	4a1b      	ldr	r2, [pc, #108]	; (80015ec <HAL_UART_MspInit+0x9c>)
 800157e:	f043 0308 	orr.w	r3, r3, #8
 8001582:	6313      	str	r3, [r2, #48]	; 0x30
 8001584:	4b19      	ldr	r3, [pc, #100]	; (80015ec <HAL_UART_MspInit+0x9c>)
 8001586:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001588:	f003 0308 	and.w	r3, r3, #8
 800158c:	60fb      	str	r3, [r7, #12]
 800158e:	68fb      	ldr	r3, [r7, #12]


  /* Enable USARTx clock */
  USARTx_CLK_ENABLE();
 8001590:	2300      	movs	r3, #0
 8001592:	60bb      	str	r3, [r7, #8]
 8001594:	4b15      	ldr	r3, [pc, #84]	; (80015ec <HAL_UART_MspInit+0x9c>)
 8001596:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001598:	4a14      	ldr	r2, [pc, #80]	; (80015ec <HAL_UART_MspInit+0x9c>)
 800159a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800159e:	6413      	str	r3, [r2, #64]	; 0x40
 80015a0:	4b12      	ldr	r3, [pc, #72]	; (80015ec <HAL_UART_MspInit+0x9c>)
 80015a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015a4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80015a8:	60bb      	str	r3, [r7, #8]
 80015aa:	68bb      	ldr	r3, [r7, #8]

  /*##-2- Configure peripheral GPIO ##########################################*/
  /* UART TX GPIO pin configuration  */
  GPIO_InitStruct.Pin       = USARTx_TX_PIN;
 80015ac:	f44f 7380 	mov.w	r3, #256	; 0x100
 80015b0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode      = GPIO_MODE_AF_PP;
 80015b2:	2302      	movs	r3, #2
 80015b4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull      = GPIO_PULLUP;
 80015b6:	2301      	movs	r3, #1
 80015b8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed     = GPIO_SPEED_FREQ_VERY_HIGH;
 80015ba:	2303      	movs	r3, #3
 80015bc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = USARTx_TX_AF;
 80015be:	2307      	movs	r3, #7
 80015c0:	627b      	str	r3, [r7, #36]	; 0x24

  HAL_GPIO_Init(USARTx_TX_GPIO_PORT, &GPIO_InitStruct);
 80015c2:	f107 0314 	add.w	r3, r7, #20
 80015c6:	4619      	mov	r1, r3
 80015c8:	4809      	ldr	r0, [pc, #36]	; (80015f0 <HAL_UART_MspInit+0xa0>)
 80015ca:	f7ff fdcf 	bl	800116c <HAL_GPIO_Init>

  /* UART RX GPIO pin configuration  */
  GPIO_InitStruct.Pin = USARTx_RX_PIN;
 80015ce:	f44f 7300 	mov.w	r3, #512	; 0x200
 80015d2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = USARTx_RX_AF;
 80015d4:	2307      	movs	r3, #7
 80015d6:	627b      	str	r3, [r7, #36]	; 0x24

  HAL_GPIO_Init(USARTx_RX_GPIO_PORT, &GPIO_InitStruct);
 80015d8:	f107 0314 	add.w	r3, r7, #20
 80015dc:	4619      	mov	r1, r3
 80015de:	4804      	ldr	r0, [pc, #16]	; (80015f0 <HAL_UART_MspInit+0xa0>)
 80015e0:	f7ff fdc4 	bl	800116c <HAL_GPIO_Init>
}
 80015e4:	bf00      	nop
 80015e6:	3728      	adds	r7, #40	; 0x28
 80015e8:	46bd      	mov	sp, r7
 80015ea:	bd80      	pop	{r7, pc}
 80015ec:	40023800 	.word	0x40023800
 80015f0:	40020c00 	.word	0x40020c00

080015f4 <HAL_MspInit>:
  * @note   This function is called from HAL_Init() function to perform system
  *         level initialization (GPIOs, clock, DMA, interrupt).
  * @retval None
  */
void HAL_MspInit(void)
{
 80015f4:	b480      	push	{r7}
 80015f6:	af00      	add	r7, sp, #0

}
 80015f8:	bf00      	nop
 80015fa:	46bd      	mov	sp, r7
 80015fc:	bc80      	pop	{r7}
 80015fe:	4770      	bx	lr

08001600 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001600:	b580      	push	{r7, lr}
 8001602:	b086      	sub	sp, #24
 8001604:	af00      	add	r7, sp, #0
 8001606:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	2b00      	cmp	r3, #0
 800160c:	d101      	bne.n	8001612 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800160e:	2301      	movs	r3, #1
 8001610:	e267      	b.n	8001ae2 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	681b      	ldr	r3, [r3, #0]
 8001616:	f003 0301 	and.w	r3, r3, #1
 800161a:	2b00      	cmp	r3, #0
 800161c:	d075      	beq.n	800170a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800161e:	4b88      	ldr	r3, [pc, #544]	; (8001840 <HAL_RCC_OscConfig+0x240>)
 8001620:	689b      	ldr	r3, [r3, #8]
 8001622:	f003 030c 	and.w	r3, r3, #12
 8001626:	2b04      	cmp	r3, #4
 8001628:	d00c      	beq.n	8001644 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800162a:	4b85      	ldr	r3, [pc, #532]	; (8001840 <HAL_RCC_OscConfig+0x240>)
 800162c:	689b      	ldr	r3, [r3, #8]
 800162e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001632:	2b08      	cmp	r3, #8
 8001634:	d112      	bne.n	800165c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001636:	4b82      	ldr	r3, [pc, #520]	; (8001840 <HAL_RCC_OscConfig+0x240>)
 8001638:	685b      	ldr	r3, [r3, #4]
 800163a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800163e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001642:	d10b      	bne.n	800165c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001644:	4b7e      	ldr	r3, [pc, #504]	; (8001840 <HAL_RCC_OscConfig+0x240>)
 8001646:	681b      	ldr	r3, [r3, #0]
 8001648:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800164c:	2b00      	cmp	r3, #0
 800164e:	d05b      	beq.n	8001708 <HAL_RCC_OscConfig+0x108>
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	685b      	ldr	r3, [r3, #4]
 8001654:	2b00      	cmp	r3, #0
 8001656:	d157      	bne.n	8001708 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001658:	2301      	movs	r3, #1
 800165a:	e242      	b.n	8001ae2 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	685b      	ldr	r3, [r3, #4]
 8001660:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001664:	d106      	bne.n	8001674 <HAL_RCC_OscConfig+0x74>
 8001666:	4b76      	ldr	r3, [pc, #472]	; (8001840 <HAL_RCC_OscConfig+0x240>)
 8001668:	681b      	ldr	r3, [r3, #0]
 800166a:	4a75      	ldr	r2, [pc, #468]	; (8001840 <HAL_RCC_OscConfig+0x240>)
 800166c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001670:	6013      	str	r3, [r2, #0]
 8001672:	e01d      	b.n	80016b0 <HAL_RCC_OscConfig+0xb0>
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	685b      	ldr	r3, [r3, #4]
 8001678:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800167c:	d10c      	bne.n	8001698 <HAL_RCC_OscConfig+0x98>
 800167e:	4b70      	ldr	r3, [pc, #448]	; (8001840 <HAL_RCC_OscConfig+0x240>)
 8001680:	681b      	ldr	r3, [r3, #0]
 8001682:	4a6f      	ldr	r2, [pc, #444]	; (8001840 <HAL_RCC_OscConfig+0x240>)
 8001684:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001688:	6013      	str	r3, [r2, #0]
 800168a:	4b6d      	ldr	r3, [pc, #436]	; (8001840 <HAL_RCC_OscConfig+0x240>)
 800168c:	681b      	ldr	r3, [r3, #0]
 800168e:	4a6c      	ldr	r2, [pc, #432]	; (8001840 <HAL_RCC_OscConfig+0x240>)
 8001690:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001694:	6013      	str	r3, [r2, #0]
 8001696:	e00b      	b.n	80016b0 <HAL_RCC_OscConfig+0xb0>
 8001698:	4b69      	ldr	r3, [pc, #420]	; (8001840 <HAL_RCC_OscConfig+0x240>)
 800169a:	681b      	ldr	r3, [r3, #0]
 800169c:	4a68      	ldr	r2, [pc, #416]	; (8001840 <HAL_RCC_OscConfig+0x240>)
 800169e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80016a2:	6013      	str	r3, [r2, #0]
 80016a4:	4b66      	ldr	r3, [pc, #408]	; (8001840 <HAL_RCC_OscConfig+0x240>)
 80016a6:	681b      	ldr	r3, [r3, #0]
 80016a8:	4a65      	ldr	r2, [pc, #404]	; (8001840 <HAL_RCC_OscConfig+0x240>)
 80016aa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80016ae:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	685b      	ldr	r3, [r3, #4]
 80016b4:	2b00      	cmp	r3, #0
 80016b6:	d013      	beq.n	80016e0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80016b8:	f7ff fc40 	bl	8000f3c <HAL_GetTick>
 80016bc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80016be:	e008      	b.n	80016d2 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80016c0:	f7ff fc3c 	bl	8000f3c <HAL_GetTick>
 80016c4:	4602      	mov	r2, r0
 80016c6:	693b      	ldr	r3, [r7, #16]
 80016c8:	1ad3      	subs	r3, r2, r3
 80016ca:	2b64      	cmp	r3, #100	; 0x64
 80016cc:	d901      	bls.n	80016d2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80016ce:	2303      	movs	r3, #3
 80016d0:	e207      	b.n	8001ae2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80016d2:	4b5b      	ldr	r3, [pc, #364]	; (8001840 <HAL_RCC_OscConfig+0x240>)
 80016d4:	681b      	ldr	r3, [r3, #0]
 80016d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80016da:	2b00      	cmp	r3, #0
 80016dc:	d0f0      	beq.n	80016c0 <HAL_RCC_OscConfig+0xc0>
 80016de:	e014      	b.n	800170a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80016e0:	f7ff fc2c 	bl	8000f3c <HAL_GetTick>
 80016e4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80016e6:	e008      	b.n	80016fa <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80016e8:	f7ff fc28 	bl	8000f3c <HAL_GetTick>
 80016ec:	4602      	mov	r2, r0
 80016ee:	693b      	ldr	r3, [r7, #16]
 80016f0:	1ad3      	subs	r3, r2, r3
 80016f2:	2b64      	cmp	r3, #100	; 0x64
 80016f4:	d901      	bls.n	80016fa <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80016f6:	2303      	movs	r3, #3
 80016f8:	e1f3      	b.n	8001ae2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80016fa:	4b51      	ldr	r3, [pc, #324]	; (8001840 <HAL_RCC_OscConfig+0x240>)
 80016fc:	681b      	ldr	r3, [r3, #0]
 80016fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001702:	2b00      	cmp	r3, #0
 8001704:	d1f0      	bne.n	80016e8 <HAL_RCC_OscConfig+0xe8>
 8001706:	e000      	b.n	800170a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001708:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	681b      	ldr	r3, [r3, #0]
 800170e:	f003 0302 	and.w	r3, r3, #2
 8001712:	2b00      	cmp	r3, #0
 8001714:	d063      	beq.n	80017de <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001716:	4b4a      	ldr	r3, [pc, #296]	; (8001840 <HAL_RCC_OscConfig+0x240>)
 8001718:	689b      	ldr	r3, [r3, #8]
 800171a:	f003 030c 	and.w	r3, r3, #12
 800171e:	2b00      	cmp	r3, #0
 8001720:	d00b      	beq.n	800173a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001722:	4b47      	ldr	r3, [pc, #284]	; (8001840 <HAL_RCC_OscConfig+0x240>)
 8001724:	689b      	ldr	r3, [r3, #8]
 8001726:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800172a:	2b08      	cmp	r3, #8
 800172c:	d11c      	bne.n	8001768 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800172e:	4b44      	ldr	r3, [pc, #272]	; (8001840 <HAL_RCC_OscConfig+0x240>)
 8001730:	685b      	ldr	r3, [r3, #4]
 8001732:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001736:	2b00      	cmp	r3, #0
 8001738:	d116      	bne.n	8001768 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800173a:	4b41      	ldr	r3, [pc, #260]	; (8001840 <HAL_RCC_OscConfig+0x240>)
 800173c:	681b      	ldr	r3, [r3, #0]
 800173e:	f003 0302 	and.w	r3, r3, #2
 8001742:	2b00      	cmp	r3, #0
 8001744:	d005      	beq.n	8001752 <HAL_RCC_OscConfig+0x152>
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	68db      	ldr	r3, [r3, #12]
 800174a:	2b01      	cmp	r3, #1
 800174c:	d001      	beq.n	8001752 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800174e:	2301      	movs	r3, #1
 8001750:	e1c7      	b.n	8001ae2 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001752:	4b3b      	ldr	r3, [pc, #236]	; (8001840 <HAL_RCC_OscConfig+0x240>)
 8001754:	681b      	ldr	r3, [r3, #0]
 8001756:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	691b      	ldr	r3, [r3, #16]
 800175e:	00db      	lsls	r3, r3, #3
 8001760:	4937      	ldr	r1, [pc, #220]	; (8001840 <HAL_RCC_OscConfig+0x240>)
 8001762:	4313      	orrs	r3, r2
 8001764:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001766:	e03a      	b.n	80017de <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	68db      	ldr	r3, [r3, #12]
 800176c:	2b00      	cmp	r3, #0
 800176e:	d020      	beq.n	80017b2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001770:	4b34      	ldr	r3, [pc, #208]	; (8001844 <HAL_RCC_OscConfig+0x244>)
 8001772:	2201      	movs	r2, #1
 8001774:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001776:	f7ff fbe1 	bl	8000f3c <HAL_GetTick>
 800177a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800177c:	e008      	b.n	8001790 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800177e:	f7ff fbdd 	bl	8000f3c <HAL_GetTick>
 8001782:	4602      	mov	r2, r0
 8001784:	693b      	ldr	r3, [r7, #16]
 8001786:	1ad3      	subs	r3, r2, r3
 8001788:	2b02      	cmp	r3, #2
 800178a:	d901      	bls.n	8001790 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800178c:	2303      	movs	r3, #3
 800178e:	e1a8      	b.n	8001ae2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001790:	4b2b      	ldr	r3, [pc, #172]	; (8001840 <HAL_RCC_OscConfig+0x240>)
 8001792:	681b      	ldr	r3, [r3, #0]
 8001794:	f003 0302 	and.w	r3, r3, #2
 8001798:	2b00      	cmp	r3, #0
 800179a:	d0f0      	beq.n	800177e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800179c:	4b28      	ldr	r3, [pc, #160]	; (8001840 <HAL_RCC_OscConfig+0x240>)
 800179e:	681b      	ldr	r3, [r3, #0]
 80017a0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	691b      	ldr	r3, [r3, #16]
 80017a8:	00db      	lsls	r3, r3, #3
 80017aa:	4925      	ldr	r1, [pc, #148]	; (8001840 <HAL_RCC_OscConfig+0x240>)
 80017ac:	4313      	orrs	r3, r2
 80017ae:	600b      	str	r3, [r1, #0]
 80017b0:	e015      	b.n	80017de <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80017b2:	4b24      	ldr	r3, [pc, #144]	; (8001844 <HAL_RCC_OscConfig+0x244>)
 80017b4:	2200      	movs	r2, #0
 80017b6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80017b8:	f7ff fbc0 	bl	8000f3c <HAL_GetTick>
 80017bc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80017be:	e008      	b.n	80017d2 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80017c0:	f7ff fbbc 	bl	8000f3c <HAL_GetTick>
 80017c4:	4602      	mov	r2, r0
 80017c6:	693b      	ldr	r3, [r7, #16]
 80017c8:	1ad3      	subs	r3, r2, r3
 80017ca:	2b02      	cmp	r3, #2
 80017cc:	d901      	bls.n	80017d2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80017ce:	2303      	movs	r3, #3
 80017d0:	e187      	b.n	8001ae2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80017d2:	4b1b      	ldr	r3, [pc, #108]	; (8001840 <HAL_RCC_OscConfig+0x240>)
 80017d4:	681b      	ldr	r3, [r3, #0]
 80017d6:	f003 0302 	and.w	r3, r3, #2
 80017da:	2b00      	cmp	r3, #0
 80017dc:	d1f0      	bne.n	80017c0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	681b      	ldr	r3, [r3, #0]
 80017e2:	f003 0308 	and.w	r3, r3, #8
 80017e6:	2b00      	cmp	r3, #0
 80017e8:	d036      	beq.n	8001858 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	695b      	ldr	r3, [r3, #20]
 80017ee:	2b00      	cmp	r3, #0
 80017f0:	d016      	beq.n	8001820 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80017f2:	4b15      	ldr	r3, [pc, #84]	; (8001848 <HAL_RCC_OscConfig+0x248>)
 80017f4:	2201      	movs	r2, #1
 80017f6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80017f8:	f7ff fba0 	bl	8000f3c <HAL_GetTick>
 80017fc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80017fe:	e008      	b.n	8001812 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001800:	f7ff fb9c 	bl	8000f3c <HAL_GetTick>
 8001804:	4602      	mov	r2, r0
 8001806:	693b      	ldr	r3, [r7, #16]
 8001808:	1ad3      	subs	r3, r2, r3
 800180a:	2b02      	cmp	r3, #2
 800180c:	d901      	bls.n	8001812 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800180e:	2303      	movs	r3, #3
 8001810:	e167      	b.n	8001ae2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001812:	4b0b      	ldr	r3, [pc, #44]	; (8001840 <HAL_RCC_OscConfig+0x240>)
 8001814:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001816:	f003 0302 	and.w	r3, r3, #2
 800181a:	2b00      	cmp	r3, #0
 800181c:	d0f0      	beq.n	8001800 <HAL_RCC_OscConfig+0x200>
 800181e:	e01b      	b.n	8001858 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001820:	4b09      	ldr	r3, [pc, #36]	; (8001848 <HAL_RCC_OscConfig+0x248>)
 8001822:	2200      	movs	r2, #0
 8001824:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001826:	f7ff fb89 	bl	8000f3c <HAL_GetTick>
 800182a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800182c:	e00e      	b.n	800184c <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800182e:	f7ff fb85 	bl	8000f3c <HAL_GetTick>
 8001832:	4602      	mov	r2, r0
 8001834:	693b      	ldr	r3, [r7, #16]
 8001836:	1ad3      	subs	r3, r2, r3
 8001838:	2b02      	cmp	r3, #2
 800183a:	d907      	bls.n	800184c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800183c:	2303      	movs	r3, #3
 800183e:	e150      	b.n	8001ae2 <HAL_RCC_OscConfig+0x4e2>
 8001840:	40023800 	.word	0x40023800
 8001844:	42470000 	.word	0x42470000
 8001848:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800184c:	4b88      	ldr	r3, [pc, #544]	; (8001a70 <HAL_RCC_OscConfig+0x470>)
 800184e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001850:	f003 0302 	and.w	r3, r3, #2
 8001854:	2b00      	cmp	r3, #0
 8001856:	d1ea      	bne.n	800182e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	681b      	ldr	r3, [r3, #0]
 800185c:	f003 0304 	and.w	r3, r3, #4
 8001860:	2b00      	cmp	r3, #0
 8001862:	f000 8097 	beq.w	8001994 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001866:	2300      	movs	r3, #0
 8001868:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800186a:	4b81      	ldr	r3, [pc, #516]	; (8001a70 <HAL_RCC_OscConfig+0x470>)
 800186c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800186e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001872:	2b00      	cmp	r3, #0
 8001874:	d10f      	bne.n	8001896 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001876:	2300      	movs	r3, #0
 8001878:	60bb      	str	r3, [r7, #8]
 800187a:	4b7d      	ldr	r3, [pc, #500]	; (8001a70 <HAL_RCC_OscConfig+0x470>)
 800187c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800187e:	4a7c      	ldr	r2, [pc, #496]	; (8001a70 <HAL_RCC_OscConfig+0x470>)
 8001880:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001884:	6413      	str	r3, [r2, #64]	; 0x40
 8001886:	4b7a      	ldr	r3, [pc, #488]	; (8001a70 <HAL_RCC_OscConfig+0x470>)
 8001888:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800188a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800188e:	60bb      	str	r3, [r7, #8]
 8001890:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001892:	2301      	movs	r3, #1
 8001894:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001896:	4b77      	ldr	r3, [pc, #476]	; (8001a74 <HAL_RCC_OscConfig+0x474>)
 8001898:	681b      	ldr	r3, [r3, #0]
 800189a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800189e:	2b00      	cmp	r3, #0
 80018a0:	d118      	bne.n	80018d4 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80018a2:	4b74      	ldr	r3, [pc, #464]	; (8001a74 <HAL_RCC_OscConfig+0x474>)
 80018a4:	681b      	ldr	r3, [r3, #0]
 80018a6:	4a73      	ldr	r2, [pc, #460]	; (8001a74 <HAL_RCC_OscConfig+0x474>)
 80018a8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80018ac:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80018ae:	f7ff fb45 	bl	8000f3c <HAL_GetTick>
 80018b2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80018b4:	e008      	b.n	80018c8 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80018b6:	f7ff fb41 	bl	8000f3c <HAL_GetTick>
 80018ba:	4602      	mov	r2, r0
 80018bc:	693b      	ldr	r3, [r7, #16]
 80018be:	1ad3      	subs	r3, r2, r3
 80018c0:	2b02      	cmp	r3, #2
 80018c2:	d901      	bls.n	80018c8 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80018c4:	2303      	movs	r3, #3
 80018c6:	e10c      	b.n	8001ae2 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80018c8:	4b6a      	ldr	r3, [pc, #424]	; (8001a74 <HAL_RCC_OscConfig+0x474>)
 80018ca:	681b      	ldr	r3, [r3, #0]
 80018cc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80018d0:	2b00      	cmp	r3, #0
 80018d2:	d0f0      	beq.n	80018b6 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	689b      	ldr	r3, [r3, #8]
 80018d8:	2b01      	cmp	r3, #1
 80018da:	d106      	bne.n	80018ea <HAL_RCC_OscConfig+0x2ea>
 80018dc:	4b64      	ldr	r3, [pc, #400]	; (8001a70 <HAL_RCC_OscConfig+0x470>)
 80018de:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80018e0:	4a63      	ldr	r2, [pc, #396]	; (8001a70 <HAL_RCC_OscConfig+0x470>)
 80018e2:	f043 0301 	orr.w	r3, r3, #1
 80018e6:	6713      	str	r3, [r2, #112]	; 0x70
 80018e8:	e01c      	b.n	8001924 <HAL_RCC_OscConfig+0x324>
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	689b      	ldr	r3, [r3, #8]
 80018ee:	2b05      	cmp	r3, #5
 80018f0:	d10c      	bne.n	800190c <HAL_RCC_OscConfig+0x30c>
 80018f2:	4b5f      	ldr	r3, [pc, #380]	; (8001a70 <HAL_RCC_OscConfig+0x470>)
 80018f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80018f6:	4a5e      	ldr	r2, [pc, #376]	; (8001a70 <HAL_RCC_OscConfig+0x470>)
 80018f8:	f043 0304 	orr.w	r3, r3, #4
 80018fc:	6713      	str	r3, [r2, #112]	; 0x70
 80018fe:	4b5c      	ldr	r3, [pc, #368]	; (8001a70 <HAL_RCC_OscConfig+0x470>)
 8001900:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001902:	4a5b      	ldr	r2, [pc, #364]	; (8001a70 <HAL_RCC_OscConfig+0x470>)
 8001904:	f043 0301 	orr.w	r3, r3, #1
 8001908:	6713      	str	r3, [r2, #112]	; 0x70
 800190a:	e00b      	b.n	8001924 <HAL_RCC_OscConfig+0x324>
 800190c:	4b58      	ldr	r3, [pc, #352]	; (8001a70 <HAL_RCC_OscConfig+0x470>)
 800190e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001910:	4a57      	ldr	r2, [pc, #348]	; (8001a70 <HAL_RCC_OscConfig+0x470>)
 8001912:	f023 0301 	bic.w	r3, r3, #1
 8001916:	6713      	str	r3, [r2, #112]	; 0x70
 8001918:	4b55      	ldr	r3, [pc, #340]	; (8001a70 <HAL_RCC_OscConfig+0x470>)
 800191a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800191c:	4a54      	ldr	r2, [pc, #336]	; (8001a70 <HAL_RCC_OscConfig+0x470>)
 800191e:	f023 0304 	bic.w	r3, r3, #4
 8001922:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	689b      	ldr	r3, [r3, #8]
 8001928:	2b00      	cmp	r3, #0
 800192a:	d015      	beq.n	8001958 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800192c:	f7ff fb06 	bl	8000f3c <HAL_GetTick>
 8001930:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001932:	e00a      	b.n	800194a <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001934:	f7ff fb02 	bl	8000f3c <HAL_GetTick>
 8001938:	4602      	mov	r2, r0
 800193a:	693b      	ldr	r3, [r7, #16]
 800193c:	1ad3      	subs	r3, r2, r3
 800193e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001942:	4293      	cmp	r3, r2
 8001944:	d901      	bls.n	800194a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8001946:	2303      	movs	r3, #3
 8001948:	e0cb      	b.n	8001ae2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800194a:	4b49      	ldr	r3, [pc, #292]	; (8001a70 <HAL_RCC_OscConfig+0x470>)
 800194c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800194e:	f003 0302 	and.w	r3, r3, #2
 8001952:	2b00      	cmp	r3, #0
 8001954:	d0ee      	beq.n	8001934 <HAL_RCC_OscConfig+0x334>
 8001956:	e014      	b.n	8001982 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001958:	f7ff faf0 	bl	8000f3c <HAL_GetTick>
 800195c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800195e:	e00a      	b.n	8001976 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001960:	f7ff faec 	bl	8000f3c <HAL_GetTick>
 8001964:	4602      	mov	r2, r0
 8001966:	693b      	ldr	r3, [r7, #16]
 8001968:	1ad3      	subs	r3, r2, r3
 800196a:	f241 3288 	movw	r2, #5000	; 0x1388
 800196e:	4293      	cmp	r3, r2
 8001970:	d901      	bls.n	8001976 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8001972:	2303      	movs	r3, #3
 8001974:	e0b5      	b.n	8001ae2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001976:	4b3e      	ldr	r3, [pc, #248]	; (8001a70 <HAL_RCC_OscConfig+0x470>)
 8001978:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800197a:	f003 0302 	and.w	r3, r3, #2
 800197e:	2b00      	cmp	r3, #0
 8001980:	d1ee      	bne.n	8001960 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001982:	7dfb      	ldrb	r3, [r7, #23]
 8001984:	2b01      	cmp	r3, #1
 8001986:	d105      	bne.n	8001994 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001988:	4b39      	ldr	r3, [pc, #228]	; (8001a70 <HAL_RCC_OscConfig+0x470>)
 800198a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800198c:	4a38      	ldr	r2, [pc, #224]	; (8001a70 <HAL_RCC_OscConfig+0x470>)
 800198e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001992:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	699b      	ldr	r3, [r3, #24]
 8001998:	2b00      	cmp	r3, #0
 800199a:	f000 80a1 	beq.w	8001ae0 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800199e:	4b34      	ldr	r3, [pc, #208]	; (8001a70 <HAL_RCC_OscConfig+0x470>)
 80019a0:	689b      	ldr	r3, [r3, #8]
 80019a2:	f003 030c 	and.w	r3, r3, #12
 80019a6:	2b08      	cmp	r3, #8
 80019a8:	d05c      	beq.n	8001a64 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	699b      	ldr	r3, [r3, #24]
 80019ae:	2b02      	cmp	r3, #2
 80019b0:	d141      	bne.n	8001a36 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80019b2:	4b31      	ldr	r3, [pc, #196]	; (8001a78 <HAL_RCC_OscConfig+0x478>)
 80019b4:	2200      	movs	r2, #0
 80019b6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80019b8:	f7ff fac0 	bl	8000f3c <HAL_GetTick>
 80019bc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80019be:	e008      	b.n	80019d2 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80019c0:	f7ff fabc 	bl	8000f3c <HAL_GetTick>
 80019c4:	4602      	mov	r2, r0
 80019c6:	693b      	ldr	r3, [r7, #16]
 80019c8:	1ad3      	subs	r3, r2, r3
 80019ca:	2b02      	cmp	r3, #2
 80019cc:	d901      	bls.n	80019d2 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80019ce:	2303      	movs	r3, #3
 80019d0:	e087      	b.n	8001ae2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80019d2:	4b27      	ldr	r3, [pc, #156]	; (8001a70 <HAL_RCC_OscConfig+0x470>)
 80019d4:	681b      	ldr	r3, [r3, #0]
 80019d6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80019da:	2b00      	cmp	r3, #0
 80019dc:	d1f0      	bne.n	80019c0 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	69da      	ldr	r2, [r3, #28]
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	6a1b      	ldr	r3, [r3, #32]
 80019e6:	431a      	orrs	r2, r3
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019ec:	019b      	lsls	r3, r3, #6
 80019ee:	431a      	orrs	r2, r3
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80019f4:	085b      	lsrs	r3, r3, #1
 80019f6:	3b01      	subs	r3, #1
 80019f8:	041b      	lsls	r3, r3, #16
 80019fa:	431a      	orrs	r2, r3
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a00:	061b      	lsls	r3, r3, #24
 8001a02:	491b      	ldr	r1, [pc, #108]	; (8001a70 <HAL_RCC_OscConfig+0x470>)
 8001a04:	4313      	orrs	r3, r2
 8001a06:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001a08:	4b1b      	ldr	r3, [pc, #108]	; (8001a78 <HAL_RCC_OscConfig+0x478>)
 8001a0a:	2201      	movs	r2, #1
 8001a0c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a0e:	f7ff fa95 	bl	8000f3c <HAL_GetTick>
 8001a12:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001a14:	e008      	b.n	8001a28 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001a16:	f7ff fa91 	bl	8000f3c <HAL_GetTick>
 8001a1a:	4602      	mov	r2, r0
 8001a1c:	693b      	ldr	r3, [r7, #16]
 8001a1e:	1ad3      	subs	r3, r2, r3
 8001a20:	2b02      	cmp	r3, #2
 8001a22:	d901      	bls.n	8001a28 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8001a24:	2303      	movs	r3, #3
 8001a26:	e05c      	b.n	8001ae2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001a28:	4b11      	ldr	r3, [pc, #68]	; (8001a70 <HAL_RCC_OscConfig+0x470>)
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a30:	2b00      	cmp	r3, #0
 8001a32:	d0f0      	beq.n	8001a16 <HAL_RCC_OscConfig+0x416>
 8001a34:	e054      	b.n	8001ae0 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001a36:	4b10      	ldr	r3, [pc, #64]	; (8001a78 <HAL_RCC_OscConfig+0x478>)
 8001a38:	2200      	movs	r2, #0
 8001a3a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a3c:	f7ff fa7e 	bl	8000f3c <HAL_GetTick>
 8001a40:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001a42:	e008      	b.n	8001a56 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001a44:	f7ff fa7a 	bl	8000f3c <HAL_GetTick>
 8001a48:	4602      	mov	r2, r0
 8001a4a:	693b      	ldr	r3, [r7, #16]
 8001a4c:	1ad3      	subs	r3, r2, r3
 8001a4e:	2b02      	cmp	r3, #2
 8001a50:	d901      	bls.n	8001a56 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8001a52:	2303      	movs	r3, #3
 8001a54:	e045      	b.n	8001ae2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001a56:	4b06      	ldr	r3, [pc, #24]	; (8001a70 <HAL_RCC_OscConfig+0x470>)
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a5e:	2b00      	cmp	r3, #0
 8001a60:	d1f0      	bne.n	8001a44 <HAL_RCC_OscConfig+0x444>
 8001a62:	e03d      	b.n	8001ae0 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	699b      	ldr	r3, [r3, #24]
 8001a68:	2b01      	cmp	r3, #1
 8001a6a:	d107      	bne.n	8001a7c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8001a6c:	2301      	movs	r3, #1
 8001a6e:	e038      	b.n	8001ae2 <HAL_RCC_OscConfig+0x4e2>
 8001a70:	40023800 	.word	0x40023800
 8001a74:	40007000 	.word	0x40007000
 8001a78:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001a7c:	4b1b      	ldr	r3, [pc, #108]	; (8001aec <HAL_RCC_OscConfig+0x4ec>)
 8001a7e:	685b      	ldr	r3, [r3, #4]
 8001a80:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	699b      	ldr	r3, [r3, #24]
 8001a86:	2b01      	cmp	r3, #1
 8001a88:	d028      	beq.n	8001adc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001a8a:	68fb      	ldr	r3, [r7, #12]
 8001a8c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001a94:	429a      	cmp	r2, r3
 8001a96:	d121      	bne.n	8001adc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001a98:	68fb      	ldr	r3, [r7, #12]
 8001a9a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001aa2:	429a      	cmp	r2, r3
 8001aa4:	d11a      	bne.n	8001adc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001aa6:	68fa      	ldr	r2, [r7, #12]
 8001aa8:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001aac:	4013      	ands	r3, r2
 8001aae:	687a      	ldr	r2, [r7, #4]
 8001ab0:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001ab2:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001ab4:	4293      	cmp	r3, r2
 8001ab6:	d111      	bne.n	8001adc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001ab8:	68fb      	ldr	r3, [r7, #12]
 8001aba:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ac2:	085b      	lsrs	r3, r3, #1
 8001ac4:	3b01      	subs	r3, #1
 8001ac6:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001ac8:	429a      	cmp	r2, r3
 8001aca:	d107      	bne.n	8001adc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001acc:	68fb      	ldr	r3, [r7, #12]
 8001ace:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ad6:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001ad8:	429a      	cmp	r2, r3
 8001ada:	d001      	beq.n	8001ae0 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8001adc:	2301      	movs	r3, #1
 8001ade:	e000      	b.n	8001ae2 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8001ae0:	2300      	movs	r3, #0
}
 8001ae2:	4618      	mov	r0, r3
 8001ae4:	3718      	adds	r7, #24
 8001ae6:	46bd      	mov	sp, r7
 8001ae8:	bd80      	pop	{r7, pc}
 8001aea:	bf00      	nop
 8001aec:	40023800 	.word	0x40023800

08001af0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001af0:	b580      	push	{r7, lr}
 8001af2:	b084      	sub	sp, #16
 8001af4:	af00      	add	r7, sp, #0
 8001af6:	6078      	str	r0, [r7, #4]
 8001af8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	2b00      	cmp	r3, #0
 8001afe:	d101      	bne.n	8001b04 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001b00:	2301      	movs	r3, #1
 8001b02:	e0cc      	b.n	8001c9e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001b04:	4b68      	ldr	r3, [pc, #416]	; (8001ca8 <HAL_RCC_ClockConfig+0x1b8>)
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	f003 030f 	and.w	r3, r3, #15
 8001b0c:	683a      	ldr	r2, [r7, #0]
 8001b0e:	429a      	cmp	r2, r3
 8001b10:	d90c      	bls.n	8001b2c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001b12:	4b65      	ldr	r3, [pc, #404]	; (8001ca8 <HAL_RCC_ClockConfig+0x1b8>)
 8001b14:	683a      	ldr	r2, [r7, #0]
 8001b16:	b2d2      	uxtb	r2, r2
 8001b18:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001b1a:	4b63      	ldr	r3, [pc, #396]	; (8001ca8 <HAL_RCC_ClockConfig+0x1b8>)
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	f003 030f 	and.w	r3, r3, #15
 8001b22:	683a      	ldr	r2, [r7, #0]
 8001b24:	429a      	cmp	r2, r3
 8001b26:	d001      	beq.n	8001b2c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001b28:	2301      	movs	r3, #1
 8001b2a:	e0b8      	b.n	8001c9e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	f003 0302 	and.w	r3, r3, #2
 8001b34:	2b00      	cmp	r3, #0
 8001b36:	d020      	beq.n	8001b7a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	f003 0304 	and.w	r3, r3, #4
 8001b40:	2b00      	cmp	r3, #0
 8001b42:	d005      	beq.n	8001b50 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001b44:	4b59      	ldr	r3, [pc, #356]	; (8001cac <HAL_RCC_ClockConfig+0x1bc>)
 8001b46:	689b      	ldr	r3, [r3, #8]
 8001b48:	4a58      	ldr	r2, [pc, #352]	; (8001cac <HAL_RCC_ClockConfig+0x1bc>)
 8001b4a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001b4e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	f003 0308 	and.w	r3, r3, #8
 8001b58:	2b00      	cmp	r3, #0
 8001b5a:	d005      	beq.n	8001b68 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001b5c:	4b53      	ldr	r3, [pc, #332]	; (8001cac <HAL_RCC_ClockConfig+0x1bc>)
 8001b5e:	689b      	ldr	r3, [r3, #8]
 8001b60:	4a52      	ldr	r2, [pc, #328]	; (8001cac <HAL_RCC_ClockConfig+0x1bc>)
 8001b62:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001b66:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001b68:	4b50      	ldr	r3, [pc, #320]	; (8001cac <HAL_RCC_ClockConfig+0x1bc>)
 8001b6a:	689b      	ldr	r3, [r3, #8]
 8001b6c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	689b      	ldr	r3, [r3, #8]
 8001b74:	494d      	ldr	r1, [pc, #308]	; (8001cac <HAL_RCC_ClockConfig+0x1bc>)
 8001b76:	4313      	orrs	r3, r2
 8001b78:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	f003 0301 	and.w	r3, r3, #1
 8001b82:	2b00      	cmp	r3, #0
 8001b84:	d044      	beq.n	8001c10 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	685b      	ldr	r3, [r3, #4]
 8001b8a:	2b01      	cmp	r3, #1
 8001b8c:	d107      	bne.n	8001b9e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001b8e:	4b47      	ldr	r3, [pc, #284]	; (8001cac <HAL_RCC_ClockConfig+0x1bc>)
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b96:	2b00      	cmp	r3, #0
 8001b98:	d119      	bne.n	8001bce <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001b9a:	2301      	movs	r3, #1
 8001b9c:	e07f      	b.n	8001c9e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	685b      	ldr	r3, [r3, #4]
 8001ba2:	2b02      	cmp	r3, #2
 8001ba4:	d003      	beq.n	8001bae <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001baa:	2b03      	cmp	r3, #3
 8001bac:	d107      	bne.n	8001bbe <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001bae:	4b3f      	ldr	r3, [pc, #252]	; (8001cac <HAL_RCC_ClockConfig+0x1bc>)
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001bb6:	2b00      	cmp	r3, #0
 8001bb8:	d109      	bne.n	8001bce <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001bba:	2301      	movs	r3, #1
 8001bbc:	e06f      	b.n	8001c9e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001bbe:	4b3b      	ldr	r3, [pc, #236]	; (8001cac <HAL_RCC_ClockConfig+0x1bc>)
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	f003 0302 	and.w	r3, r3, #2
 8001bc6:	2b00      	cmp	r3, #0
 8001bc8:	d101      	bne.n	8001bce <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001bca:	2301      	movs	r3, #1
 8001bcc:	e067      	b.n	8001c9e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001bce:	4b37      	ldr	r3, [pc, #220]	; (8001cac <HAL_RCC_ClockConfig+0x1bc>)
 8001bd0:	689b      	ldr	r3, [r3, #8]
 8001bd2:	f023 0203 	bic.w	r2, r3, #3
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	685b      	ldr	r3, [r3, #4]
 8001bda:	4934      	ldr	r1, [pc, #208]	; (8001cac <HAL_RCC_ClockConfig+0x1bc>)
 8001bdc:	4313      	orrs	r3, r2
 8001bde:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001be0:	f7ff f9ac 	bl	8000f3c <HAL_GetTick>
 8001be4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001be6:	e00a      	b.n	8001bfe <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001be8:	f7ff f9a8 	bl	8000f3c <HAL_GetTick>
 8001bec:	4602      	mov	r2, r0
 8001bee:	68fb      	ldr	r3, [r7, #12]
 8001bf0:	1ad3      	subs	r3, r2, r3
 8001bf2:	f241 3288 	movw	r2, #5000	; 0x1388
 8001bf6:	4293      	cmp	r3, r2
 8001bf8:	d901      	bls.n	8001bfe <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001bfa:	2303      	movs	r3, #3
 8001bfc:	e04f      	b.n	8001c9e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001bfe:	4b2b      	ldr	r3, [pc, #172]	; (8001cac <HAL_RCC_ClockConfig+0x1bc>)
 8001c00:	689b      	ldr	r3, [r3, #8]
 8001c02:	f003 020c 	and.w	r2, r3, #12
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	685b      	ldr	r3, [r3, #4]
 8001c0a:	009b      	lsls	r3, r3, #2
 8001c0c:	429a      	cmp	r2, r3
 8001c0e:	d1eb      	bne.n	8001be8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001c10:	4b25      	ldr	r3, [pc, #148]	; (8001ca8 <HAL_RCC_ClockConfig+0x1b8>)
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	f003 030f 	and.w	r3, r3, #15
 8001c18:	683a      	ldr	r2, [r7, #0]
 8001c1a:	429a      	cmp	r2, r3
 8001c1c:	d20c      	bcs.n	8001c38 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001c1e:	4b22      	ldr	r3, [pc, #136]	; (8001ca8 <HAL_RCC_ClockConfig+0x1b8>)
 8001c20:	683a      	ldr	r2, [r7, #0]
 8001c22:	b2d2      	uxtb	r2, r2
 8001c24:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001c26:	4b20      	ldr	r3, [pc, #128]	; (8001ca8 <HAL_RCC_ClockConfig+0x1b8>)
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	f003 030f 	and.w	r3, r3, #15
 8001c2e:	683a      	ldr	r2, [r7, #0]
 8001c30:	429a      	cmp	r2, r3
 8001c32:	d001      	beq.n	8001c38 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001c34:	2301      	movs	r3, #1
 8001c36:	e032      	b.n	8001c9e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	f003 0304 	and.w	r3, r3, #4
 8001c40:	2b00      	cmp	r3, #0
 8001c42:	d008      	beq.n	8001c56 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001c44:	4b19      	ldr	r3, [pc, #100]	; (8001cac <HAL_RCC_ClockConfig+0x1bc>)
 8001c46:	689b      	ldr	r3, [r3, #8]
 8001c48:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	68db      	ldr	r3, [r3, #12]
 8001c50:	4916      	ldr	r1, [pc, #88]	; (8001cac <HAL_RCC_ClockConfig+0x1bc>)
 8001c52:	4313      	orrs	r3, r2
 8001c54:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	f003 0308 	and.w	r3, r3, #8
 8001c5e:	2b00      	cmp	r3, #0
 8001c60:	d009      	beq.n	8001c76 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001c62:	4b12      	ldr	r3, [pc, #72]	; (8001cac <HAL_RCC_ClockConfig+0x1bc>)
 8001c64:	689b      	ldr	r3, [r3, #8]
 8001c66:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	691b      	ldr	r3, [r3, #16]
 8001c6e:	00db      	lsls	r3, r3, #3
 8001c70:	490e      	ldr	r1, [pc, #56]	; (8001cac <HAL_RCC_ClockConfig+0x1bc>)
 8001c72:	4313      	orrs	r3, r2
 8001c74:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001c76:	f000 f821 	bl	8001cbc <HAL_RCC_GetSysClockFreq>
 8001c7a:	4602      	mov	r2, r0
 8001c7c:	4b0b      	ldr	r3, [pc, #44]	; (8001cac <HAL_RCC_ClockConfig+0x1bc>)
 8001c7e:	689b      	ldr	r3, [r3, #8]
 8001c80:	091b      	lsrs	r3, r3, #4
 8001c82:	f003 030f 	and.w	r3, r3, #15
 8001c86:	490a      	ldr	r1, [pc, #40]	; (8001cb0 <HAL_RCC_ClockConfig+0x1c0>)
 8001c88:	5ccb      	ldrb	r3, [r1, r3]
 8001c8a:	fa22 f303 	lsr.w	r3, r2, r3
 8001c8e:	4a09      	ldr	r2, [pc, #36]	; (8001cb4 <HAL_RCC_ClockConfig+0x1c4>)
 8001c90:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001c92:	4b09      	ldr	r3, [pc, #36]	; (8001cb8 <HAL_RCC_ClockConfig+0x1c8>)
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	4618      	mov	r0, r3
 8001c98:	f7ff f90e 	bl	8000eb8 <HAL_InitTick>

  return HAL_OK;
 8001c9c:	2300      	movs	r3, #0
}
 8001c9e:	4618      	mov	r0, r3
 8001ca0:	3710      	adds	r7, #16
 8001ca2:	46bd      	mov	sp, r7
 8001ca4:	bd80      	pop	{r7, pc}
 8001ca6:	bf00      	nop
 8001ca8:	40023c00 	.word	0x40023c00
 8001cac:	40023800 	.word	0x40023800
 8001cb0:	08002ab4 	.word	0x08002ab4
 8001cb4:	20000010 	.word	0x20000010
 8001cb8:	20000014 	.word	0x20000014

08001cbc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001cbc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001cc0:	b094      	sub	sp, #80	; 0x50
 8001cc2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8001cc4:	2300      	movs	r3, #0
 8001cc6:	647b      	str	r3, [r7, #68]	; 0x44
 8001cc8:	2300      	movs	r3, #0
 8001cca:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001ccc:	2300      	movs	r3, #0
 8001cce:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8001cd0:	2300      	movs	r3, #0
 8001cd2:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001cd4:	4b7c      	ldr	r3, [pc, #496]	; (8001ec8 <HAL_RCC_GetSysClockFreq+0x20c>)
 8001cd6:	689b      	ldr	r3, [r3, #8]
 8001cd8:	f003 030c 	and.w	r3, r3, #12
 8001cdc:	2b08      	cmp	r3, #8
 8001cde:	d00d      	beq.n	8001cfc <HAL_RCC_GetSysClockFreq+0x40>
 8001ce0:	2b08      	cmp	r3, #8
 8001ce2:	f200 80e7 	bhi.w	8001eb4 <HAL_RCC_GetSysClockFreq+0x1f8>
 8001ce6:	2b00      	cmp	r3, #0
 8001ce8:	d002      	beq.n	8001cf0 <HAL_RCC_GetSysClockFreq+0x34>
 8001cea:	2b04      	cmp	r3, #4
 8001cec:	d003      	beq.n	8001cf6 <HAL_RCC_GetSysClockFreq+0x3a>
 8001cee:	e0e1      	b.n	8001eb4 <HAL_RCC_GetSysClockFreq+0x1f8>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001cf0:	4b76      	ldr	r3, [pc, #472]	; (8001ecc <HAL_RCC_GetSysClockFreq+0x210>)
 8001cf2:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8001cf4:	e0e1      	b.n	8001eba <HAL_RCC_GetSysClockFreq+0x1fe>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001cf6:	4b76      	ldr	r3, [pc, #472]	; (8001ed0 <HAL_RCC_GetSysClockFreq+0x214>)
 8001cf8:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001cfa:	e0de      	b.n	8001eba <HAL_RCC_GetSysClockFreq+0x1fe>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001cfc:	4b72      	ldr	r3, [pc, #456]	; (8001ec8 <HAL_RCC_GetSysClockFreq+0x20c>)
 8001cfe:	685b      	ldr	r3, [r3, #4]
 8001d00:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001d04:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001d06:	4b70      	ldr	r3, [pc, #448]	; (8001ec8 <HAL_RCC_GetSysClockFreq+0x20c>)
 8001d08:	685b      	ldr	r3, [r3, #4]
 8001d0a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001d0e:	2b00      	cmp	r3, #0
 8001d10:	d065      	beq.n	8001dde <HAL_RCC_GetSysClockFreq+0x122>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001d12:	4b6d      	ldr	r3, [pc, #436]	; (8001ec8 <HAL_RCC_GetSysClockFreq+0x20c>)
 8001d14:	685b      	ldr	r3, [r3, #4]
 8001d16:	099b      	lsrs	r3, r3, #6
 8001d18:	2200      	movs	r2, #0
 8001d1a:	63bb      	str	r3, [r7, #56]	; 0x38
 8001d1c:	63fa      	str	r2, [r7, #60]	; 0x3c
 8001d1e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001d20:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001d24:	633b      	str	r3, [r7, #48]	; 0x30
 8001d26:	2300      	movs	r3, #0
 8001d28:	637b      	str	r3, [r7, #52]	; 0x34
 8001d2a:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8001d2e:	4622      	mov	r2, r4
 8001d30:	462b      	mov	r3, r5
 8001d32:	f04f 0000 	mov.w	r0, #0
 8001d36:	f04f 0100 	mov.w	r1, #0
 8001d3a:	0159      	lsls	r1, r3, #5
 8001d3c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001d40:	0150      	lsls	r0, r2, #5
 8001d42:	4602      	mov	r2, r0
 8001d44:	460b      	mov	r3, r1
 8001d46:	4621      	mov	r1, r4
 8001d48:	1a51      	subs	r1, r2, r1
 8001d4a:	6139      	str	r1, [r7, #16]
 8001d4c:	4629      	mov	r1, r5
 8001d4e:	eb63 0301 	sbc.w	r3, r3, r1
 8001d52:	617b      	str	r3, [r7, #20]
 8001d54:	f04f 0200 	mov.w	r2, #0
 8001d58:	f04f 0300 	mov.w	r3, #0
 8001d5c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8001d60:	4659      	mov	r1, fp
 8001d62:	018b      	lsls	r3, r1, #6
 8001d64:	4651      	mov	r1, sl
 8001d66:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001d6a:	4651      	mov	r1, sl
 8001d6c:	018a      	lsls	r2, r1, #6
 8001d6e:	46d4      	mov	ip, sl
 8001d70:	ebb2 080c 	subs.w	r8, r2, ip
 8001d74:	4659      	mov	r1, fp
 8001d76:	eb63 0901 	sbc.w	r9, r3, r1
 8001d7a:	f04f 0200 	mov.w	r2, #0
 8001d7e:	f04f 0300 	mov.w	r3, #0
 8001d82:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001d86:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001d8a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001d8e:	4690      	mov	r8, r2
 8001d90:	4699      	mov	r9, r3
 8001d92:	4623      	mov	r3, r4
 8001d94:	eb18 0303 	adds.w	r3, r8, r3
 8001d98:	60bb      	str	r3, [r7, #8]
 8001d9a:	462b      	mov	r3, r5
 8001d9c:	eb49 0303 	adc.w	r3, r9, r3
 8001da0:	60fb      	str	r3, [r7, #12]
 8001da2:	f04f 0200 	mov.w	r2, #0
 8001da6:	f04f 0300 	mov.w	r3, #0
 8001daa:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8001dae:	4629      	mov	r1, r5
 8001db0:	024b      	lsls	r3, r1, #9
 8001db2:	4620      	mov	r0, r4
 8001db4:	4629      	mov	r1, r5
 8001db6:	4604      	mov	r4, r0
 8001db8:	ea43 53d4 	orr.w	r3, r3, r4, lsr #23
 8001dbc:	4601      	mov	r1, r0
 8001dbe:	024a      	lsls	r2, r1, #9
 8001dc0:	4610      	mov	r0, r2
 8001dc2:	4619      	mov	r1, r3
 8001dc4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001dc6:	2200      	movs	r2, #0
 8001dc8:	62bb      	str	r3, [r7, #40]	; 0x28
 8001dca:	62fa      	str	r2, [r7, #44]	; 0x2c
 8001dcc:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8001dd0:	f7fe fbf6 	bl	80005c0 <__aeabi_uldivmod>
 8001dd4:	4602      	mov	r2, r0
 8001dd6:	460b      	mov	r3, r1
 8001dd8:	4613      	mov	r3, r2
 8001dda:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001ddc:	e05c      	b.n	8001e98 <HAL_RCC_GetSysClockFreq+0x1dc>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001dde:	4b3a      	ldr	r3, [pc, #232]	; (8001ec8 <HAL_RCC_GetSysClockFreq+0x20c>)
 8001de0:	685b      	ldr	r3, [r3, #4]
 8001de2:	099b      	lsrs	r3, r3, #6
 8001de4:	2200      	movs	r2, #0
 8001de6:	4618      	mov	r0, r3
 8001de8:	4611      	mov	r1, r2
 8001dea:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8001dee:	623b      	str	r3, [r7, #32]
 8001df0:	2300      	movs	r3, #0
 8001df2:	627b      	str	r3, [r7, #36]	; 0x24
 8001df4:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8001df8:	4642      	mov	r2, r8
 8001dfa:	464b      	mov	r3, r9
 8001dfc:	f04f 0000 	mov.w	r0, #0
 8001e00:	f04f 0100 	mov.w	r1, #0
 8001e04:	0159      	lsls	r1, r3, #5
 8001e06:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001e0a:	0150      	lsls	r0, r2, #5
 8001e0c:	4602      	mov	r2, r0
 8001e0e:	460b      	mov	r3, r1
 8001e10:	46c4      	mov	ip, r8
 8001e12:	ebb2 0a0c 	subs.w	sl, r2, ip
 8001e16:	4640      	mov	r0, r8
 8001e18:	4649      	mov	r1, r9
 8001e1a:	468c      	mov	ip, r1
 8001e1c:	eb63 0b0c 	sbc.w	fp, r3, ip
 8001e20:	f04f 0200 	mov.w	r2, #0
 8001e24:	f04f 0300 	mov.w	r3, #0
 8001e28:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8001e2c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8001e30:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8001e34:	ebb2 040a 	subs.w	r4, r2, sl
 8001e38:	eb63 050b 	sbc.w	r5, r3, fp
 8001e3c:	f04f 0200 	mov.w	r2, #0
 8001e40:	f04f 0300 	mov.w	r3, #0
 8001e44:	00eb      	lsls	r3, r5, #3
 8001e46:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001e4a:	00e2      	lsls	r2, r4, #3
 8001e4c:	4614      	mov	r4, r2
 8001e4e:	461d      	mov	r5, r3
 8001e50:	4603      	mov	r3, r0
 8001e52:	18e3      	adds	r3, r4, r3
 8001e54:	603b      	str	r3, [r7, #0]
 8001e56:	460b      	mov	r3, r1
 8001e58:	eb45 0303 	adc.w	r3, r5, r3
 8001e5c:	607b      	str	r3, [r7, #4]
 8001e5e:	f04f 0200 	mov.w	r2, #0
 8001e62:	f04f 0300 	mov.w	r3, #0
 8001e66:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001e6a:	4629      	mov	r1, r5
 8001e6c:	028b      	lsls	r3, r1, #10
 8001e6e:	4620      	mov	r0, r4
 8001e70:	4629      	mov	r1, r5
 8001e72:	4604      	mov	r4, r0
 8001e74:	ea43 5394 	orr.w	r3, r3, r4, lsr #22
 8001e78:	4601      	mov	r1, r0
 8001e7a:	028a      	lsls	r2, r1, #10
 8001e7c:	4610      	mov	r0, r2
 8001e7e:	4619      	mov	r1, r3
 8001e80:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001e82:	2200      	movs	r2, #0
 8001e84:	61bb      	str	r3, [r7, #24]
 8001e86:	61fa      	str	r2, [r7, #28]
 8001e88:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001e8c:	f7fe fb98 	bl	80005c0 <__aeabi_uldivmod>
 8001e90:	4602      	mov	r2, r0
 8001e92:	460b      	mov	r3, r1
 8001e94:	4613      	mov	r3, r2
 8001e96:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001e98:	4b0b      	ldr	r3, [pc, #44]	; (8001ec8 <HAL_RCC_GetSysClockFreq+0x20c>)
 8001e9a:	685b      	ldr	r3, [r3, #4]
 8001e9c:	0c1b      	lsrs	r3, r3, #16
 8001e9e:	f003 0303 	and.w	r3, r3, #3
 8001ea2:	3301      	adds	r3, #1
 8001ea4:	005b      	lsls	r3, r3, #1
 8001ea6:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8001ea8:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8001eaa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001eac:	fbb2 f3f3 	udiv	r3, r2, r3
 8001eb0:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001eb2:	e002      	b.n	8001eba <HAL_RCC_GetSysClockFreq+0x1fe>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001eb4:	4b05      	ldr	r3, [pc, #20]	; (8001ecc <HAL_RCC_GetSysClockFreq+0x210>)
 8001eb6:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001eb8:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001eba:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8001ebc:	4618      	mov	r0, r3
 8001ebe:	3750      	adds	r7, #80	; 0x50
 8001ec0:	46bd      	mov	sp, r7
 8001ec2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001ec6:	bf00      	nop
 8001ec8:	40023800 	.word	0x40023800
 8001ecc:	00f42400 	.word	0x00f42400
 8001ed0:	007a1200 	.word	0x007a1200

08001ed4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001ed4:	b480      	push	{r7}
 8001ed6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001ed8:	4b02      	ldr	r3, [pc, #8]	; (8001ee4 <HAL_RCC_GetHCLKFreq+0x10>)
 8001eda:	681b      	ldr	r3, [r3, #0]
}
 8001edc:	4618      	mov	r0, r3
 8001ede:	46bd      	mov	sp, r7
 8001ee0:	bc80      	pop	{r7}
 8001ee2:	4770      	bx	lr
 8001ee4:	20000010 	.word	0x20000010

08001ee8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001ee8:	b580      	push	{r7, lr}
 8001eea:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001eec:	f7ff fff2 	bl	8001ed4 <HAL_RCC_GetHCLKFreq>
 8001ef0:	4602      	mov	r2, r0
 8001ef2:	4b05      	ldr	r3, [pc, #20]	; (8001f08 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001ef4:	689b      	ldr	r3, [r3, #8]
 8001ef6:	0a9b      	lsrs	r3, r3, #10
 8001ef8:	f003 0307 	and.w	r3, r3, #7
 8001efc:	4903      	ldr	r1, [pc, #12]	; (8001f0c <HAL_RCC_GetPCLK1Freq+0x24>)
 8001efe:	5ccb      	ldrb	r3, [r1, r3]
 8001f00:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001f04:	4618      	mov	r0, r3
 8001f06:	bd80      	pop	{r7, pc}
 8001f08:	40023800 	.word	0x40023800
 8001f0c:	08002ac4 	.word	0x08002ac4

08001f10 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001f10:	b580      	push	{r7, lr}
 8001f12:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8001f14:	f7ff ffde 	bl	8001ed4 <HAL_RCC_GetHCLKFreq>
 8001f18:	4602      	mov	r2, r0
 8001f1a:	4b05      	ldr	r3, [pc, #20]	; (8001f30 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001f1c:	689b      	ldr	r3, [r3, #8]
 8001f1e:	0b5b      	lsrs	r3, r3, #13
 8001f20:	f003 0307 	and.w	r3, r3, #7
 8001f24:	4903      	ldr	r1, [pc, #12]	; (8001f34 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001f26:	5ccb      	ldrb	r3, [r1, r3]
 8001f28:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001f2c:	4618      	mov	r0, r3
 8001f2e:	bd80      	pop	{r7, pc}
 8001f30:	40023800 	.word	0x40023800
 8001f34:	08002ac4 	.word	0x08002ac4

08001f38 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001f38:	b580      	push	{r7, lr}
 8001f3a:	b082      	sub	sp, #8
 8001f3c:	af00      	add	r7, sp, #0
 8001f3e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	2b00      	cmp	r3, #0
 8001f44:	d101      	bne.n	8001f4a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8001f46:	2301      	movs	r3, #1
 8001f48:	e03f      	b.n	8001fca <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001f50:	b2db      	uxtb	r3, r3
 8001f52:	2b00      	cmp	r3, #0
 8001f54:	d106      	bne.n	8001f64 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	2200      	movs	r2, #0
 8001f5a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8001f5e:	6878      	ldr	r0, [r7, #4]
 8001f60:	f7ff faf6 	bl	8001550 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	2224      	movs	r2, #36	; 0x24
 8001f68:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	68da      	ldr	r2, [r3, #12]
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001f7a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8001f7c:	6878      	ldr	r0, [r7, #4]
 8001f7e:	f000 f929 	bl	80021d4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	691a      	ldr	r2, [r3, #16]
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8001f90:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	695a      	ldr	r2, [r3, #20]
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8001fa0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	68da      	ldr	r2, [r3, #12]
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001fb0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	2200      	movs	r2, #0
 8001fb6:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	2220      	movs	r2, #32
 8001fbc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	2220      	movs	r2, #32
 8001fc4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8001fc8:	2300      	movs	r3, #0
}
 8001fca:	4618      	mov	r0, r3
 8001fcc:	3708      	adds	r7, #8
 8001fce:	46bd      	mov	sp, r7
 8001fd0:	bd80      	pop	{r7, pc}

08001fd2 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001fd2:	b580      	push	{r7, lr}
 8001fd4:	b08a      	sub	sp, #40	; 0x28
 8001fd6:	af02      	add	r7, sp, #8
 8001fd8:	60f8      	str	r0, [r7, #12]
 8001fda:	60b9      	str	r1, [r7, #8]
 8001fdc:	603b      	str	r3, [r7, #0]
 8001fde:	4613      	mov	r3, r2
 8001fe0:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8001fe2:	2300      	movs	r3, #0
 8001fe4:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8001fe6:	68fb      	ldr	r3, [r7, #12]
 8001fe8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001fec:	b2db      	uxtb	r3, r3
 8001fee:	2b20      	cmp	r3, #32
 8001ff0:	d17c      	bne.n	80020ec <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8001ff2:	68bb      	ldr	r3, [r7, #8]
 8001ff4:	2b00      	cmp	r3, #0
 8001ff6:	d002      	beq.n	8001ffe <HAL_UART_Transmit+0x2c>
 8001ff8:	88fb      	ldrh	r3, [r7, #6]
 8001ffa:	2b00      	cmp	r3, #0
 8001ffc:	d101      	bne.n	8002002 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8001ffe:	2301      	movs	r3, #1
 8002000:	e075      	b.n	80020ee <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002002:	68fb      	ldr	r3, [r7, #12]
 8002004:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002008:	2b01      	cmp	r3, #1
 800200a:	d101      	bne.n	8002010 <HAL_UART_Transmit+0x3e>
 800200c:	2302      	movs	r3, #2
 800200e:	e06e      	b.n	80020ee <HAL_UART_Transmit+0x11c>
 8002010:	68fb      	ldr	r3, [r7, #12]
 8002012:	2201      	movs	r2, #1
 8002014:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002018:	68fb      	ldr	r3, [r7, #12]
 800201a:	2200      	movs	r2, #0
 800201c:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800201e:	68fb      	ldr	r3, [r7, #12]
 8002020:	2221      	movs	r2, #33	; 0x21
 8002022:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002026:	f7fe ff89 	bl	8000f3c <HAL_GetTick>
 800202a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800202c:	68fb      	ldr	r3, [r7, #12]
 800202e:	88fa      	ldrh	r2, [r7, #6]
 8002030:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8002032:	68fb      	ldr	r3, [r7, #12]
 8002034:	88fa      	ldrh	r2, [r7, #6]
 8002036:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002038:	68fb      	ldr	r3, [r7, #12]
 800203a:	689b      	ldr	r3, [r3, #8]
 800203c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002040:	d108      	bne.n	8002054 <HAL_UART_Transmit+0x82>
 8002042:	68fb      	ldr	r3, [r7, #12]
 8002044:	691b      	ldr	r3, [r3, #16]
 8002046:	2b00      	cmp	r3, #0
 8002048:	d104      	bne.n	8002054 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 800204a:	2300      	movs	r3, #0
 800204c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800204e:	68bb      	ldr	r3, [r7, #8]
 8002050:	61bb      	str	r3, [r7, #24]
 8002052:	e003      	b.n	800205c <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8002054:	68bb      	ldr	r3, [r7, #8]
 8002056:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002058:	2300      	movs	r3, #0
 800205a:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800205c:	68fb      	ldr	r3, [r7, #12]
 800205e:	2200      	movs	r2, #0
 8002060:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8002064:	e02a      	b.n	80020bc <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002066:	683b      	ldr	r3, [r7, #0]
 8002068:	9300      	str	r3, [sp, #0]
 800206a:	697b      	ldr	r3, [r7, #20]
 800206c:	2200      	movs	r2, #0
 800206e:	2180      	movs	r1, #128	; 0x80
 8002070:	68f8      	ldr	r0, [r7, #12]
 8002072:	f000 f840 	bl	80020f6 <UART_WaitOnFlagUntilTimeout>
 8002076:	4603      	mov	r3, r0
 8002078:	2b00      	cmp	r3, #0
 800207a:	d001      	beq.n	8002080 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 800207c:	2303      	movs	r3, #3
 800207e:	e036      	b.n	80020ee <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8002080:	69fb      	ldr	r3, [r7, #28]
 8002082:	2b00      	cmp	r3, #0
 8002084:	d10b      	bne.n	800209e <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002086:	69bb      	ldr	r3, [r7, #24]
 8002088:	881b      	ldrh	r3, [r3, #0]
 800208a:	461a      	mov	r2, r3
 800208c:	68fb      	ldr	r3, [r7, #12]
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002094:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8002096:	69bb      	ldr	r3, [r7, #24]
 8002098:	3302      	adds	r3, #2
 800209a:	61bb      	str	r3, [r7, #24]
 800209c:	e007      	b.n	80020ae <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800209e:	69fb      	ldr	r3, [r7, #28]
 80020a0:	781a      	ldrb	r2, [r3, #0]
 80020a2:	68fb      	ldr	r3, [r7, #12]
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80020a8:	69fb      	ldr	r3, [r7, #28]
 80020aa:	3301      	adds	r3, #1
 80020ac:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80020ae:	68fb      	ldr	r3, [r7, #12]
 80020b0:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80020b2:	b29b      	uxth	r3, r3
 80020b4:	3b01      	subs	r3, #1
 80020b6:	b29a      	uxth	r2, r3
 80020b8:	68fb      	ldr	r3, [r7, #12]
 80020ba:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80020bc:	68fb      	ldr	r3, [r7, #12]
 80020be:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80020c0:	b29b      	uxth	r3, r3
 80020c2:	2b00      	cmp	r3, #0
 80020c4:	d1cf      	bne.n	8002066 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80020c6:	683b      	ldr	r3, [r7, #0]
 80020c8:	9300      	str	r3, [sp, #0]
 80020ca:	697b      	ldr	r3, [r7, #20]
 80020cc:	2200      	movs	r2, #0
 80020ce:	2140      	movs	r1, #64	; 0x40
 80020d0:	68f8      	ldr	r0, [r7, #12]
 80020d2:	f000 f810 	bl	80020f6 <UART_WaitOnFlagUntilTimeout>
 80020d6:	4603      	mov	r3, r0
 80020d8:	2b00      	cmp	r3, #0
 80020da:	d001      	beq.n	80020e0 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 80020dc:	2303      	movs	r3, #3
 80020de:	e006      	b.n	80020ee <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80020e0:	68fb      	ldr	r3, [r7, #12]
 80020e2:	2220      	movs	r2, #32
 80020e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80020e8:	2300      	movs	r3, #0
 80020ea:	e000      	b.n	80020ee <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80020ec:	2302      	movs	r3, #2
  }
}
 80020ee:	4618      	mov	r0, r3
 80020f0:	3720      	adds	r7, #32
 80020f2:	46bd      	mov	sp, r7
 80020f4:	bd80      	pop	{r7, pc}

080020f6 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80020f6:	b580      	push	{r7, lr}
 80020f8:	b090      	sub	sp, #64	; 0x40
 80020fa:	af00      	add	r7, sp, #0
 80020fc:	60f8      	str	r0, [r7, #12]
 80020fe:	60b9      	str	r1, [r7, #8]
 8002100:	603b      	str	r3, [r7, #0]
 8002102:	4613      	mov	r3, r2
 8002104:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002106:	e050      	b.n	80021aa <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002108:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800210a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800210e:	d04c      	beq.n	80021aa <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8002110:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002112:	2b00      	cmp	r3, #0
 8002114:	d007      	beq.n	8002126 <UART_WaitOnFlagUntilTimeout+0x30>
 8002116:	f7fe ff11 	bl	8000f3c <HAL_GetTick>
 800211a:	4602      	mov	r2, r0
 800211c:	683b      	ldr	r3, [r7, #0]
 800211e:	1ad3      	subs	r3, r2, r3
 8002120:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002122:	429a      	cmp	r2, r3
 8002124:	d241      	bcs.n	80021aa <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002126:	68fb      	ldr	r3, [r7, #12]
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	330c      	adds	r3, #12
 800212c:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800212e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002130:	e853 3f00 	ldrex	r3, [r3]
 8002134:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8002136:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002138:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800213c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800213e:	68fb      	ldr	r3, [r7, #12]
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	330c      	adds	r3, #12
 8002144:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002146:	637a      	str	r2, [r7, #52]	; 0x34
 8002148:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800214a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800214c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800214e:	e841 2300 	strex	r3, r2, [r1]
 8002152:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8002154:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002156:	2b00      	cmp	r3, #0
 8002158:	d1e5      	bne.n	8002126 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800215a:	68fb      	ldr	r3, [r7, #12]
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	3314      	adds	r3, #20
 8002160:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002162:	697b      	ldr	r3, [r7, #20]
 8002164:	e853 3f00 	ldrex	r3, [r3]
 8002168:	613b      	str	r3, [r7, #16]
   return(result);
 800216a:	693b      	ldr	r3, [r7, #16]
 800216c:	f023 0301 	bic.w	r3, r3, #1
 8002170:	63bb      	str	r3, [r7, #56]	; 0x38
 8002172:	68fb      	ldr	r3, [r7, #12]
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	3314      	adds	r3, #20
 8002178:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800217a:	623a      	str	r2, [r7, #32]
 800217c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800217e:	69f9      	ldr	r1, [r7, #28]
 8002180:	6a3a      	ldr	r2, [r7, #32]
 8002182:	e841 2300 	strex	r3, r2, [r1]
 8002186:	61bb      	str	r3, [r7, #24]
   return(result);
 8002188:	69bb      	ldr	r3, [r7, #24]
 800218a:	2b00      	cmp	r3, #0
 800218c:	d1e5      	bne.n	800215a <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 800218e:	68fb      	ldr	r3, [r7, #12]
 8002190:	2220      	movs	r2, #32
 8002192:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8002196:	68fb      	ldr	r3, [r7, #12]
 8002198:	2220      	movs	r2, #32
 800219a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800219e:	68fb      	ldr	r3, [r7, #12]
 80021a0:	2200      	movs	r2, #0
 80021a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 80021a6:	2303      	movs	r3, #3
 80021a8:	e00f      	b.n	80021ca <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80021aa:	68fb      	ldr	r3, [r7, #12]
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	681a      	ldr	r2, [r3, #0]
 80021b0:	68bb      	ldr	r3, [r7, #8]
 80021b2:	4013      	ands	r3, r2
 80021b4:	68ba      	ldr	r2, [r7, #8]
 80021b6:	429a      	cmp	r2, r3
 80021b8:	bf0c      	ite	eq
 80021ba:	2301      	moveq	r3, #1
 80021bc:	2300      	movne	r3, #0
 80021be:	b2db      	uxtb	r3, r3
 80021c0:	461a      	mov	r2, r3
 80021c2:	79fb      	ldrb	r3, [r7, #7]
 80021c4:	429a      	cmp	r2, r3
 80021c6:	d09f      	beq.n	8002108 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80021c8:	2300      	movs	r3, #0
}
 80021ca:	4618      	mov	r0, r3
 80021cc:	3740      	adds	r7, #64	; 0x40
 80021ce:	46bd      	mov	sp, r7
 80021d0:	bd80      	pop	{r7, pc}
	...

080021d4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80021d4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80021d8:	b0c0      	sub	sp, #256	; 0x100
 80021da:	af00      	add	r7, sp, #0
 80021dc:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80021e0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	691b      	ldr	r3, [r3, #16]
 80021e8:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80021ec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80021f0:	68d9      	ldr	r1, [r3, #12]
 80021f2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80021f6:	681a      	ldr	r2, [r3, #0]
 80021f8:	ea40 0301 	orr.w	r3, r0, r1
 80021fc:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80021fe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002202:	689a      	ldr	r2, [r3, #8]
 8002204:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002208:	691b      	ldr	r3, [r3, #16]
 800220a:	431a      	orrs	r2, r3
 800220c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002210:	695b      	ldr	r3, [r3, #20]
 8002212:	431a      	orrs	r2, r3
 8002214:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002218:	69db      	ldr	r3, [r3, #28]
 800221a:	4313      	orrs	r3, r2
 800221c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8002220:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	68db      	ldr	r3, [r3, #12]
 8002228:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 800222c:	f021 010c 	bic.w	r1, r1, #12
 8002230:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002234:	681a      	ldr	r2, [r3, #0]
 8002236:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800223a:	430b      	orrs	r3, r1
 800223c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800223e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	695b      	ldr	r3, [r3, #20]
 8002246:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800224a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800224e:	6999      	ldr	r1, [r3, #24]
 8002250:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002254:	681a      	ldr	r2, [r3, #0]
 8002256:	ea40 0301 	orr.w	r3, r0, r1
 800225a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800225c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002260:	681a      	ldr	r2, [r3, #0]
 8002262:	4b91      	ldr	r3, [pc, #580]	; (80024a8 <UART_SetConfig+0x2d4>)
 8002264:	429a      	cmp	r2, r3
 8002266:	d005      	beq.n	8002274 <UART_SetConfig+0xa0>
 8002268:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800226c:	681a      	ldr	r2, [r3, #0]
 800226e:	4b8f      	ldr	r3, [pc, #572]	; (80024ac <UART_SetConfig+0x2d8>)
 8002270:	429a      	cmp	r2, r3
 8002272:	d104      	bne.n	800227e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8002274:	f7ff fe4c 	bl	8001f10 <HAL_RCC_GetPCLK2Freq>
 8002278:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 800227c:	e003      	b.n	8002286 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800227e:	f7ff fe33 	bl	8001ee8 <HAL_RCC_GetPCLK1Freq>
 8002282:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002286:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800228a:	69db      	ldr	r3, [r3, #28]
 800228c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002290:	f040 8110 	bne.w	80024b4 <UART_SetConfig+0x2e0>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002294:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002298:	2200      	movs	r2, #0
 800229a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800229e:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 80022a2:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 80022a6:	4622      	mov	r2, r4
 80022a8:	462b      	mov	r3, r5
 80022aa:	1891      	adds	r1, r2, r2
 80022ac:	65b9      	str	r1, [r7, #88]	; 0x58
 80022ae:	415b      	adcs	r3, r3
 80022b0:	65fb      	str	r3, [r7, #92]	; 0x5c
 80022b2:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80022b6:	4620      	mov	r0, r4
 80022b8:	4629      	mov	r1, r5
 80022ba:	4604      	mov	r4, r0
 80022bc:	eb12 0804 	adds.w	r8, r2, r4
 80022c0:	460c      	mov	r4, r1
 80022c2:	eb43 0904 	adc.w	r9, r3, r4
 80022c6:	f04f 0200 	mov.w	r2, #0
 80022ca:	f04f 0300 	mov.w	r3, #0
 80022ce:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80022d2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80022d6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80022da:	4690      	mov	r8, r2
 80022dc:	4699      	mov	r9, r3
 80022de:	4603      	mov	r3, r0
 80022e0:	eb18 0303 	adds.w	r3, r8, r3
 80022e4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80022e8:	460b      	mov	r3, r1
 80022ea:	eb49 0303 	adc.w	r3, r9, r3
 80022ee:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80022f2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80022f6:	685b      	ldr	r3, [r3, #4]
 80022f8:	2200      	movs	r2, #0
 80022fa:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80022fe:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8002302:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8002306:	460b      	mov	r3, r1
 8002308:	18db      	adds	r3, r3, r3
 800230a:	653b      	str	r3, [r7, #80]	; 0x50
 800230c:	4613      	mov	r3, r2
 800230e:	eb42 0303 	adc.w	r3, r2, r3
 8002312:	657b      	str	r3, [r7, #84]	; 0x54
 8002314:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8002318:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 800231c:	f7fe f950 	bl	80005c0 <__aeabi_uldivmod>
 8002320:	4602      	mov	r2, r0
 8002322:	460b      	mov	r3, r1
 8002324:	4b62      	ldr	r3, [pc, #392]	; (80024b0 <UART_SetConfig+0x2dc>)
 8002326:	fba3 2302 	umull	r2, r3, r3, r2
 800232a:	095b      	lsrs	r3, r3, #5
 800232c:	011c      	lsls	r4, r3, #4
 800232e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002332:	2200      	movs	r2, #0
 8002334:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8002338:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 800233c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8002340:	4642      	mov	r2, r8
 8002342:	464b      	mov	r3, r9
 8002344:	1891      	adds	r1, r2, r2
 8002346:	64b9      	str	r1, [r7, #72]	; 0x48
 8002348:	415b      	adcs	r3, r3
 800234a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800234c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8002350:	4645      	mov	r5, r8
 8002352:	eb12 0a05 	adds.w	sl, r2, r5
 8002356:	4640      	mov	r0, r8
 8002358:	4649      	mov	r1, r9
 800235a:	460d      	mov	r5, r1
 800235c:	eb43 0b05 	adc.w	fp, r3, r5
 8002360:	f04f 0200 	mov.w	r2, #0
 8002364:	f04f 0300 	mov.w	r3, #0
 8002368:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800236c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8002370:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002374:	4692      	mov	sl, r2
 8002376:	469b      	mov	fp, r3
 8002378:	4603      	mov	r3, r0
 800237a:	eb1a 0303 	adds.w	r3, sl, r3
 800237e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8002382:	460b      	mov	r3, r1
 8002384:	eb4b 0303 	adc.w	r3, fp, r3
 8002388:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800238c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002390:	685b      	ldr	r3, [r3, #4]
 8002392:	2200      	movs	r2, #0
 8002394:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8002398:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 800239c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80023a0:	460b      	mov	r3, r1
 80023a2:	18db      	adds	r3, r3, r3
 80023a4:	643b      	str	r3, [r7, #64]	; 0x40
 80023a6:	4613      	mov	r3, r2
 80023a8:	eb42 0303 	adc.w	r3, r2, r3
 80023ac:	647b      	str	r3, [r7, #68]	; 0x44
 80023ae:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80023b2:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 80023b6:	f7fe f903 	bl	80005c0 <__aeabi_uldivmod>
 80023ba:	4602      	mov	r2, r0
 80023bc:	460b      	mov	r3, r1
 80023be:	4611      	mov	r1, r2
 80023c0:	4b3b      	ldr	r3, [pc, #236]	; (80024b0 <UART_SetConfig+0x2dc>)
 80023c2:	fba3 2301 	umull	r2, r3, r3, r1
 80023c6:	095b      	lsrs	r3, r3, #5
 80023c8:	2264      	movs	r2, #100	; 0x64
 80023ca:	fb02 f303 	mul.w	r3, r2, r3
 80023ce:	1acb      	subs	r3, r1, r3
 80023d0:	00db      	lsls	r3, r3, #3
 80023d2:	f103 0232 	add.w	r2, r3, #50	; 0x32
 80023d6:	4b36      	ldr	r3, [pc, #216]	; (80024b0 <UART_SetConfig+0x2dc>)
 80023d8:	fba3 2302 	umull	r2, r3, r3, r2
 80023dc:	095b      	lsrs	r3, r3, #5
 80023de:	005b      	lsls	r3, r3, #1
 80023e0:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80023e4:	441c      	add	r4, r3
 80023e6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80023ea:	2200      	movs	r2, #0
 80023ec:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80023f0:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 80023f4:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 80023f8:	4642      	mov	r2, r8
 80023fa:	464b      	mov	r3, r9
 80023fc:	1891      	adds	r1, r2, r2
 80023fe:	63b9      	str	r1, [r7, #56]	; 0x38
 8002400:	415b      	adcs	r3, r3
 8002402:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002404:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8002408:	4641      	mov	r1, r8
 800240a:	1851      	adds	r1, r2, r1
 800240c:	6339      	str	r1, [r7, #48]	; 0x30
 800240e:	4649      	mov	r1, r9
 8002410:	414b      	adcs	r3, r1
 8002412:	637b      	str	r3, [r7, #52]	; 0x34
 8002414:	f04f 0200 	mov.w	r2, #0
 8002418:	f04f 0300 	mov.w	r3, #0
 800241c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8002420:	4659      	mov	r1, fp
 8002422:	00cb      	lsls	r3, r1, #3
 8002424:	4655      	mov	r5, sl
 8002426:	ea43 7355 	orr.w	r3, r3, r5, lsr #29
 800242a:	4651      	mov	r1, sl
 800242c:	00ca      	lsls	r2, r1, #3
 800242e:	4610      	mov	r0, r2
 8002430:	4619      	mov	r1, r3
 8002432:	4603      	mov	r3, r0
 8002434:	4642      	mov	r2, r8
 8002436:	189b      	adds	r3, r3, r2
 8002438:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800243c:	464b      	mov	r3, r9
 800243e:	460a      	mov	r2, r1
 8002440:	eb42 0303 	adc.w	r3, r2, r3
 8002444:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8002448:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800244c:	685b      	ldr	r3, [r3, #4]
 800244e:	2200      	movs	r2, #0
 8002450:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8002454:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8002458:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 800245c:	460b      	mov	r3, r1
 800245e:	18db      	adds	r3, r3, r3
 8002460:	62bb      	str	r3, [r7, #40]	; 0x28
 8002462:	4613      	mov	r3, r2
 8002464:	eb42 0303 	adc.w	r3, r2, r3
 8002468:	62fb      	str	r3, [r7, #44]	; 0x2c
 800246a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800246e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8002472:	f7fe f8a5 	bl	80005c0 <__aeabi_uldivmod>
 8002476:	4602      	mov	r2, r0
 8002478:	460b      	mov	r3, r1
 800247a:	4b0d      	ldr	r3, [pc, #52]	; (80024b0 <UART_SetConfig+0x2dc>)
 800247c:	fba3 1302 	umull	r1, r3, r3, r2
 8002480:	095b      	lsrs	r3, r3, #5
 8002482:	2164      	movs	r1, #100	; 0x64
 8002484:	fb01 f303 	mul.w	r3, r1, r3
 8002488:	1ad3      	subs	r3, r2, r3
 800248a:	00db      	lsls	r3, r3, #3
 800248c:	3332      	adds	r3, #50	; 0x32
 800248e:	4a08      	ldr	r2, [pc, #32]	; (80024b0 <UART_SetConfig+0x2dc>)
 8002490:	fba2 2303 	umull	r2, r3, r2, r3
 8002494:	095b      	lsrs	r3, r3, #5
 8002496:	f003 0207 	and.w	r2, r3, #7
 800249a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	4422      	add	r2, r4
 80024a2:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80024a4:	e10a      	b.n	80026bc <UART_SetConfig+0x4e8>
 80024a6:	bf00      	nop
 80024a8:	40011000 	.word	0x40011000
 80024ac:	40011400 	.word	0x40011400
 80024b0:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80024b4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80024b8:	2200      	movs	r2, #0
 80024ba:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80024be:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80024c2:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 80024c6:	4642      	mov	r2, r8
 80024c8:	464b      	mov	r3, r9
 80024ca:	1891      	adds	r1, r2, r2
 80024cc:	6239      	str	r1, [r7, #32]
 80024ce:	415b      	adcs	r3, r3
 80024d0:	627b      	str	r3, [r7, #36]	; 0x24
 80024d2:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80024d6:	4641      	mov	r1, r8
 80024d8:	1854      	adds	r4, r2, r1
 80024da:	46cc      	mov	ip, r9
 80024dc:	eb43 050c 	adc.w	r5, r3, ip
 80024e0:	f04f 0200 	mov.w	r2, #0
 80024e4:	f04f 0300 	mov.w	r3, #0
 80024e8:	00eb      	lsls	r3, r5, #3
 80024ea:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80024ee:	00e2      	lsls	r2, r4, #3
 80024f0:	4614      	mov	r4, r2
 80024f2:	461d      	mov	r5, r3
 80024f4:	4640      	mov	r0, r8
 80024f6:	4649      	mov	r1, r9
 80024f8:	4603      	mov	r3, r0
 80024fa:	18e3      	adds	r3, r4, r3
 80024fc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8002500:	460b      	mov	r3, r1
 8002502:	eb45 0303 	adc.w	r3, r5, r3
 8002506:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800250a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800250e:	685b      	ldr	r3, [r3, #4]
 8002510:	2200      	movs	r2, #0
 8002512:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8002516:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800251a:	f04f 0200 	mov.w	r2, #0
 800251e:	f04f 0300 	mov.w	r3, #0
 8002522:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8002526:	4629      	mov	r1, r5
 8002528:	008b      	lsls	r3, r1, #2
 800252a:	4620      	mov	r0, r4
 800252c:	4629      	mov	r1, r5
 800252e:	4604      	mov	r4, r0
 8002530:	ea43 7394 	orr.w	r3, r3, r4, lsr #30
 8002534:	4601      	mov	r1, r0
 8002536:	008a      	lsls	r2, r1, #2
 8002538:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 800253c:	f7fe f840 	bl	80005c0 <__aeabi_uldivmod>
 8002540:	4602      	mov	r2, r0
 8002542:	460b      	mov	r3, r1
 8002544:	4b60      	ldr	r3, [pc, #384]	; (80026c8 <UART_SetConfig+0x4f4>)
 8002546:	fba3 2302 	umull	r2, r3, r3, r2
 800254a:	095b      	lsrs	r3, r3, #5
 800254c:	011c      	lsls	r4, r3, #4
 800254e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002552:	2200      	movs	r2, #0
 8002554:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8002558:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800255c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8002560:	4642      	mov	r2, r8
 8002562:	464b      	mov	r3, r9
 8002564:	1891      	adds	r1, r2, r2
 8002566:	61b9      	str	r1, [r7, #24]
 8002568:	415b      	adcs	r3, r3
 800256a:	61fb      	str	r3, [r7, #28]
 800256c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002570:	4641      	mov	r1, r8
 8002572:	1851      	adds	r1, r2, r1
 8002574:	6139      	str	r1, [r7, #16]
 8002576:	4649      	mov	r1, r9
 8002578:	414b      	adcs	r3, r1
 800257a:	617b      	str	r3, [r7, #20]
 800257c:	f04f 0200 	mov.w	r2, #0
 8002580:	f04f 0300 	mov.w	r3, #0
 8002584:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002588:	4659      	mov	r1, fp
 800258a:	00cb      	lsls	r3, r1, #3
 800258c:	4655      	mov	r5, sl
 800258e:	ea43 7355 	orr.w	r3, r3, r5, lsr #29
 8002592:	4651      	mov	r1, sl
 8002594:	00ca      	lsls	r2, r1, #3
 8002596:	4610      	mov	r0, r2
 8002598:	4619      	mov	r1, r3
 800259a:	4603      	mov	r3, r0
 800259c:	4642      	mov	r2, r8
 800259e:	189b      	adds	r3, r3, r2
 80025a0:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80025a4:	464b      	mov	r3, r9
 80025a6:	460a      	mov	r2, r1
 80025a8:	eb42 0303 	adc.w	r3, r2, r3
 80025ac:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80025b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80025b4:	685b      	ldr	r3, [r3, #4]
 80025b6:	2200      	movs	r2, #0
 80025b8:	67bb      	str	r3, [r7, #120]	; 0x78
 80025ba:	67fa      	str	r2, [r7, #124]	; 0x7c
 80025bc:	f04f 0200 	mov.w	r2, #0
 80025c0:	f04f 0300 	mov.w	r3, #0
 80025c4:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 80025c8:	4649      	mov	r1, r9
 80025ca:	008b      	lsls	r3, r1, #2
 80025cc:	4645      	mov	r5, r8
 80025ce:	ea43 7395 	orr.w	r3, r3, r5, lsr #30
 80025d2:	4641      	mov	r1, r8
 80025d4:	008a      	lsls	r2, r1, #2
 80025d6:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 80025da:	f7fd fff1 	bl	80005c0 <__aeabi_uldivmod>
 80025de:	4602      	mov	r2, r0
 80025e0:	460b      	mov	r3, r1
 80025e2:	4611      	mov	r1, r2
 80025e4:	4b38      	ldr	r3, [pc, #224]	; (80026c8 <UART_SetConfig+0x4f4>)
 80025e6:	fba3 2301 	umull	r2, r3, r3, r1
 80025ea:	095b      	lsrs	r3, r3, #5
 80025ec:	2264      	movs	r2, #100	; 0x64
 80025ee:	fb02 f303 	mul.w	r3, r2, r3
 80025f2:	1acb      	subs	r3, r1, r3
 80025f4:	011b      	lsls	r3, r3, #4
 80025f6:	3332      	adds	r3, #50	; 0x32
 80025f8:	4a33      	ldr	r2, [pc, #204]	; (80026c8 <UART_SetConfig+0x4f4>)
 80025fa:	fba2 2303 	umull	r2, r3, r2, r3
 80025fe:	095b      	lsrs	r3, r3, #5
 8002600:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002604:	441c      	add	r4, r3
 8002606:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800260a:	2200      	movs	r2, #0
 800260c:	673b      	str	r3, [r7, #112]	; 0x70
 800260e:	677a      	str	r2, [r7, #116]	; 0x74
 8002610:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8002614:	4642      	mov	r2, r8
 8002616:	464b      	mov	r3, r9
 8002618:	1891      	adds	r1, r2, r2
 800261a:	60b9      	str	r1, [r7, #8]
 800261c:	415b      	adcs	r3, r3
 800261e:	60fb      	str	r3, [r7, #12]
 8002620:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002624:	4641      	mov	r1, r8
 8002626:	1851      	adds	r1, r2, r1
 8002628:	6039      	str	r1, [r7, #0]
 800262a:	4649      	mov	r1, r9
 800262c:	414b      	adcs	r3, r1
 800262e:	607b      	str	r3, [r7, #4]
 8002630:	f04f 0200 	mov.w	r2, #0
 8002634:	f04f 0300 	mov.w	r3, #0
 8002638:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800263c:	4659      	mov	r1, fp
 800263e:	00cb      	lsls	r3, r1, #3
 8002640:	4655      	mov	r5, sl
 8002642:	ea43 7355 	orr.w	r3, r3, r5, lsr #29
 8002646:	4651      	mov	r1, sl
 8002648:	00ca      	lsls	r2, r1, #3
 800264a:	4610      	mov	r0, r2
 800264c:	4619      	mov	r1, r3
 800264e:	4603      	mov	r3, r0
 8002650:	4642      	mov	r2, r8
 8002652:	189b      	adds	r3, r3, r2
 8002654:	66bb      	str	r3, [r7, #104]	; 0x68
 8002656:	464b      	mov	r3, r9
 8002658:	460a      	mov	r2, r1
 800265a:	eb42 0303 	adc.w	r3, r2, r3
 800265e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8002660:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002664:	685b      	ldr	r3, [r3, #4]
 8002666:	2200      	movs	r2, #0
 8002668:	663b      	str	r3, [r7, #96]	; 0x60
 800266a:	667a      	str	r2, [r7, #100]	; 0x64
 800266c:	f04f 0200 	mov.w	r2, #0
 8002670:	f04f 0300 	mov.w	r3, #0
 8002674:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8002678:	4649      	mov	r1, r9
 800267a:	008b      	lsls	r3, r1, #2
 800267c:	4645      	mov	r5, r8
 800267e:	ea43 7395 	orr.w	r3, r3, r5, lsr #30
 8002682:	4641      	mov	r1, r8
 8002684:	008a      	lsls	r2, r1, #2
 8002686:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800268a:	f7fd ff99 	bl	80005c0 <__aeabi_uldivmod>
 800268e:	4602      	mov	r2, r0
 8002690:	460b      	mov	r3, r1
 8002692:	4b0d      	ldr	r3, [pc, #52]	; (80026c8 <UART_SetConfig+0x4f4>)
 8002694:	fba3 1302 	umull	r1, r3, r3, r2
 8002698:	095b      	lsrs	r3, r3, #5
 800269a:	2164      	movs	r1, #100	; 0x64
 800269c:	fb01 f303 	mul.w	r3, r1, r3
 80026a0:	1ad3      	subs	r3, r2, r3
 80026a2:	011b      	lsls	r3, r3, #4
 80026a4:	3332      	adds	r3, #50	; 0x32
 80026a6:	4a08      	ldr	r2, [pc, #32]	; (80026c8 <UART_SetConfig+0x4f4>)
 80026a8:	fba2 2303 	umull	r2, r3, r2, r3
 80026ac:	095b      	lsrs	r3, r3, #5
 80026ae:	f003 020f 	and.w	r2, r3, #15
 80026b2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	4422      	add	r2, r4
 80026ba:	609a      	str	r2, [r3, #8]
}
 80026bc:	bf00      	nop
 80026be:	f507 7780 	add.w	r7, r7, #256	; 0x100
 80026c2:	46bd      	mov	sp, r7
 80026c4:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80026c8:	51eb851f 	.word	0x51eb851f

080026cc <push_to_change_freq>:
 * @param delay Pointer to a defined array of leds delay .
 * @param cycles Pointer to a defined array of duty_cycles configuration.
 * @param arrayLength length of the array of leds.
 * @note if duration is 0 or a negative number, it defaults to DEFAULT_DELAY.
 */
void push_to_change_freq(delay_t *delays, duty_cycle *cycles, size_t arrayLength){
 80026cc:	b590      	push	{r4, r7, lr}
 80026ce:	b08d      	sub	sp, #52	; 0x34
 80026d0:	af00      	add	r7, sp, #0
 80026d2:	60f8      	str	r0, [r7, #12]
 80026d4:	60b9      	str	r1, [r7, #8]
 80026d6:	607a      	str	r2, [r7, #4]
	if ((delays == NULL) || (cycles == NULL)){
 80026d8:	68fb      	ldr	r3, [r7, #12]
 80026da:	2b00      	cmp	r3, #0
 80026dc:	d002      	beq.n	80026e4 <push_to_change_freq+0x18>
 80026de:	68bb      	ldr	r3, [r7, #8]
 80026e0:	2b00      	cmp	r3, #0
 80026e2:	d101      	bne.n	80026e8 <push_to_change_freq+0x1c>
		Error_Handler();
 80026e4:	f000 f96e 	bl	80029c4 <Error_Handler>
	}
    debounceFSM_update();
 80026e8:	f7fe f8f4 	bl	80008d4 <debounceFSM_update>
	bool_t currentState = readKey();
 80026ec:	f7fe f968 	bl	80009c0 <readKey>
 80026f0:	4603      	mov	r3, r0
 80026f2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

    if (currentState) {
 80026f6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80026fa:	2b00      	cmp	r3, #0
 80026fc:	d05d      	beq.n	80027ba <push_to_change_freq+0xee>

        duty_cycle temp = cycles[0];
 80026fe:	68bb      	ldr	r3, [r7, #8]
 8002700:	f107 0410 	add.w	r4, r7, #16
 8002704:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002706:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
        for (uint8_t i = 0; i < arrayLength - 1; i++) {
 800270a:	2300      	movs	r3, #0
 800270c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8002710:	e014      	b.n	800273c <push_to_change_freq+0x70>
            cycles[i] = cycles[i + 1];
 8002712:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8002716:	3301      	adds	r3, #1
 8002718:	011b      	lsls	r3, r3, #4
 800271a:	68ba      	ldr	r2, [r7, #8]
 800271c:	18d1      	adds	r1, r2, r3
 800271e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8002722:	011b      	lsls	r3, r3, #4
 8002724:	68ba      	ldr	r2, [r7, #8]
 8002726:	4413      	add	r3, r2
 8002728:	461c      	mov	r4, r3
 800272a:	460b      	mov	r3, r1
 800272c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800272e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
        for (uint8_t i = 0; i < arrayLength - 1; i++) {
 8002732:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8002736:	3301      	adds	r3, #1
 8002738:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 800273c:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	3b01      	subs	r3, #1
 8002744:	429a      	cmp	r2, r3
 8002746:	d3e4      	bcc.n	8002712 <push_to_change_freq+0x46>
        }
        cycles[arrayLength - 1] = temp;
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	f103 5380 	add.w	r3, r3, #268435456	; 0x10000000
 800274e:	3b01      	subs	r3, #1
 8002750:	011b      	lsls	r3, r3, #4
 8002752:	68ba      	ldr	r2, [r7, #8]
 8002754:	4413      	add	r3, r2
 8002756:	461c      	mov	r4, r3
 8002758:	f107 0310 	add.w	r3, r7, #16
 800275c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800275e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}


        for (size_t i = 0; i < arrayLength; i++) {
 8002762:	2300      	movs	r3, #0
 8002764:	62bb      	str	r3, [r7, #40]	; 0x28
 8002766:	e024      	b.n	80027b2 <push_to_change_freq+0xe6>
        	tick_t duration = (tick_t)(cycles[i].duration)*(cycles[i].dutyCycle);
 8002768:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800276a:	011b      	lsls	r3, r3, #4
 800276c:	68ba      	ldr	r2, [r7, #8]
 800276e:	4413      	add	r3, r2
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	4618      	mov	r0, r3
 8002774:	f7fd feac 	bl	80004d0 <__aeabi_ui2f>
 8002778:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800277a:	011b      	lsls	r3, r3, #4
 800277c:	68ba      	ldr	r2, [r7, #8]
 800277e:	4413      	add	r3, r2
 8002780:	685b      	ldr	r3, [r3, #4]
 8002782:	4619      	mov	r1, r3
 8002784:	f7fd fd3a 	bl	80001fc <__aeabi_fmul>
 8002788:	4603      	mov	r3, r0
 800278a:	4618      	mov	r0, r3
 800278c:	f7fd fef8 	bl	8000580 <__aeabi_f2uiz>
 8002790:	4603      	mov	r3, r0
 8002792:	623b      	str	r3, [r7, #32]
            delayInit(&delays[i], duration );
 8002794:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002796:	4613      	mov	r3, r2
 8002798:	005b      	lsls	r3, r3, #1
 800279a:	4413      	add	r3, r2
 800279c:	009b      	lsls	r3, r3, #2
 800279e:	461a      	mov	r2, r3
 80027a0:	68fb      	ldr	r3, [r7, #12]
 80027a2:	4413      	add	r3, r2
 80027a4:	6a39      	ldr	r1, [r7, #32]
 80027a6:	4618      	mov	r0, r3
 80027a8:	f7fe f97e 	bl	8000aa8 <delayInit>
        for (size_t i = 0; i < arrayLength; i++) {
 80027ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80027ae:	3301      	adds	r3, #1
 80027b0:	62bb      	str	r3, [r7, #40]	; 0x28
 80027b2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	429a      	cmp	r2, r3
 80027b8:	d3d6      	bcc.n	8002768 <push_to_change_freq+0x9c>
        }


    }
    blink(&delays[0], &cycles[0]);
 80027ba:	68b9      	ldr	r1, [r7, #8]
 80027bc:	68f8      	ldr	r0, [r7, #12]
 80027be:	f7fe f95e 	bl	8000a7e <blink>

}
 80027c2:	bf00      	nop
 80027c4:	3734      	adds	r7, #52	; 0x34
 80027c6:	46bd      	mov	sp, r7
 80027c8:	bd90      	pop	{r4, r7, pc}
	...

080027cc <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 80027cc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80027d0:	b088      	sub	sp, #32
 80027d2:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 80027d4:	f7fe fb54 	bl	8000e80 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 80027d8:	f000 f862 	bl	80028a0 <SystemClock_Config>

	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */
	uartInit();
 80027dc:	f7fe f9a8 	bl	8000b30 <uartInit>
	/* Initialize all configured peripherals */
	BSP_PB_Init(BUTTON_USER, BUTTON_MODE_GPIO);
 80027e0:	2100      	movs	r1, #0
 80027e2:	2000      	movs	r0, #0
 80027e4:	f7fe fa88 	bl	8000cf8 <BSP_PB_Init>
	MX_GPIO_Init();
 80027e8:	f000 f8b8 	bl	800295c <MX_GPIO_Init>

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	//delayInit(&delay_a, 200);

	delay_t delayArray[arrayLength];
 80027ec:	4b2a      	ldr	r3, [pc, #168]	; (8002898 <main+0xcc>)
 80027ee:	6819      	ldr	r1, [r3, #0]
 80027f0:	460b      	mov	r3, r1
 80027f2:	3b01      	subs	r3, #1
 80027f4:	61fb      	str	r3, [r7, #28]
 80027f6:	2300      	movs	r3, #0
 80027f8:	6139      	str	r1, [r7, #16]
 80027fa:	617b      	str	r3, [r7, #20]
 80027fc:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8002800:	1890      	adds	r0, r2, r2
 8002802:	60b8      	str	r0, [r7, #8]
 8002804:	415b      	adcs	r3, r3
 8002806:	60fb      	str	r3, [r7, #12]
 8002808:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800280c:	6938      	ldr	r0, [r7, #16]
 800280e:	eb12 0800 	adds.w	r8, r2, r0
 8002812:	6978      	ldr	r0, [r7, #20]
 8002814:	eb43 0900 	adc.w	r9, r3, r0
 8002818:	f04f 0200 	mov.w	r2, #0
 800281c:	f04f 0300 	mov.w	r3, #0
 8002820:	ea4f 1349 	mov.w	r3, r9, lsl #5
 8002824:	ea43 63d8 	orr.w	r3, r3, r8, lsr #27
 8002828:	ea4f 1248 	mov.w	r2, r8, lsl #5
 800282c:	2300      	movs	r3, #0
 800282e:	468a      	mov	sl, r1
 8002830:	469b      	mov	fp, r3
 8002832:	4652      	mov	r2, sl
 8002834:	465b      	mov	r3, fp
 8002836:	1890      	adds	r0, r2, r2
 8002838:	6038      	str	r0, [r7, #0]
 800283a:	415b      	adcs	r3, r3
 800283c:	607b      	str	r3, [r7, #4]
 800283e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002842:	eb12 040a 	adds.w	r4, r2, sl
 8002846:	eb43 050b 	adc.w	r5, r3, fp
 800284a:	f04f 0200 	mov.w	r2, #0
 800284e:	f04f 0300 	mov.w	r3, #0
 8002852:	016b      	lsls	r3, r5, #5
 8002854:	ea43 63d4 	orr.w	r3, r3, r4, lsr #27
 8002858:	0162      	lsls	r2, r4, #5
 800285a:	460b      	mov	r3, r1
 800285c:	005b      	lsls	r3, r3, #1
 800285e:	440b      	add	r3, r1
 8002860:	009b      	lsls	r3, r3, #2
 8002862:	3307      	adds	r3, #7
 8002864:	08db      	lsrs	r3, r3, #3
 8002866:	00db      	lsls	r3, r3, #3
 8002868:	ebad 0d03 	sub.w	sp, sp, r3
 800286c:	466b      	mov	r3, sp
 800286e:	3303      	adds	r3, #3
 8002870:	089b      	lsrs	r3, r3, #2
 8002872:	009b      	lsls	r3, r3, #2
 8002874:	61bb      	str	r3, [r7, #24]
	debounceFSM_init();
 8002876:	f7fe f821 	bl	80008bc <debounceFSM_init>
	periodicBlinkInit(delayArray,cycles,arrayLength);
 800287a:	4b07      	ldr	r3, [pc, #28]	; (8002898 <main+0xcc>)
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	461a      	mov	r2, r3
 8002880:	4906      	ldr	r1, [pc, #24]	; (800289c <main+0xd0>)
 8002882:	69b8      	ldr	r0, [r7, #24]
 8002884:	f7fe f8ae 	bl	80009e4 <periodicBlinkInit>

	//uint32_t count = 0;
	while (1)
	{
		push_to_change_freq(delayArray, cycles, arrayLength);
 8002888:	4b03      	ldr	r3, [pc, #12]	; (8002898 <main+0xcc>)
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	461a      	mov	r2, r3
 800288e:	4903      	ldr	r1, [pc, #12]	; (800289c <main+0xd0>)
 8002890:	69b8      	ldr	r0, [r7, #24]
 8002892:	f7ff ff1b 	bl	80026cc <push_to_change_freq>
 8002896:	e7f7      	b.n	8002888 <main+0xbc>
 8002898:	2000004c 	.word	0x2000004c
 800289c:	2000001c 	.word	0x2000001c

080028a0 <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 80028a0:	b580      	push	{r7, lr}
 80028a2:	b094      	sub	sp, #80	; 0x50
 80028a4:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80028a6:	f107 0320 	add.w	r3, r7, #32
 80028aa:	2230      	movs	r2, #48	; 0x30
 80028ac:	2100      	movs	r1, #0
 80028ae:	4618      	mov	r0, r3
 80028b0:	f000 f8b7 	bl	8002a22 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80028b4:	f107 030c 	add.w	r3, r7, #12
 80028b8:	2200      	movs	r2, #0
 80028ba:	601a      	str	r2, [r3, #0]
 80028bc:	605a      	str	r2, [r3, #4]
 80028be:	609a      	str	r2, [r3, #8]
 80028c0:	60da      	str	r2, [r3, #12]
 80028c2:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	__HAL_RCC_PWR_CLK_ENABLE();
 80028c4:	2300      	movs	r3, #0
 80028c6:	60bb      	str	r3, [r7, #8]
 80028c8:	4b22      	ldr	r3, [pc, #136]	; (8002954 <SystemClock_Config+0xb4>)
 80028ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028cc:	4a21      	ldr	r2, [pc, #132]	; (8002954 <SystemClock_Config+0xb4>)
 80028ce:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80028d2:	6413      	str	r3, [r2, #64]	; 0x40
 80028d4:	4b1f      	ldr	r3, [pc, #124]	; (8002954 <SystemClock_Config+0xb4>)
 80028d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028d8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80028dc:	60bb      	str	r3, [r7, #8]
 80028de:	68bb      	ldr	r3, [r7, #8]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80028e0:	2300      	movs	r3, #0
 80028e2:	607b      	str	r3, [r7, #4]
 80028e4:	4b1c      	ldr	r3, [pc, #112]	; (8002958 <SystemClock_Config+0xb8>)
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	4a1b      	ldr	r2, [pc, #108]	; (8002958 <SystemClock_Config+0xb8>)
 80028ea:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80028ee:	6013      	str	r3, [r2, #0]
 80028f0:	4b19      	ldr	r3, [pc, #100]	; (8002958 <SystemClock_Config+0xb8>)
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80028f8:	607b      	str	r3, [r7, #4]
 80028fa:	687b      	ldr	r3, [r7, #4]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80028fc:	2302      	movs	r3, #2
 80028fe:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002900:	2301      	movs	r3, #1
 8002902:	62fb      	str	r3, [r7, #44]	; 0x2c
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8002904:	2310      	movs	r3, #16
 8002906:	633b      	str	r3, [r7, #48]	; 0x30
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8002908:	2300      	movs	r3, #0
 800290a:	63bb      	str	r3, [r7, #56]	; 0x38
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800290c:	f107 0320 	add.w	r3, r7, #32
 8002910:	4618      	mov	r0, r3
 8002912:	f7fe fe75 	bl	8001600 <HAL_RCC_OscConfig>
 8002916:	4603      	mov	r3, r0
 8002918:	2b00      	cmp	r3, #0
 800291a:	d001      	beq.n	8002920 <SystemClock_Config+0x80>
	{
		Error_Handler();
 800291c:	f000 f852 	bl	80029c4 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002920:	230f      	movs	r3, #15
 8002922:	60fb      	str	r3, [r7, #12]
			|RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8002924:	2300      	movs	r3, #0
 8002926:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002928:	2300      	movs	r3, #0
 800292a:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800292c:	2300      	movs	r3, #0
 800292e:	61bb      	str	r3, [r7, #24]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002930:	2300      	movs	r3, #0
 8002932:	61fb      	str	r3, [r7, #28]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8002934:	f107 030c 	add.w	r3, r7, #12
 8002938:	2100      	movs	r1, #0
 800293a:	4618      	mov	r0, r3
 800293c:	f7ff f8d8 	bl	8001af0 <HAL_RCC_ClockConfig>
 8002940:	4603      	mov	r3, r0
 8002942:	2b00      	cmp	r3, #0
 8002944:	d001      	beq.n	800294a <SystemClock_Config+0xaa>
	{
		Error_Handler();
 8002946:	f000 f83d 	bl	80029c4 <Error_Handler>
	}
}
 800294a:	bf00      	nop
 800294c:	3750      	adds	r7, #80	; 0x50
 800294e:	46bd      	mov	sp, r7
 8002950:	bd80      	pop	{r7, pc}
 8002952:	bf00      	nop
 8002954:	40023800 	.word	0x40023800
 8002958:	40007000 	.word	0x40007000

0800295c <MX_GPIO_Init>:
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void)
{
 800295c:	b580      	push	{r7, lr}
 800295e:	b086      	sub	sp, #24
 8002960:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002962:	1d3b      	adds	r3, r7, #4
 8002964:	2200      	movs	r2, #0
 8002966:	601a      	str	r2, [r3, #0]
 8002968:	605a      	str	r2, [r3, #4]
 800296a:	609a      	str	r2, [r3, #8]
 800296c:	60da      	str	r2, [r3, #12]
 800296e:	611a      	str	r2, [r3, #16]
	/* USER CODE BEGIN MX_GPIO_Init_1 */
	/* USER CODE END MX_GPIO_Init_1 */

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOD_CLK_ENABLE();
 8002970:	2300      	movs	r3, #0
 8002972:	603b      	str	r3, [r7, #0]
 8002974:	4b11      	ldr	r3, [pc, #68]	; (80029bc <MX_GPIO_Init+0x60>)
 8002976:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002978:	4a10      	ldr	r2, [pc, #64]	; (80029bc <MX_GPIO_Init+0x60>)
 800297a:	f043 0308 	orr.w	r3, r3, #8
 800297e:	6313      	str	r3, [r2, #48]	; 0x30
 8002980:	4b0e      	ldr	r3, [pc, #56]	; (80029bc <MX_GPIO_Init+0x60>)
 8002982:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002984:	f003 0308 	and.w	r3, r3, #8
 8002988:	603b      	str	r3, [r7, #0]
 800298a:	683b      	ldr	r3, [r7, #0]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);
 800298c:	2200      	movs	r2, #0
 800298e:	f44f 4170 	mov.w	r1, #61440	; 0xf000
 8002992:	480b      	ldr	r0, [pc, #44]	; (80029c0 <MX_GPIO_Init+0x64>)
 8002994:	f7fe fdab 	bl	80014ee <HAL_GPIO_WritePin>

	/*Configure GPIO pins : PD12 PD13 PD14 PD15 */
	GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8002998:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 800299c:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800299e:	2301      	movs	r3, #1
 80029a0:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029a2:	2300      	movs	r3, #0
 80029a4:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80029a6:	2300      	movs	r3, #0
 80029a8:	613b      	str	r3, [r7, #16]
	HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80029aa:	1d3b      	adds	r3, r7, #4
 80029ac:	4619      	mov	r1, r3
 80029ae:	4804      	ldr	r0, [pc, #16]	; (80029c0 <MX_GPIO_Init+0x64>)
 80029b0:	f7fe fbdc 	bl	800116c <HAL_GPIO_Init>

	/* USER CODE BEGIN MX_GPIO_Init_2 */
	/* USER CODE END MX_GPIO_Init_2 */
}
 80029b4:	bf00      	nop
 80029b6:	3718      	adds	r7, #24
 80029b8:	46bd      	mov	sp, r7
 80029ba:	bd80      	pop	{r7, pc}
 80029bc:	40023800 	.word	0x40023800
 80029c0:	40020c00 	.word	0x40020c00

080029c4 <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 80029c4:	b480      	push	{r7}
 80029c6:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 80029c8:	b672      	cpsid	i
}
 80029ca:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 80029cc:	e7fe      	b.n	80029cc <Error_Handler+0x8>
	...

080029d0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 80029d0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002a08 <LoopFillZerobss+0x14>
 
/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 80029d4:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80029d6:	e003      	b.n	80029e0 <LoopCopyDataInit>

080029d8 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80029d8:	4b0c      	ldr	r3, [pc, #48]	; (8002a0c <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 80029da:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80029dc:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80029de:	3104      	adds	r1, #4

080029e0 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80029e0:	480b      	ldr	r0, [pc, #44]	; (8002a10 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 80029e2:	4b0c      	ldr	r3, [pc, #48]	; (8002a14 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 80029e4:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80029e6:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80029e8:	d3f6      	bcc.n	80029d8 <CopyDataInit>
  ldr  r2, =_sbss
 80029ea:	4a0b      	ldr	r2, [pc, #44]	; (8002a18 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 80029ec:	e002      	b.n	80029f4 <LoopFillZerobss>

080029ee <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 80029ee:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80029f0:	f842 3b04 	str.w	r3, [r2], #4

080029f4 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80029f4:	4b09      	ldr	r3, [pc, #36]	; (8002a1c <LoopFillZerobss+0x28>)
  cmp  r2, r3
 80029f6:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80029f8:	d3f9      	bcc.n	80029ee <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80029fa:	f7fe f9e9 	bl	8000dd0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80029fe:	f000 f819 	bl	8002a34 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002a02:	f7ff fee3 	bl	80027cc <main>
  bx  lr    
 8002a06:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8002a08:	20030000 	.word	0x20030000
  ldr  r3, =_sidata
 8002a0c:	08002adc 	.word	0x08002adc
  ldr  r0, =_sdata
 8002a10:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8002a14:	20000050 	.word	0x20000050
  ldr  r2, =_sbss
 8002a18:	20000050 	.word	0x20000050
  ldr  r3, = _ebss
 8002a1c:	200000c8 	.word	0x200000c8

08002a20 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002a20:	e7fe      	b.n	8002a20 <ADC_IRQHandler>

08002a22 <memset>:
 8002a22:	4402      	add	r2, r0
 8002a24:	4603      	mov	r3, r0
 8002a26:	4293      	cmp	r3, r2
 8002a28:	d100      	bne.n	8002a2c <memset+0xa>
 8002a2a:	4770      	bx	lr
 8002a2c:	f803 1b01 	strb.w	r1, [r3], #1
 8002a30:	e7f9      	b.n	8002a26 <memset+0x4>
	...

08002a34 <__libc_init_array>:
 8002a34:	b570      	push	{r4, r5, r6, lr}
 8002a36:	4d0d      	ldr	r5, [pc, #52]	; (8002a6c <__libc_init_array+0x38>)
 8002a38:	4c0d      	ldr	r4, [pc, #52]	; (8002a70 <__libc_init_array+0x3c>)
 8002a3a:	1b64      	subs	r4, r4, r5
 8002a3c:	10a4      	asrs	r4, r4, #2
 8002a3e:	2600      	movs	r6, #0
 8002a40:	42a6      	cmp	r6, r4
 8002a42:	d109      	bne.n	8002a58 <__libc_init_array+0x24>
 8002a44:	4d0b      	ldr	r5, [pc, #44]	; (8002a74 <__libc_init_array+0x40>)
 8002a46:	4c0c      	ldr	r4, [pc, #48]	; (8002a78 <__libc_init_array+0x44>)
 8002a48:	f000 f818 	bl	8002a7c <_init>
 8002a4c:	1b64      	subs	r4, r4, r5
 8002a4e:	10a4      	asrs	r4, r4, #2
 8002a50:	2600      	movs	r6, #0
 8002a52:	42a6      	cmp	r6, r4
 8002a54:	d105      	bne.n	8002a62 <__libc_init_array+0x2e>
 8002a56:	bd70      	pop	{r4, r5, r6, pc}
 8002a58:	f855 3b04 	ldr.w	r3, [r5], #4
 8002a5c:	4798      	blx	r3
 8002a5e:	3601      	adds	r6, #1
 8002a60:	e7ee      	b.n	8002a40 <__libc_init_array+0xc>
 8002a62:	f855 3b04 	ldr.w	r3, [r5], #4
 8002a66:	4798      	blx	r3
 8002a68:	3601      	adds	r6, #1
 8002a6a:	e7f2      	b.n	8002a52 <__libc_init_array+0x1e>
 8002a6c:	08002ad4 	.word	0x08002ad4
 8002a70:	08002ad4 	.word	0x08002ad4
 8002a74:	08002ad4 	.word	0x08002ad4
 8002a78:	08002ad8 	.word	0x08002ad8

08002a7c <_init>:
 8002a7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002a7e:	bf00      	nop
 8002a80:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002a82:	bc08      	pop	{r3}
 8002a84:	469e      	mov	lr, r3
 8002a86:	4770      	bx	lr

08002a88 <_fini>:
 8002a88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002a8a:	bf00      	nop
 8002a8c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002a8e:	bc08      	pop	{r3}
 8002a90:	469e      	mov	lr, r3
 8002a92:	4770      	bx	lr
