
Ej0_blinky.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000268c  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000058  0800283c  0800283c  0001283c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002894  08002894  00020074  2**0
                  CONTENTS
  4 .ARM          00000008  08002894  08002894  00012894  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800289c  0800289c  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800289c  0800289c  0001289c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080028a0  080028a0  000128a0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  080028a4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020074  2**0
                  CONTENTS
 10 .bss          00000170  20000074  20000074  00020074  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  200001e4  200001e4  00020074  2**0
                  ALLOC
 12 .ARM.attributes 0000002a  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  0002009e  2**0
                  CONTENTS, READONLY
 14 .debug_info   0000507e  00000000  00000000  000200e1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00001452  00000000  00000000  0002515f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00000598  00000000  00000000  000265b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00000401  00000000  00000000  00026b50  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  0002598f  00000000  00000000  00026f51  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   00007ae9  00000000  00000000  0004c8e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000e2c51  00000000  00000000  000543c9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00001b9c  00000000  00000000  0013701c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000005b  00000000  00000000  00138bb8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000074 	.word	0x20000074
 80001cc:	00000000 	.word	0x00000000
 80001d0:	08002824 	.word	0x08002824

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000078 	.word	0x20000078
 80001ec:	08002824 	.word	0x08002824

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_uldivmod>:
 8000290:	b953      	cbnz	r3, 80002a8 <__aeabi_uldivmod+0x18>
 8000292:	b94a      	cbnz	r2, 80002a8 <__aeabi_uldivmod+0x18>
 8000294:	2900      	cmp	r1, #0
 8000296:	bf08      	it	eq
 8000298:	2800      	cmpeq	r0, #0
 800029a:	bf1c      	itt	ne
 800029c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80002a0:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80002a4:	f000 b970 	b.w	8000588 <__aeabi_idiv0>
 80002a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b0:	f000 f806 	bl	80002c0 <__udivmoddi4>
 80002b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002bc:	b004      	add	sp, #16
 80002be:	4770      	bx	lr

080002c0 <__udivmoddi4>:
 80002c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002c4:	9e08      	ldr	r6, [sp, #32]
 80002c6:	460d      	mov	r5, r1
 80002c8:	4604      	mov	r4, r0
 80002ca:	460f      	mov	r7, r1
 80002cc:	2b00      	cmp	r3, #0
 80002ce:	d14a      	bne.n	8000366 <__udivmoddi4+0xa6>
 80002d0:	428a      	cmp	r2, r1
 80002d2:	4694      	mov	ip, r2
 80002d4:	d965      	bls.n	80003a2 <__udivmoddi4+0xe2>
 80002d6:	fab2 f382 	clz	r3, r2
 80002da:	b143      	cbz	r3, 80002ee <__udivmoddi4+0x2e>
 80002dc:	fa02 fc03 	lsl.w	ip, r2, r3
 80002e0:	f1c3 0220 	rsb	r2, r3, #32
 80002e4:	409f      	lsls	r7, r3
 80002e6:	fa20 f202 	lsr.w	r2, r0, r2
 80002ea:	4317      	orrs	r7, r2
 80002ec:	409c      	lsls	r4, r3
 80002ee:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80002f2:	fa1f f58c 	uxth.w	r5, ip
 80002f6:	fbb7 f1fe 	udiv	r1, r7, lr
 80002fa:	0c22      	lsrs	r2, r4, #16
 80002fc:	fb0e 7711 	mls	r7, lr, r1, r7
 8000300:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000304:	fb01 f005 	mul.w	r0, r1, r5
 8000308:	4290      	cmp	r0, r2
 800030a:	d90a      	bls.n	8000322 <__udivmoddi4+0x62>
 800030c:	eb1c 0202 	adds.w	r2, ip, r2
 8000310:	f101 37ff 	add.w	r7, r1, #4294967295	; 0xffffffff
 8000314:	f080 811b 	bcs.w	800054e <__udivmoddi4+0x28e>
 8000318:	4290      	cmp	r0, r2
 800031a:	f240 8118 	bls.w	800054e <__udivmoddi4+0x28e>
 800031e:	3902      	subs	r1, #2
 8000320:	4462      	add	r2, ip
 8000322:	1a12      	subs	r2, r2, r0
 8000324:	b2a4      	uxth	r4, r4
 8000326:	fbb2 f0fe 	udiv	r0, r2, lr
 800032a:	fb0e 2210 	mls	r2, lr, r0, r2
 800032e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000332:	fb00 f505 	mul.w	r5, r0, r5
 8000336:	42a5      	cmp	r5, r4
 8000338:	d90a      	bls.n	8000350 <__udivmoddi4+0x90>
 800033a:	eb1c 0404 	adds.w	r4, ip, r4
 800033e:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000342:	f080 8106 	bcs.w	8000552 <__udivmoddi4+0x292>
 8000346:	42a5      	cmp	r5, r4
 8000348:	f240 8103 	bls.w	8000552 <__udivmoddi4+0x292>
 800034c:	4464      	add	r4, ip
 800034e:	3802      	subs	r0, #2
 8000350:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000354:	1b64      	subs	r4, r4, r5
 8000356:	2100      	movs	r1, #0
 8000358:	b11e      	cbz	r6, 8000362 <__udivmoddi4+0xa2>
 800035a:	40dc      	lsrs	r4, r3
 800035c:	2300      	movs	r3, #0
 800035e:	e9c6 4300 	strd	r4, r3, [r6]
 8000362:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000366:	428b      	cmp	r3, r1
 8000368:	d908      	bls.n	800037c <__udivmoddi4+0xbc>
 800036a:	2e00      	cmp	r6, #0
 800036c:	f000 80ec 	beq.w	8000548 <__udivmoddi4+0x288>
 8000370:	2100      	movs	r1, #0
 8000372:	e9c6 0500 	strd	r0, r5, [r6]
 8000376:	4608      	mov	r0, r1
 8000378:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800037c:	fab3 f183 	clz	r1, r3
 8000380:	2900      	cmp	r1, #0
 8000382:	d149      	bne.n	8000418 <__udivmoddi4+0x158>
 8000384:	42ab      	cmp	r3, r5
 8000386:	d302      	bcc.n	800038e <__udivmoddi4+0xce>
 8000388:	4282      	cmp	r2, r0
 800038a:	f200 80f7 	bhi.w	800057c <__udivmoddi4+0x2bc>
 800038e:	1a84      	subs	r4, r0, r2
 8000390:	eb65 0203 	sbc.w	r2, r5, r3
 8000394:	2001      	movs	r0, #1
 8000396:	4617      	mov	r7, r2
 8000398:	2e00      	cmp	r6, #0
 800039a:	d0e2      	beq.n	8000362 <__udivmoddi4+0xa2>
 800039c:	e9c6 4700 	strd	r4, r7, [r6]
 80003a0:	e7df      	b.n	8000362 <__udivmoddi4+0xa2>
 80003a2:	b902      	cbnz	r2, 80003a6 <__udivmoddi4+0xe6>
 80003a4:	deff      	udf	#255	; 0xff
 80003a6:	fab2 f382 	clz	r3, r2
 80003aa:	2b00      	cmp	r3, #0
 80003ac:	f040 808f 	bne.w	80004ce <__udivmoddi4+0x20e>
 80003b0:	1a8a      	subs	r2, r1, r2
 80003b2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003b6:	fa1f fe8c 	uxth.w	lr, ip
 80003ba:	2101      	movs	r1, #1
 80003bc:	fbb2 f5f7 	udiv	r5, r2, r7
 80003c0:	fb07 2015 	mls	r0, r7, r5, r2
 80003c4:	0c22      	lsrs	r2, r4, #16
 80003c6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80003ca:	fb0e f005 	mul.w	r0, lr, r5
 80003ce:	4290      	cmp	r0, r2
 80003d0:	d908      	bls.n	80003e4 <__udivmoddi4+0x124>
 80003d2:	eb1c 0202 	adds.w	r2, ip, r2
 80003d6:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 80003da:	d202      	bcs.n	80003e2 <__udivmoddi4+0x122>
 80003dc:	4290      	cmp	r0, r2
 80003de:	f200 80ca 	bhi.w	8000576 <__udivmoddi4+0x2b6>
 80003e2:	4645      	mov	r5, r8
 80003e4:	1a12      	subs	r2, r2, r0
 80003e6:	b2a4      	uxth	r4, r4
 80003e8:	fbb2 f0f7 	udiv	r0, r2, r7
 80003ec:	fb07 2210 	mls	r2, r7, r0, r2
 80003f0:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80003f4:	fb0e fe00 	mul.w	lr, lr, r0
 80003f8:	45a6      	cmp	lr, r4
 80003fa:	d908      	bls.n	800040e <__udivmoddi4+0x14e>
 80003fc:	eb1c 0404 	adds.w	r4, ip, r4
 8000400:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000404:	d202      	bcs.n	800040c <__udivmoddi4+0x14c>
 8000406:	45a6      	cmp	lr, r4
 8000408:	f200 80ba 	bhi.w	8000580 <__udivmoddi4+0x2c0>
 800040c:	4610      	mov	r0, r2
 800040e:	eba4 040e 	sub.w	r4, r4, lr
 8000412:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000416:	e79f      	b.n	8000358 <__udivmoddi4+0x98>
 8000418:	f1c1 0720 	rsb	r7, r1, #32
 800041c:	408b      	lsls	r3, r1
 800041e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000422:	ea4c 0c03 	orr.w	ip, ip, r3
 8000426:	fa05 f401 	lsl.w	r4, r5, r1
 800042a:	fa20 f307 	lsr.w	r3, r0, r7
 800042e:	40fd      	lsrs	r5, r7
 8000430:	4323      	orrs	r3, r4
 8000432:	fa00 f901 	lsl.w	r9, r0, r1
 8000436:	ea4f 401c 	mov.w	r0, ip, lsr #16
 800043a:	fa1f fe8c 	uxth.w	lr, ip
 800043e:	fbb5 f8f0 	udiv	r8, r5, r0
 8000442:	0c1c      	lsrs	r4, r3, #16
 8000444:	fb00 5518 	mls	r5, r0, r8, r5
 8000448:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 800044c:	fb08 f50e 	mul.w	r5, r8, lr
 8000450:	42a5      	cmp	r5, r4
 8000452:	fa02 f201 	lsl.w	r2, r2, r1
 8000456:	d90b      	bls.n	8000470 <__udivmoddi4+0x1b0>
 8000458:	eb1c 0404 	adds.w	r4, ip, r4
 800045c:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000460:	f080 8087 	bcs.w	8000572 <__udivmoddi4+0x2b2>
 8000464:	42a5      	cmp	r5, r4
 8000466:	f240 8084 	bls.w	8000572 <__udivmoddi4+0x2b2>
 800046a:	f1a8 0802 	sub.w	r8, r8, #2
 800046e:	4464      	add	r4, ip
 8000470:	1b64      	subs	r4, r4, r5
 8000472:	b29d      	uxth	r5, r3
 8000474:	fbb4 f3f0 	udiv	r3, r4, r0
 8000478:	fb00 4413 	mls	r4, r0, r3, r4
 800047c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000480:	fb03 fe0e 	mul.w	lr, r3, lr
 8000484:	45a6      	cmp	lr, r4
 8000486:	d908      	bls.n	800049a <__udivmoddi4+0x1da>
 8000488:	eb1c 0404 	adds.w	r4, ip, r4
 800048c:	f103 30ff 	add.w	r0, r3, #4294967295	; 0xffffffff
 8000490:	d26b      	bcs.n	800056a <__udivmoddi4+0x2aa>
 8000492:	45a6      	cmp	lr, r4
 8000494:	d969      	bls.n	800056a <__udivmoddi4+0x2aa>
 8000496:	3b02      	subs	r3, #2
 8000498:	4464      	add	r4, ip
 800049a:	ea43 4008 	orr.w	r0, r3, r8, lsl #16
 800049e:	fba0 8302 	umull	r8, r3, r0, r2
 80004a2:	eba4 040e 	sub.w	r4, r4, lr
 80004a6:	429c      	cmp	r4, r3
 80004a8:	46c6      	mov	lr, r8
 80004aa:	461d      	mov	r5, r3
 80004ac:	d355      	bcc.n	800055a <__udivmoddi4+0x29a>
 80004ae:	d052      	beq.n	8000556 <__udivmoddi4+0x296>
 80004b0:	b156      	cbz	r6, 80004c8 <__udivmoddi4+0x208>
 80004b2:	ebb9 030e 	subs.w	r3, r9, lr
 80004b6:	eb64 0405 	sbc.w	r4, r4, r5
 80004ba:	fa04 f707 	lsl.w	r7, r4, r7
 80004be:	40cb      	lsrs	r3, r1
 80004c0:	40cc      	lsrs	r4, r1
 80004c2:	431f      	orrs	r7, r3
 80004c4:	e9c6 7400 	strd	r7, r4, [r6]
 80004c8:	2100      	movs	r1, #0
 80004ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ce:	f1c3 0120 	rsb	r1, r3, #32
 80004d2:	fa02 fc03 	lsl.w	ip, r2, r3
 80004d6:	fa20 f201 	lsr.w	r2, r0, r1
 80004da:	fa25 f101 	lsr.w	r1, r5, r1
 80004de:	409d      	lsls	r5, r3
 80004e0:	432a      	orrs	r2, r5
 80004e2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004e6:	fa1f fe8c 	uxth.w	lr, ip
 80004ea:	fbb1 f0f7 	udiv	r0, r1, r7
 80004ee:	fb07 1510 	mls	r5, r7, r0, r1
 80004f2:	0c11      	lsrs	r1, r2, #16
 80004f4:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 80004f8:	fb00 f50e 	mul.w	r5, r0, lr
 80004fc:	428d      	cmp	r5, r1
 80004fe:	fa04 f403 	lsl.w	r4, r4, r3
 8000502:	d908      	bls.n	8000516 <__udivmoddi4+0x256>
 8000504:	eb1c 0101 	adds.w	r1, ip, r1
 8000508:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 800050c:	d22f      	bcs.n	800056e <__udivmoddi4+0x2ae>
 800050e:	428d      	cmp	r5, r1
 8000510:	d92d      	bls.n	800056e <__udivmoddi4+0x2ae>
 8000512:	3802      	subs	r0, #2
 8000514:	4461      	add	r1, ip
 8000516:	1b49      	subs	r1, r1, r5
 8000518:	b292      	uxth	r2, r2
 800051a:	fbb1 f5f7 	udiv	r5, r1, r7
 800051e:	fb07 1115 	mls	r1, r7, r5, r1
 8000522:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000526:	fb05 f10e 	mul.w	r1, r5, lr
 800052a:	4291      	cmp	r1, r2
 800052c:	d908      	bls.n	8000540 <__udivmoddi4+0x280>
 800052e:	eb1c 0202 	adds.w	r2, ip, r2
 8000532:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000536:	d216      	bcs.n	8000566 <__udivmoddi4+0x2a6>
 8000538:	4291      	cmp	r1, r2
 800053a:	d914      	bls.n	8000566 <__udivmoddi4+0x2a6>
 800053c:	3d02      	subs	r5, #2
 800053e:	4462      	add	r2, ip
 8000540:	1a52      	subs	r2, r2, r1
 8000542:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000546:	e739      	b.n	80003bc <__udivmoddi4+0xfc>
 8000548:	4631      	mov	r1, r6
 800054a:	4630      	mov	r0, r6
 800054c:	e709      	b.n	8000362 <__udivmoddi4+0xa2>
 800054e:	4639      	mov	r1, r7
 8000550:	e6e7      	b.n	8000322 <__udivmoddi4+0x62>
 8000552:	4610      	mov	r0, r2
 8000554:	e6fc      	b.n	8000350 <__udivmoddi4+0x90>
 8000556:	45c1      	cmp	r9, r8
 8000558:	d2aa      	bcs.n	80004b0 <__udivmoddi4+0x1f0>
 800055a:	ebb8 0e02 	subs.w	lr, r8, r2
 800055e:	eb63 050c 	sbc.w	r5, r3, ip
 8000562:	3801      	subs	r0, #1
 8000564:	e7a4      	b.n	80004b0 <__udivmoddi4+0x1f0>
 8000566:	4645      	mov	r5, r8
 8000568:	e7ea      	b.n	8000540 <__udivmoddi4+0x280>
 800056a:	4603      	mov	r3, r0
 800056c:	e795      	b.n	800049a <__udivmoddi4+0x1da>
 800056e:	4640      	mov	r0, r8
 8000570:	e7d1      	b.n	8000516 <__udivmoddi4+0x256>
 8000572:	46d0      	mov	r8, sl
 8000574:	e77c      	b.n	8000470 <__udivmoddi4+0x1b0>
 8000576:	3d02      	subs	r5, #2
 8000578:	4462      	add	r2, ip
 800057a:	e733      	b.n	80003e4 <__udivmoddi4+0x124>
 800057c:	4608      	mov	r0, r1
 800057e:	e70b      	b.n	8000398 <__udivmoddi4+0xd8>
 8000580:	4464      	add	r4, ip
 8000582:	3802      	subs	r0, #2
 8000584:	e743      	b.n	800040e <__udivmoddi4+0x14e>
 8000586:	bf00      	nop

08000588 <__aeabi_idiv0>:
 8000588:	4770      	bx	lr
 800058a:	bf00      	nop

0800058c <BSP_LED_Init>:
  *     @arg  LED1
  *     @arg  LED2
  *     @arg  LED3
  */
void BSP_LED_Init(Led_TypeDef Led)
{
 800058c:	b580      	push	{r7, lr}
 800058e:	b08a      	sub	sp, #40	; 0x28
 8000590:	af00      	add	r7, sp, #0
 8000592:	4603      	mov	r3, r0
 8000594:	71fb      	strb	r3, [r7, #7]
  GPIO_InitTypeDef  GPIO_InitStruct;
  
  /* Enable the GPIO_LED Clock */
  LEDx_GPIO_CLK_ENABLE(Led);
 8000596:	79fb      	ldrb	r3, [r7, #7]
 8000598:	2b00      	cmp	r3, #0
 800059a:	d10e      	bne.n	80005ba <BSP_LED_Init+0x2e>
 800059c:	2300      	movs	r3, #0
 800059e:	613b      	str	r3, [r7, #16]
 80005a0:	4b1f      	ldr	r3, [pc, #124]	; (8000620 <BSP_LED_Init+0x94>)
 80005a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005a4:	4a1e      	ldr	r2, [pc, #120]	; (8000620 <BSP_LED_Init+0x94>)
 80005a6:	f043 0302 	orr.w	r3, r3, #2
 80005aa:	6313      	str	r3, [r2, #48]	; 0x30
 80005ac:	4b1c      	ldr	r3, [pc, #112]	; (8000620 <BSP_LED_Init+0x94>)
 80005ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005b0:	f003 0302 	and.w	r3, r3, #2
 80005b4:	613b      	str	r3, [r7, #16]
 80005b6:	693b      	ldr	r3, [r7, #16]
 80005b8:	e00d      	b.n	80005d6 <BSP_LED_Init+0x4a>
 80005ba:	2300      	movs	r3, #0
 80005bc:	60fb      	str	r3, [r7, #12]
 80005be:	4b18      	ldr	r3, [pc, #96]	; (8000620 <BSP_LED_Init+0x94>)
 80005c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005c2:	4a17      	ldr	r2, [pc, #92]	; (8000620 <BSP_LED_Init+0x94>)
 80005c4:	f043 0302 	orr.w	r3, r3, #2
 80005c8:	6313      	str	r3, [r2, #48]	; 0x30
 80005ca:	4b15      	ldr	r3, [pc, #84]	; (8000620 <BSP_LED_Init+0x94>)
 80005cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005ce:	f003 0302 	and.w	r3, r3, #2
 80005d2:	60fb      	str	r3, [r7, #12]
 80005d4:	68fb      	ldr	r3, [r7, #12]
  
  /* Configure the GPIO_LED pin */
  GPIO_InitStruct.Pin = GPIO_PIN[Led];
 80005d6:	79fb      	ldrb	r3, [r7, #7]
 80005d8:	4a12      	ldr	r2, [pc, #72]	; (8000624 <BSP_LED_Init+0x98>)
 80005da:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80005de:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80005e0:	2301      	movs	r3, #1
 80005e2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005e4:	2300      	movs	r3, #0
 80005e6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FAST;
 80005e8:	2302      	movs	r3, #2
 80005ea:	623b      	str	r3, [r7, #32]
  
  HAL_GPIO_Init(GPIO_PORT[Led], &GPIO_InitStruct);
 80005ec:	79fb      	ldrb	r3, [r7, #7]
 80005ee:	4a0e      	ldr	r2, [pc, #56]	; (8000628 <BSP_LED_Init+0x9c>)
 80005f0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80005f4:	f107 0214 	add.w	r2, r7, #20
 80005f8:	4611      	mov	r1, r2
 80005fa:	4618      	mov	r0, r3
 80005fc:	f000 fab2 	bl	8000b64 <HAL_GPIO_Init>
  HAL_GPIO_WritePin(GPIO_PORT[Led], GPIO_PIN[Led], GPIO_PIN_RESET); 
 8000600:	79fb      	ldrb	r3, [r7, #7]
 8000602:	4a09      	ldr	r2, [pc, #36]	; (8000628 <BSP_LED_Init+0x9c>)
 8000604:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8000608:	79fb      	ldrb	r3, [r7, #7]
 800060a:	4a06      	ldr	r2, [pc, #24]	; (8000624 <BSP_LED_Init+0x98>)
 800060c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000610:	2200      	movs	r2, #0
 8000612:	4619      	mov	r1, r3
 8000614:	f000 fc50 	bl	8000eb8 <HAL_GPIO_WritePin>
}
 8000618:	bf00      	nop
 800061a:	3728      	adds	r7, #40	; 0x28
 800061c:	46bd      	mov	sp, r7
 800061e:	bd80      	pop	{r7, pc}
 8000620:	40023800 	.word	0x40023800
 8000624:	08002848 	.word	0x08002848
 8000628:	20000000 	.word	0x20000000

0800062c <BSP_LED_On>:
  * @param  Led: Specifies the Led to be set on. 
  *   This parameter can be one of following parameters:
  *     @arg LED2
  */
void BSP_LED_On(Led_TypeDef Led)
{
 800062c:	b580      	push	{r7, lr}
 800062e:	b082      	sub	sp, #8
 8000630:	af00      	add	r7, sp, #0
 8000632:	4603      	mov	r3, r0
 8000634:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_WritePin(GPIO_PORT[Led], GPIO_PIN[Led], GPIO_PIN_SET); 
 8000636:	79fb      	ldrb	r3, [r7, #7]
 8000638:	4a07      	ldr	r2, [pc, #28]	; (8000658 <BSP_LED_On+0x2c>)
 800063a:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800063e:	79fb      	ldrb	r3, [r7, #7]
 8000640:	4a06      	ldr	r2, [pc, #24]	; (800065c <BSP_LED_On+0x30>)
 8000642:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000646:	2201      	movs	r2, #1
 8000648:	4619      	mov	r1, r3
 800064a:	f000 fc35 	bl	8000eb8 <HAL_GPIO_WritePin>
}
 800064e:	bf00      	nop
 8000650:	3708      	adds	r7, #8
 8000652:	46bd      	mov	sp, r7
 8000654:	bd80      	pop	{r7, pc}
 8000656:	bf00      	nop
 8000658:	20000000 	.word	0x20000000
 800065c:	08002848 	.word	0x08002848

08000660 <BSP_LED_Off>:
  *     @arg  LED1
  *     @arg  LED2
  *     @arg  LED3
  */
void BSP_LED_Off(Led_TypeDef Led)
{
 8000660:	b580      	push	{r7, lr}
 8000662:	b082      	sub	sp, #8
 8000664:	af00      	add	r7, sp, #0
 8000666:	4603      	mov	r3, r0
 8000668:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_WritePin(GPIO_PORT[Led], GPIO_PIN[Led], GPIO_PIN_RESET); 
 800066a:	79fb      	ldrb	r3, [r7, #7]
 800066c:	4a07      	ldr	r2, [pc, #28]	; (800068c <BSP_LED_Off+0x2c>)
 800066e:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8000672:	79fb      	ldrb	r3, [r7, #7]
 8000674:	4a06      	ldr	r2, [pc, #24]	; (8000690 <BSP_LED_Off+0x30>)
 8000676:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800067a:	2200      	movs	r2, #0
 800067c:	4619      	mov	r1, r3
 800067e:	f000 fc1b 	bl	8000eb8 <HAL_GPIO_WritePin>
}
 8000682:	bf00      	nop
 8000684:	3708      	adds	r7, #8
 8000686:	46bd      	mov	sp, r7
 8000688:	bd80      	pop	{r7, pc}
 800068a:	bf00      	nop
 800068c:	20000000 	.word	0x20000000
 8000690:	08002848 	.word	0x08002848

08000694 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000694:	b480      	push	{r7}
 8000696:	af00      	add	r7, sp, #0
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8000698:	4b12      	ldr	r3, [pc, #72]	; (80006e4 <SystemInit+0x50>)
 800069a:	681b      	ldr	r3, [r3, #0]
 800069c:	4a11      	ldr	r2, [pc, #68]	; (80006e4 <SystemInit+0x50>)
 800069e:	f043 0301 	orr.w	r3, r3, #1
 80006a2:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80006a4:	4b0f      	ldr	r3, [pc, #60]	; (80006e4 <SystemInit+0x50>)
 80006a6:	2200      	movs	r2, #0
 80006a8:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 80006aa:	4b0e      	ldr	r3, [pc, #56]	; (80006e4 <SystemInit+0x50>)
 80006ac:	681b      	ldr	r3, [r3, #0]
 80006ae:	4a0d      	ldr	r2, [pc, #52]	; (80006e4 <SystemInit+0x50>)
 80006b0:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 80006b4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80006b8:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 80006ba:	4b0a      	ldr	r3, [pc, #40]	; (80006e4 <SystemInit+0x50>)
 80006bc:	4a0a      	ldr	r2, [pc, #40]	; (80006e8 <SystemInit+0x54>)
 80006be:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 80006c0:	4b08      	ldr	r3, [pc, #32]	; (80006e4 <SystemInit+0x50>)
 80006c2:	681b      	ldr	r3, [r3, #0]
 80006c4:	4a07      	ldr	r2, [pc, #28]	; (80006e4 <SystemInit+0x50>)
 80006c6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80006ca:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 80006cc:	4b05      	ldr	r3, [pc, #20]	; (80006e4 <SystemInit+0x50>)
 80006ce:	2200      	movs	r2, #0
 80006d0:	60da      	str	r2, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80006d2:	4b06      	ldr	r3, [pc, #24]	; (80006ec <SystemInit+0x58>)
 80006d4:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80006d8:	609a      	str	r2, [r3, #8]
#endif
}
 80006da:	bf00      	nop
 80006dc:	46bd      	mov	sp, r7
 80006de:	bc80      	pop	{r7}
 80006e0:	4770      	bx	lr
 80006e2:	bf00      	nop
 80006e4:	40023800 	.word	0x40023800
 80006e8:	24003010 	.word	0x24003010
 80006ec:	e000ed00 	.word	0xe000ed00

080006f0 <NMI_Handler>:
  * @brief   This function handles NMI exception.
  * @param  None
  * @retval None
  */
void NMI_Handler(void)
{
 80006f0:	b480      	push	{r7}
 80006f2:	af00      	add	r7, sp, #0
}
 80006f4:	bf00      	nop
 80006f6:	46bd      	mov	sp, r7
 80006f8:	bc80      	pop	{r7}
 80006fa:	4770      	bx	lr

080006fc <HardFault_Handler>:
  * @brief  This function handles Hard Fault exception.
  * @param  None
  * @retval None
  */
void HardFault_Handler(void)
{
 80006fc:	b480      	push	{r7}
 80006fe:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Hard Fault exception occurs */
  while (1)
 8000700:	e7fe      	b.n	8000700 <HardFault_Handler+0x4>

08000702 <MemManage_Handler>:
  * @brief  This function handles Memory Manage exception.
  * @param  None
  * @retval None
  */
void MemManage_Handler(void)
{
 8000702:	b480      	push	{r7}
 8000704:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Memory Manage exception occurs */
  while (1)
 8000706:	e7fe      	b.n	8000706 <MemManage_Handler+0x4>

08000708 <BusFault_Handler>:
  * @brief  This function handles Bus Fault exception.
  * @param  None
  * @retval None
  */
void BusFault_Handler(void)
{
 8000708:	b480      	push	{r7}
 800070a:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Bus Fault exception occurs */
  while (1)
 800070c:	e7fe      	b.n	800070c <BusFault_Handler+0x4>

0800070e <UsageFault_Handler>:
  * @brief  This function handles Usage Fault exception.
  * @param  None
  * @retval None
  */
void UsageFault_Handler(void)
{
 800070e:	b480      	push	{r7}
 8000710:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Usage Fault exception occurs */
  while (1)
 8000712:	e7fe      	b.n	8000712 <UsageFault_Handler+0x4>

08000714 <SVC_Handler>:
  * @brief  This function handles SVCall exception.
  * @param  None
  * @retval None
  */
void SVC_Handler(void)
{
 8000714:	b480      	push	{r7}
 8000716:	af00      	add	r7, sp, #0
}
 8000718:	bf00      	nop
 800071a:	46bd      	mov	sp, r7
 800071c:	bc80      	pop	{r7}
 800071e:	4770      	bx	lr

08000720 <DebugMon_Handler>:
  * @brief  This function handles Debug Monitor exception.
  * @param  None
  * @retval None
  */
void DebugMon_Handler(void)
{
 8000720:	b480      	push	{r7}
 8000722:	af00      	add	r7, sp, #0
}
 8000724:	bf00      	nop
 8000726:	46bd      	mov	sp, r7
 8000728:	bc80      	pop	{r7}
 800072a:	4770      	bx	lr

0800072c <PendSV_Handler>:
  * @brief  This function handles PendSVC exception.
  * @param  None
  * @retval None
  */
void PendSV_Handler(void)
{
 800072c:	b480      	push	{r7}
 800072e:	af00      	add	r7, sp, #0
}
 8000730:	bf00      	nop
 8000732:	46bd      	mov	sp, r7
 8000734:	bc80      	pop	{r7}
 8000736:	4770      	bx	lr

08000738 <SysTick_Handler>:
  * @brief  This function handles SysTick Handler.
  * @param  None
  * @retval None
  */
void SysTick_Handler(void)
{
 8000738:	b580      	push	{r7, lr}
 800073a:	af00      	add	r7, sp, #0
    HAL_IncTick();
 800073c:	f000 f8ee 	bl	800091c <HAL_IncTick>
}
 8000740:	bf00      	nop
 8000742:	bd80      	pop	{r7, pc}

08000744 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000744:	b580      	push	{r7, lr}
 8000746:	b086      	sub	sp, #24
 8000748:	af00      	add	r7, sp, #0
 800074a:	60f8      	str	r0, [r7, #12]
 800074c:	60b9      	str	r1, [r7, #8]
 800074e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000750:	2300      	movs	r3, #0
 8000752:	617b      	str	r3, [r7, #20]
 8000754:	e00a      	b.n	800076c <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000756:	f3af 8000 	nop.w
 800075a:	4601      	mov	r1, r0
 800075c:	68bb      	ldr	r3, [r7, #8]
 800075e:	1c5a      	adds	r2, r3, #1
 8000760:	60ba      	str	r2, [r7, #8]
 8000762:	b2ca      	uxtb	r2, r1
 8000764:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000766:	697b      	ldr	r3, [r7, #20]
 8000768:	3301      	adds	r3, #1
 800076a:	617b      	str	r3, [r7, #20]
 800076c:	697a      	ldr	r2, [r7, #20]
 800076e:	687b      	ldr	r3, [r7, #4]
 8000770:	429a      	cmp	r2, r3
 8000772:	dbf0      	blt.n	8000756 <_read+0x12>
	}

return len;
 8000774:	687b      	ldr	r3, [r7, #4]
}
 8000776:	4618      	mov	r0, r3
 8000778:	3718      	adds	r7, #24
 800077a:	46bd      	mov	sp, r7
 800077c:	bd80      	pop	{r7, pc}

0800077e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800077e:	b580      	push	{r7, lr}
 8000780:	b086      	sub	sp, #24
 8000782:	af00      	add	r7, sp, #0
 8000784:	60f8      	str	r0, [r7, #12]
 8000786:	60b9      	str	r1, [r7, #8]
 8000788:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800078a:	2300      	movs	r3, #0
 800078c:	617b      	str	r3, [r7, #20]
 800078e:	e009      	b.n	80007a4 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8000790:	68bb      	ldr	r3, [r7, #8]
 8000792:	1c5a      	adds	r2, r3, #1
 8000794:	60ba      	str	r2, [r7, #8]
 8000796:	781b      	ldrb	r3, [r3, #0]
 8000798:	4618      	mov	r0, r3
 800079a:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800079e:	697b      	ldr	r3, [r7, #20]
 80007a0:	3301      	adds	r3, #1
 80007a2:	617b      	str	r3, [r7, #20]
 80007a4:	697a      	ldr	r2, [r7, #20]
 80007a6:	687b      	ldr	r3, [r7, #4]
 80007a8:	429a      	cmp	r2, r3
 80007aa:	dbf1      	blt.n	8000790 <_write+0x12>
	}
	return len;
 80007ac:	687b      	ldr	r3, [r7, #4]
}
 80007ae:	4618      	mov	r0, r3
 80007b0:	3718      	adds	r7, #24
 80007b2:	46bd      	mov	sp, r7
 80007b4:	bd80      	pop	{r7, pc}

080007b6 <_close>:

int _close(int file)
{
 80007b6:	b480      	push	{r7}
 80007b8:	b083      	sub	sp, #12
 80007ba:	af00      	add	r7, sp, #0
 80007bc:	6078      	str	r0, [r7, #4]
	return -1;
 80007be:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 80007c2:	4618      	mov	r0, r3
 80007c4:	370c      	adds	r7, #12
 80007c6:	46bd      	mov	sp, r7
 80007c8:	bc80      	pop	{r7}
 80007ca:	4770      	bx	lr

080007cc <_fstat>:


int _fstat(int file, struct stat *st)
{
 80007cc:	b480      	push	{r7}
 80007ce:	b083      	sub	sp, #12
 80007d0:	af00      	add	r7, sp, #0
 80007d2:	6078      	str	r0, [r7, #4]
 80007d4:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80007d6:	683b      	ldr	r3, [r7, #0]
 80007d8:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80007dc:	605a      	str	r2, [r3, #4]
	return 0;
 80007de:	2300      	movs	r3, #0
}
 80007e0:	4618      	mov	r0, r3
 80007e2:	370c      	adds	r7, #12
 80007e4:	46bd      	mov	sp, r7
 80007e6:	bc80      	pop	{r7}
 80007e8:	4770      	bx	lr

080007ea <_isatty>:

int _isatty(int file)
{
 80007ea:	b480      	push	{r7}
 80007ec:	b083      	sub	sp, #12
 80007ee:	af00      	add	r7, sp, #0
 80007f0:	6078      	str	r0, [r7, #4]
	return 1;
 80007f2:	2301      	movs	r3, #1
}
 80007f4:	4618      	mov	r0, r3
 80007f6:	370c      	adds	r7, #12
 80007f8:	46bd      	mov	sp, r7
 80007fa:	bc80      	pop	{r7}
 80007fc:	4770      	bx	lr

080007fe <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80007fe:	b480      	push	{r7}
 8000800:	b085      	sub	sp, #20
 8000802:	af00      	add	r7, sp, #0
 8000804:	60f8      	str	r0, [r7, #12]
 8000806:	60b9      	str	r1, [r7, #8]
 8000808:	607a      	str	r2, [r7, #4]
	return 0;
 800080a:	2300      	movs	r3, #0
}
 800080c:	4618      	mov	r0, r3
 800080e:	3714      	adds	r7, #20
 8000810:	46bd      	mov	sp, r7
 8000812:	bc80      	pop	{r7}
 8000814:	4770      	bx	lr
	...

08000818 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000818:	b580      	push	{r7, lr}
 800081a:	b086      	sub	sp, #24
 800081c:	af00      	add	r7, sp, #0
 800081e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000820:	4a14      	ldr	r2, [pc, #80]	; (8000874 <_sbrk+0x5c>)
 8000822:	4b15      	ldr	r3, [pc, #84]	; (8000878 <_sbrk+0x60>)
 8000824:	1ad3      	subs	r3, r2, r3
 8000826:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000828:	697b      	ldr	r3, [r7, #20]
 800082a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800082c:	4b13      	ldr	r3, [pc, #76]	; (800087c <_sbrk+0x64>)
 800082e:	681b      	ldr	r3, [r3, #0]
 8000830:	2b00      	cmp	r3, #0
 8000832:	d102      	bne.n	800083a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000834:	4b11      	ldr	r3, [pc, #68]	; (800087c <_sbrk+0x64>)
 8000836:	4a12      	ldr	r2, [pc, #72]	; (8000880 <_sbrk+0x68>)
 8000838:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800083a:	4b10      	ldr	r3, [pc, #64]	; (800087c <_sbrk+0x64>)
 800083c:	681a      	ldr	r2, [r3, #0]
 800083e:	687b      	ldr	r3, [r7, #4]
 8000840:	4413      	add	r3, r2
 8000842:	693a      	ldr	r2, [r7, #16]
 8000844:	429a      	cmp	r2, r3
 8000846:	d207      	bcs.n	8000858 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000848:	f001 fa22 	bl	8001c90 <__errno>
 800084c:	4603      	mov	r3, r0
 800084e:	220c      	movs	r2, #12
 8000850:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000852:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000856:	e009      	b.n	800086c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000858:	4b08      	ldr	r3, [pc, #32]	; (800087c <_sbrk+0x64>)
 800085a:	681b      	ldr	r3, [r3, #0]
 800085c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800085e:	4b07      	ldr	r3, [pc, #28]	; (800087c <_sbrk+0x64>)
 8000860:	681a      	ldr	r2, [r3, #0]
 8000862:	687b      	ldr	r3, [r7, #4]
 8000864:	4413      	add	r3, r2
 8000866:	4a05      	ldr	r2, [pc, #20]	; (800087c <_sbrk+0x64>)
 8000868:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800086a:	68fb      	ldr	r3, [r7, #12]
}
 800086c:	4618      	mov	r0, r3
 800086e:	3718      	adds	r7, #24
 8000870:	46bd      	mov	sp, r7
 8000872:	bd80      	pop	{r7, pc}
 8000874:	20030000 	.word	0x20030000
 8000878:	00000400 	.word	0x00000400
 800087c:	20000090 	.word	0x20000090
 8000880:	200001e8 	.word	0x200001e8

08000884 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000884:	b580      	push	{r7, lr}
 8000886:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000888:	4b0b      	ldr	r3, [pc, #44]	; (80008b8 <HAL_Init+0x34>)
 800088a:	681b      	ldr	r3, [r3, #0]
 800088c:	4a0a      	ldr	r2, [pc, #40]	; (80008b8 <HAL_Init+0x34>)
 800088e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000892:	6013      	str	r3, [r2, #0]
#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000894:	4b08      	ldr	r3, [pc, #32]	; (80008b8 <HAL_Init+0x34>)
 8000896:	681b      	ldr	r3, [r3, #0]
 8000898:	4a07      	ldr	r2, [pc, #28]	; (80008b8 <HAL_Init+0x34>)
 800089a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800089e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80008a0:	2003      	movs	r0, #3
 80008a2:	f000 f92b 	bl	8000afc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80008a6:	200f      	movs	r0, #15
 80008a8:	f000 f808 	bl	80008bc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80008ac:	f000 fb1c 	bl	8000ee8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80008b0:	2300      	movs	r3, #0
}
 80008b2:	4618      	mov	r0, r3
 80008b4:	bd80      	pop	{r7, pc}
 80008b6:	bf00      	nop
 80008b8:	40023c00 	.word	0x40023c00

080008bc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80008bc:	b580      	push	{r7, lr}
 80008be:	b082      	sub	sp, #8
 80008c0:	af00      	add	r7, sp, #0
 80008c2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80008c4:	4b12      	ldr	r3, [pc, #72]	; (8000910 <HAL_InitTick+0x54>)
 80008c6:	681a      	ldr	r2, [r3, #0]
 80008c8:	4b12      	ldr	r3, [pc, #72]	; (8000914 <HAL_InitTick+0x58>)
 80008ca:	781b      	ldrb	r3, [r3, #0]
 80008cc:	4619      	mov	r1, r3
 80008ce:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80008d2:	fbb3 f3f1 	udiv	r3, r3, r1
 80008d6:	fbb2 f3f3 	udiv	r3, r2, r3
 80008da:	4618      	mov	r0, r3
 80008dc:	f000 f935 	bl	8000b4a <HAL_SYSTICK_Config>
 80008e0:	4603      	mov	r3, r0
 80008e2:	2b00      	cmp	r3, #0
 80008e4:	d001      	beq.n	80008ea <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80008e6:	2301      	movs	r3, #1
 80008e8:	e00e      	b.n	8000908 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80008ea:	687b      	ldr	r3, [r7, #4]
 80008ec:	2b0f      	cmp	r3, #15
 80008ee:	d80a      	bhi.n	8000906 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80008f0:	2200      	movs	r2, #0
 80008f2:	6879      	ldr	r1, [r7, #4]
 80008f4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80008f8:	f000 f90b 	bl	8000b12 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80008fc:	4a06      	ldr	r2, [pc, #24]	; (8000918 <HAL_InitTick+0x5c>)
 80008fe:	687b      	ldr	r3, [r7, #4]
 8000900:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000902:	2300      	movs	r3, #0
 8000904:	e000      	b.n	8000908 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000906:	2301      	movs	r3, #1
}
 8000908:	4618      	mov	r0, r3
 800090a:	3708      	adds	r7, #8
 800090c:	46bd      	mov	sp, r7
 800090e:	bd80      	pop	{r7, pc}
 8000910:	2000000c 	.word	0x2000000c
 8000914:	20000014 	.word	0x20000014
 8000918:	20000010 	.word	0x20000010

0800091c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800091c:	b480      	push	{r7}
 800091e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000920:	4b05      	ldr	r3, [pc, #20]	; (8000938 <HAL_IncTick+0x1c>)
 8000922:	781b      	ldrb	r3, [r3, #0]
 8000924:	461a      	mov	r2, r3
 8000926:	4b05      	ldr	r3, [pc, #20]	; (800093c <HAL_IncTick+0x20>)
 8000928:	681b      	ldr	r3, [r3, #0]
 800092a:	4413      	add	r3, r2
 800092c:	4a03      	ldr	r2, [pc, #12]	; (800093c <HAL_IncTick+0x20>)
 800092e:	6013      	str	r3, [r2, #0]
}
 8000930:	bf00      	nop
 8000932:	46bd      	mov	sp, r7
 8000934:	bc80      	pop	{r7}
 8000936:	4770      	bx	lr
 8000938:	20000014 	.word	0x20000014
 800093c:	20000094 	.word	0x20000094

08000940 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000940:	b480      	push	{r7}
 8000942:	af00      	add	r7, sp, #0
  return uwTick;
 8000944:	4b02      	ldr	r3, [pc, #8]	; (8000950 <HAL_GetTick+0x10>)
 8000946:	681b      	ldr	r3, [r3, #0]
}
 8000948:	4618      	mov	r0, r3
 800094a:	46bd      	mov	sp, r7
 800094c:	bc80      	pop	{r7}
 800094e:	4770      	bx	lr
 8000950:	20000094 	.word	0x20000094

08000954 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000954:	b580      	push	{r7, lr}
 8000956:	b084      	sub	sp, #16
 8000958:	af00      	add	r7, sp, #0
 800095a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800095c:	f7ff fff0 	bl	8000940 <HAL_GetTick>
 8000960:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000962:	687b      	ldr	r3, [r7, #4]
 8000964:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000966:	68fb      	ldr	r3, [r7, #12]
 8000968:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800096c:	d005      	beq.n	800097a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800096e:	4b0a      	ldr	r3, [pc, #40]	; (8000998 <HAL_Delay+0x44>)
 8000970:	781b      	ldrb	r3, [r3, #0]
 8000972:	461a      	mov	r2, r3
 8000974:	68fb      	ldr	r3, [r7, #12]
 8000976:	4413      	add	r3, r2
 8000978:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800097a:	bf00      	nop
 800097c:	f7ff ffe0 	bl	8000940 <HAL_GetTick>
 8000980:	4602      	mov	r2, r0
 8000982:	68bb      	ldr	r3, [r7, #8]
 8000984:	1ad3      	subs	r3, r2, r3
 8000986:	68fa      	ldr	r2, [r7, #12]
 8000988:	429a      	cmp	r2, r3
 800098a:	d8f7      	bhi.n	800097c <HAL_Delay+0x28>
  {
  }
}
 800098c:	bf00      	nop
 800098e:	bf00      	nop
 8000990:	3710      	adds	r7, #16
 8000992:	46bd      	mov	sp, r7
 8000994:	bd80      	pop	{r7, pc}
 8000996:	bf00      	nop
 8000998:	20000014 	.word	0x20000014

0800099c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800099c:	b480      	push	{r7}
 800099e:	b085      	sub	sp, #20
 80009a0:	af00      	add	r7, sp, #0
 80009a2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80009a4:	687b      	ldr	r3, [r7, #4]
 80009a6:	f003 0307 	and.w	r3, r3, #7
 80009aa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80009ac:	4b0c      	ldr	r3, [pc, #48]	; (80009e0 <__NVIC_SetPriorityGrouping+0x44>)
 80009ae:	68db      	ldr	r3, [r3, #12]
 80009b0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80009b2:	68ba      	ldr	r2, [r7, #8]
 80009b4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80009b8:	4013      	ands	r3, r2
 80009ba:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80009bc:	68fb      	ldr	r3, [r7, #12]
 80009be:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80009c0:	68bb      	ldr	r3, [r7, #8]
 80009c2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80009c4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80009c8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80009cc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80009ce:	4a04      	ldr	r2, [pc, #16]	; (80009e0 <__NVIC_SetPriorityGrouping+0x44>)
 80009d0:	68bb      	ldr	r3, [r7, #8]
 80009d2:	60d3      	str	r3, [r2, #12]
}
 80009d4:	bf00      	nop
 80009d6:	3714      	adds	r7, #20
 80009d8:	46bd      	mov	sp, r7
 80009da:	bc80      	pop	{r7}
 80009dc:	4770      	bx	lr
 80009de:	bf00      	nop
 80009e0:	e000ed00 	.word	0xe000ed00

080009e4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80009e4:	b480      	push	{r7}
 80009e6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80009e8:	4b04      	ldr	r3, [pc, #16]	; (80009fc <__NVIC_GetPriorityGrouping+0x18>)
 80009ea:	68db      	ldr	r3, [r3, #12]
 80009ec:	0a1b      	lsrs	r3, r3, #8
 80009ee:	f003 0307 	and.w	r3, r3, #7
}
 80009f2:	4618      	mov	r0, r3
 80009f4:	46bd      	mov	sp, r7
 80009f6:	bc80      	pop	{r7}
 80009f8:	4770      	bx	lr
 80009fa:	bf00      	nop
 80009fc:	e000ed00 	.word	0xe000ed00

08000a00 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000a00:	b480      	push	{r7}
 8000a02:	b083      	sub	sp, #12
 8000a04:	af00      	add	r7, sp, #0
 8000a06:	4603      	mov	r3, r0
 8000a08:	6039      	str	r1, [r7, #0]
 8000a0a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000a0c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a10:	2b00      	cmp	r3, #0
 8000a12:	db0a      	blt.n	8000a2a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a14:	683b      	ldr	r3, [r7, #0]
 8000a16:	b2da      	uxtb	r2, r3
 8000a18:	490c      	ldr	r1, [pc, #48]	; (8000a4c <__NVIC_SetPriority+0x4c>)
 8000a1a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a1e:	0112      	lsls	r2, r2, #4
 8000a20:	b2d2      	uxtb	r2, r2
 8000a22:	440b      	add	r3, r1
 8000a24:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000a28:	e00a      	b.n	8000a40 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a2a:	683b      	ldr	r3, [r7, #0]
 8000a2c:	b2da      	uxtb	r2, r3
 8000a2e:	4908      	ldr	r1, [pc, #32]	; (8000a50 <__NVIC_SetPriority+0x50>)
 8000a30:	79fb      	ldrb	r3, [r7, #7]
 8000a32:	f003 030f 	and.w	r3, r3, #15
 8000a36:	3b04      	subs	r3, #4
 8000a38:	0112      	lsls	r2, r2, #4
 8000a3a:	b2d2      	uxtb	r2, r2
 8000a3c:	440b      	add	r3, r1
 8000a3e:	761a      	strb	r2, [r3, #24]
}
 8000a40:	bf00      	nop
 8000a42:	370c      	adds	r7, #12
 8000a44:	46bd      	mov	sp, r7
 8000a46:	bc80      	pop	{r7}
 8000a48:	4770      	bx	lr
 8000a4a:	bf00      	nop
 8000a4c:	e000e100 	.word	0xe000e100
 8000a50:	e000ed00 	.word	0xe000ed00

08000a54 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000a54:	b480      	push	{r7}
 8000a56:	b089      	sub	sp, #36	; 0x24
 8000a58:	af00      	add	r7, sp, #0
 8000a5a:	60f8      	str	r0, [r7, #12]
 8000a5c:	60b9      	str	r1, [r7, #8]
 8000a5e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000a60:	68fb      	ldr	r3, [r7, #12]
 8000a62:	f003 0307 	and.w	r3, r3, #7
 8000a66:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000a68:	69fb      	ldr	r3, [r7, #28]
 8000a6a:	f1c3 0307 	rsb	r3, r3, #7
 8000a6e:	2b04      	cmp	r3, #4
 8000a70:	bf28      	it	cs
 8000a72:	2304      	movcs	r3, #4
 8000a74:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000a76:	69fb      	ldr	r3, [r7, #28]
 8000a78:	3304      	adds	r3, #4
 8000a7a:	2b06      	cmp	r3, #6
 8000a7c:	d902      	bls.n	8000a84 <NVIC_EncodePriority+0x30>
 8000a7e:	69fb      	ldr	r3, [r7, #28]
 8000a80:	3b03      	subs	r3, #3
 8000a82:	e000      	b.n	8000a86 <NVIC_EncodePriority+0x32>
 8000a84:	2300      	movs	r3, #0
 8000a86:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000a88:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000a8c:	69bb      	ldr	r3, [r7, #24]
 8000a8e:	fa02 f303 	lsl.w	r3, r2, r3
 8000a92:	43da      	mvns	r2, r3
 8000a94:	68bb      	ldr	r3, [r7, #8]
 8000a96:	401a      	ands	r2, r3
 8000a98:	697b      	ldr	r3, [r7, #20]
 8000a9a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000a9c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000aa0:	697b      	ldr	r3, [r7, #20]
 8000aa2:	fa01 f303 	lsl.w	r3, r1, r3
 8000aa6:	43d9      	mvns	r1, r3
 8000aa8:	687b      	ldr	r3, [r7, #4]
 8000aaa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000aac:	4313      	orrs	r3, r2
         );
}
 8000aae:	4618      	mov	r0, r3
 8000ab0:	3724      	adds	r7, #36	; 0x24
 8000ab2:	46bd      	mov	sp, r7
 8000ab4:	bc80      	pop	{r7}
 8000ab6:	4770      	bx	lr

08000ab8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000ab8:	b580      	push	{r7, lr}
 8000aba:	b082      	sub	sp, #8
 8000abc:	af00      	add	r7, sp, #0
 8000abe:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000ac0:	687b      	ldr	r3, [r7, #4]
 8000ac2:	3b01      	subs	r3, #1
 8000ac4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000ac8:	d301      	bcc.n	8000ace <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000aca:	2301      	movs	r3, #1
 8000acc:	e00f      	b.n	8000aee <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000ace:	4a0a      	ldr	r2, [pc, #40]	; (8000af8 <SysTick_Config+0x40>)
 8000ad0:	687b      	ldr	r3, [r7, #4]
 8000ad2:	3b01      	subs	r3, #1
 8000ad4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000ad6:	210f      	movs	r1, #15
 8000ad8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000adc:	f7ff ff90 	bl	8000a00 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000ae0:	4b05      	ldr	r3, [pc, #20]	; (8000af8 <SysTick_Config+0x40>)
 8000ae2:	2200      	movs	r2, #0
 8000ae4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000ae6:	4b04      	ldr	r3, [pc, #16]	; (8000af8 <SysTick_Config+0x40>)
 8000ae8:	2207      	movs	r2, #7
 8000aea:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000aec:	2300      	movs	r3, #0
}
 8000aee:	4618      	mov	r0, r3
 8000af0:	3708      	adds	r7, #8
 8000af2:	46bd      	mov	sp, r7
 8000af4:	bd80      	pop	{r7, pc}
 8000af6:	bf00      	nop
 8000af8:	e000e010 	.word	0xe000e010

08000afc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000afc:	b580      	push	{r7, lr}
 8000afe:	b082      	sub	sp, #8
 8000b00:	af00      	add	r7, sp, #0
 8000b02:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000b04:	6878      	ldr	r0, [r7, #4]
 8000b06:	f7ff ff49 	bl	800099c <__NVIC_SetPriorityGrouping>
}
 8000b0a:	bf00      	nop
 8000b0c:	3708      	adds	r7, #8
 8000b0e:	46bd      	mov	sp, r7
 8000b10:	bd80      	pop	{r7, pc}

08000b12 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000b12:	b580      	push	{r7, lr}
 8000b14:	b086      	sub	sp, #24
 8000b16:	af00      	add	r7, sp, #0
 8000b18:	4603      	mov	r3, r0
 8000b1a:	60b9      	str	r1, [r7, #8]
 8000b1c:	607a      	str	r2, [r7, #4]
 8000b1e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000b20:	2300      	movs	r3, #0
 8000b22:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000b24:	f7ff ff5e 	bl	80009e4 <__NVIC_GetPriorityGrouping>
 8000b28:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000b2a:	687a      	ldr	r2, [r7, #4]
 8000b2c:	68b9      	ldr	r1, [r7, #8]
 8000b2e:	6978      	ldr	r0, [r7, #20]
 8000b30:	f7ff ff90 	bl	8000a54 <NVIC_EncodePriority>
 8000b34:	4602      	mov	r2, r0
 8000b36:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000b3a:	4611      	mov	r1, r2
 8000b3c:	4618      	mov	r0, r3
 8000b3e:	f7ff ff5f 	bl	8000a00 <__NVIC_SetPriority>
}
 8000b42:	bf00      	nop
 8000b44:	3718      	adds	r7, #24
 8000b46:	46bd      	mov	sp, r7
 8000b48:	bd80      	pop	{r7, pc}

08000b4a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000b4a:	b580      	push	{r7, lr}
 8000b4c:	b082      	sub	sp, #8
 8000b4e:	af00      	add	r7, sp, #0
 8000b50:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000b52:	6878      	ldr	r0, [r7, #4]
 8000b54:	f7ff ffb0 	bl	8000ab8 <SysTick_Config>
 8000b58:	4603      	mov	r3, r0
}
 8000b5a:	4618      	mov	r0, r3
 8000b5c:	3708      	adds	r7, #8
 8000b5e:	46bd      	mov	sp, r7
 8000b60:	bd80      	pop	{r7, pc}
	...

08000b64 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000b64:	b480      	push	{r7}
 8000b66:	b089      	sub	sp, #36	; 0x24
 8000b68:	af00      	add	r7, sp, #0
 8000b6a:	6078      	str	r0, [r7, #4]
 8000b6c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000b6e:	2300      	movs	r3, #0
 8000b70:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000b72:	2300      	movs	r3, #0
 8000b74:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000b76:	2300      	movs	r3, #0
 8000b78:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000b7a:	2300      	movs	r3, #0
 8000b7c:	61fb      	str	r3, [r7, #28]
 8000b7e:	e177      	b.n	8000e70 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000b80:	2201      	movs	r2, #1
 8000b82:	69fb      	ldr	r3, [r7, #28]
 8000b84:	fa02 f303 	lsl.w	r3, r2, r3
 8000b88:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000b8a:	683b      	ldr	r3, [r7, #0]
 8000b8c:	681b      	ldr	r3, [r3, #0]
 8000b8e:	697a      	ldr	r2, [r7, #20]
 8000b90:	4013      	ands	r3, r2
 8000b92:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000b94:	693a      	ldr	r2, [r7, #16]
 8000b96:	697b      	ldr	r3, [r7, #20]
 8000b98:	429a      	cmp	r2, r3
 8000b9a:	f040 8166 	bne.w	8000e6a <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000b9e:	683b      	ldr	r3, [r7, #0]
 8000ba0:	685b      	ldr	r3, [r3, #4]
 8000ba2:	f003 0303 	and.w	r3, r3, #3
 8000ba6:	2b01      	cmp	r3, #1
 8000ba8:	d005      	beq.n	8000bb6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000baa:	683b      	ldr	r3, [r7, #0]
 8000bac:	685b      	ldr	r3, [r3, #4]
 8000bae:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000bb2:	2b02      	cmp	r3, #2
 8000bb4:	d130      	bne.n	8000c18 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000bb6:	687b      	ldr	r3, [r7, #4]
 8000bb8:	689b      	ldr	r3, [r3, #8]
 8000bba:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000bbc:	69fb      	ldr	r3, [r7, #28]
 8000bbe:	005b      	lsls	r3, r3, #1
 8000bc0:	2203      	movs	r2, #3
 8000bc2:	fa02 f303 	lsl.w	r3, r2, r3
 8000bc6:	43db      	mvns	r3, r3
 8000bc8:	69ba      	ldr	r2, [r7, #24]
 8000bca:	4013      	ands	r3, r2
 8000bcc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000bce:	683b      	ldr	r3, [r7, #0]
 8000bd0:	68da      	ldr	r2, [r3, #12]
 8000bd2:	69fb      	ldr	r3, [r7, #28]
 8000bd4:	005b      	lsls	r3, r3, #1
 8000bd6:	fa02 f303 	lsl.w	r3, r2, r3
 8000bda:	69ba      	ldr	r2, [r7, #24]
 8000bdc:	4313      	orrs	r3, r2
 8000bde:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000be0:	687b      	ldr	r3, [r7, #4]
 8000be2:	69ba      	ldr	r2, [r7, #24]
 8000be4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000be6:	687b      	ldr	r3, [r7, #4]
 8000be8:	685b      	ldr	r3, [r3, #4]
 8000bea:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000bec:	2201      	movs	r2, #1
 8000bee:	69fb      	ldr	r3, [r7, #28]
 8000bf0:	fa02 f303 	lsl.w	r3, r2, r3
 8000bf4:	43db      	mvns	r3, r3
 8000bf6:	69ba      	ldr	r2, [r7, #24]
 8000bf8:	4013      	ands	r3, r2
 8000bfa:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000bfc:	683b      	ldr	r3, [r7, #0]
 8000bfe:	685b      	ldr	r3, [r3, #4]
 8000c00:	091b      	lsrs	r3, r3, #4
 8000c02:	f003 0201 	and.w	r2, r3, #1
 8000c06:	69fb      	ldr	r3, [r7, #28]
 8000c08:	fa02 f303 	lsl.w	r3, r2, r3
 8000c0c:	69ba      	ldr	r2, [r7, #24]
 8000c0e:	4313      	orrs	r3, r2
 8000c10:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000c12:	687b      	ldr	r3, [r7, #4]
 8000c14:	69ba      	ldr	r2, [r7, #24]
 8000c16:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000c18:	683b      	ldr	r3, [r7, #0]
 8000c1a:	685b      	ldr	r3, [r3, #4]
 8000c1c:	f003 0303 	and.w	r3, r3, #3
 8000c20:	2b03      	cmp	r3, #3
 8000c22:	d017      	beq.n	8000c54 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000c24:	687b      	ldr	r3, [r7, #4]
 8000c26:	68db      	ldr	r3, [r3, #12]
 8000c28:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000c2a:	69fb      	ldr	r3, [r7, #28]
 8000c2c:	005b      	lsls	r3, r3, #1
 8000c2e:	2203      	movs	r2, #3
 8000c30:	fa02 f303 	lsl.w	r3, r2, r3
 8000c34:	43db      	mvns	r3, r3
 8000c36:	69ba      	ldr	r2, [r7, #24]
 8000c38:	4013      	ands	r3, r2
 8000c3a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000c3c:	683b      	ldr	r3, [r7, #0]
 8000c3e:	689a      	ldr	r2, [r3, #8]
 8000c40:	69fb      	ldr	r3, [r7, #28]
 8000c42:	005b      	lsls	r3, r3, #1
 8000c44:	fa02 f303 	lsl.w	r3, r2, r3
 8000c48:	69ba      	ldr	r2, [r7, #24]
 8000c4a:	4313      	orrs	r3, r2
 8000c4c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000c4e:	687b      	ldr	r3, [r7, #4]
 8000c50:	69ba      	ldr	r2, [r7, #24]
 8000c52:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000c54:	683b      	ldr	r3, [r7, #0]
 8000c56:	685b      	ldr	r3, [r3, #4]
 8000c58:	f003 0303 	and.w	r3, r3, #3
 8000c5c:	2b02      	cmp	r3, #2
 8000c5e:	d123      	bne.n	8000ca8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000c60:	69fb      	ldr	r3, [r7, #28]
 8000c62:	08da      	lsrs	r2, r3, #3
 8000c64:	687b      	ldr	r3, [r7, #4]
 8000c66:	3208      	adds	r2, #8
 8000c68:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000c6c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000c6e:	69fb      	ldr	r3, [r7, #28]
 8000c70:	f003 0307 	and.w	r3, r3, #7
 8000c74:	009b      	lsls	r3, r3, #2
 8000c76:	220f      	movs	r2, #15
 8000c78:	fa02 f303 	lsl.w	r3, r2, r3
 8000c7c:	43db      	mvns	r3, r3
 8000c7e:	69ba      	ldr	r2, [r7, #24]
 8000c80:	4013      	ands	r3, r2
 8000c82:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000c84:	683b      	ldr	r3, [r7, #0]
 8000c86:	691a      	ldr	r2, [r3, #16]
 8000c88:	69fb      	ldr	r3, [r7, #28]
 8000c8a:	f003 0307 	and.w	r3, r3, #7
 8000c8e:	009b      	lsls	r3, r3, #2
 8000c90:	fa02 f303 	lsl.w	r3, r2, r3
 8000c94:	69ba      	ldr	r2, [r7, #24]
 8000c96:	4313      	orrs	r3, r2
 8000c98:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000c9a:	69fb      	ldr	r3, [r7, #28]
 8000c9c:	08da      	lsrs	r2, r3, #3
 8000c9e:	687b      	ldr	r3, [r7, #4]
 8000ca0:	3208      	adds	r2, #8
 8000ca2:	69b9      	ldr	r1, [r7, #24]
 8000ca4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000ca8:	687b      	ldr	r3, [r7, #4]
 8000caa:	681b      	ldr	r3, [r3, #0]
 8000cac:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000cae:	69fb      	ldr	r3, [r7, #28]
 8000cb0:	005b      	lsls	r3, r3, #1
 8000cb2:	2203      	movs	r2, #3
 8000cb4:	fa02 f303 	lsl.w	r3, r2, r3
 8000cb8:	43db      	mvns	r3, r3
 8000cba:	69ba      	ldr	r2, [r7, #24]
 8000cbc:	4013      	ands	r3, r2
 8000cbe:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000cc0:	683b      	ldr	r3, [r7, #0]
 8000cc2:	685b      	ldr	r3, [r3, #4]
 8000cc4:	f003 0203 	and.w	r2, r3, #3
 8000cc8:	69fb      	ldr	r3, [r7, #28]
 8000cca:	005b      	lsls	r3, r3, #1
 8000ccc:	fa02 f303 	lsl.w	r3, r2, r3
 8000cd0:	69ba      	ldr	r2, [r7, #24]
 8000cd2:	4313      	orrs	r3, r2
 8000cd4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000cd6:	687b      	ldr	r3, [r7, #4]
 8000cd8:	69ba      	ldr	r2, [r7, #24]
 8000cda:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000cdc:	683b      	ldr	r3, [r7, #0]
 8000cde:	685b      	ldr	r3, [r3, #4]
 8000ce0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000ce4:	2b00      	cmp	r3, #0
 8000ce6:	f000 80c0 	beq.w	8000e6a <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000cea:	2300      	movs	r3, #0
 8000cec:	60fb      	str	r3, [r7, #12]
 8000cee:	4b65      	ldr	r3, [pc, #404]	; (8000e84 <HAL_GPIO_Init+0x320>)
 8000cf0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000cf2:	4a64      	ldr	r2, [pc, #400]	; (8000e84 <HAL_GPIO_Init+0x320>)
 8000cf4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000cf8:	6453      	str	r3, [r2, #68]	; 0x44
 8000cfa:	4b62      	ldr	r3, [pc, #392]	; (8000e84 <HAL_GPIO_Init+0x320>)
 8000cfc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000cfe:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000d02:	60fb      	str	r3, [r7, #12]
 8000d04:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000d06:	4a60      	ldr	r2, [pc, #384]	; (8000e88 <HAL_GPIO_Init+0x324>)
 8000d08:	69fb      	ldr	r3, [r7, #28]
 8000d0a:	089b      	lsrs	r3, r3, #2
 8000d0c:	3302      	adds	r3, #2
 8000d0e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000d12:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000d14:	69fb      	ldr	r3, [r7, #28]
 8000d16:	f003 0303 	and.w	r3, r3, #3
 8000d1a:	009b      	lsls	r3, r3, #2
 8000d1c:	220f      	movs	r2, #15
 8000d1e:	fa02 f303 	lsl.w	r3, r2, r3
 8000d22:	43db      	mvns	r3, r3
 8000d24:	69ba      	ldr	r2, [r7, #24]
 8000d26:	4013      	ands	r3, r2
 8000d28:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000d2a:	687b      	ldr	r3, [r7, #4]
 8000d2c:	4a57      	ldr	r2, [pc, #348]	; (8000e8c <HAL_GPIO_Init+0x328>)
 8000d2e:	4293      	cmp	r3, r2
 8000d30:	d037      	beq.n	8000da2 <HAL_GPIO_Init+0x23e>
 8000d32:	687b      	ldr	r3, [r7, #4]
 8000d34:	4a56      	ldr	r2, [pc, #344]	; (8000e90 <HAL_GPIO_Init+0x32c>)
 8000d36:	4293      	cmp	r3, r2
 8000d38:	d031      	beq.n	8000d9e <HAL_GPIO_Init+0x23a>
 8000d3a:	687b      	ldr	r3, [r7, #4]
 8000d3c:	4a55      	ldr	r2, [pc, #340]	; (8000e94 <HAL_GPIO_Init+0x330>)
 8000d3e:	4293      	cmp	r3, r2
 8000d40:	d02b      	beq.n	8000d9a <HAL_GPIO_Init+0x236>
 8000d42:	687b      	ldr	r3, [r7, #4]
 8000d44:	4a54      	ldr	r2, [pc, #336]	; (8000e98 <HAL_GPIO_Init+0x334>)
 8000d46:	4293      	cmp	r3, r2
 8000d48:	d025      	beq.n	8000d96 <HAL_GPIO_Init+0x232>
 8000d4a:	687b      	ldr	r3, [r7, #4]
 8000d4c:	4a53      	ldr	r2, [pc, #332]	; (8000e9c <HAL_GPIO_Init+0x338>)
 8000d4e:	4293      	cmp	r3, r2
 8000d50:	d01f      	beq.n	8000d92 <HAL_GPIO_Init+0x22e>
 8000d52:	687b      	ldr	r3, [r7, #4]
 8000d54:	4a52      	ldr	r2, [pc, #328]	; (8000ea0 <HAL_GPIO_Init+0x33c>)
 8000d56:	4293      	cmp	r3, r2
 8000d58:	d019      	beq.n	8000d8e <HAL_GPIO_Init+0x22a>
 8000d5a:	687b      	ldr	r3, [r7, #4]
 8000d5c:	4a51      	ldr	r2, [pc, #324]	; (8000ea4 <HAL_GPIO_Init+0x340>)
 8000d5e:	4293      	cmp	r3, r2
 8000d60:	d013      	beq.n	8000d8a <HAL_GPIO_Init+0x226>
 8000d62:	687b      	ldr	r3, [r7, #4]
 8000d64:	4a50      	ldr	r2, [pc, #320]	; (8000ea8 <HAL_GPIO_Init+0x344>)
 8000d66:	4293      	cmp	r3, r2
 8000d68:	d00d      	beq.n	8000d86 <HAL_GPIO_Init+0x222>
 8000d6a:	687b      	ldr	r3, [r7, #4]
 8000d6c:	4a4f      	ldr	r2, [pc, #316]	; (8000eac <HAL_GPIO_Init+0x348>)
 8000d6e:	4293      	cmp	r3, r2
 8000d70:	d007      	beq.n	8000d82 <HAL_GPIO_Init+0x21e>
 8000d72:	687b      	ldr	r3, [r7, #4]
 8000d74:	4a4e      	ldr	r2, [pc, #312]	; (8000eb0 <HAL_GPIO_Init+0x34c>)
 8000d76:	4293      	cmp	r3, r2
 8000d78:	d101      	bne.n	8000d7e <HAL_GPIO_Init+0x21a>
 8000d7a:	2309      	movs	r3, #9
 8000d7c:	e012      	b.n	8000da4 <HAL_GPIO_Init+0x240>
 8000d7e:	230a      	movs	r3, #10
 8000d80:	e010      	b.n	8000da4 <HAL_GPIO_Init+0x240>
 8000d82:	2308      	movs	r3, #8
 8000d84:	e00e      	b.n	8000da4 <HAL_GPIO_Init+0x240>
 8000d86:	2307      	movs	r3, #7
 8000d88:	e00c      	b.n	8000da4 <HAL_GPIO_Init+0x240>
 8000d8a:	2306      	movs	r3, #6
 8000d8c:	e00a      	b.n	8000da4 <HAL_GPIO_Init+0x240>
 8000d8e:	2305      	movs	r3, #5
 8000d90:	e008      	b.n	8000da4 <HAL_GPIO_Init+0x240>
 8000d92:	2304      	movs	r3, #4
 8000d94:	e006      	b.n	8000da4 <HAL_GPIO_Init+0x240>
 8000d96:	2303      	movs	r3, #3
 8000d98:	e004      	b.n	8000da4 <HAL_GPIO_Init+0x240>
 8000d9a:	2302      	movs	r3, #2
 8000d9c:	e002      	b.n	8000da4 <HAL_GPIO_Init+0x240>
 8000d9e:	2301      	movs	r3, #1
 8000da0:	e000      	b.n	8000da4 <HAL_GPIO_Init+0x240>
 8000da2:	2300      	movs	r3, #0
 8000da4:	69fa      	ldr	r2, [r7, #28]
 8000da6:	f002 0203 	and.w	r2, r2, #3
 8000daa:	0092      	lsls	r2, r2, #2
 8000dac:	4093      	lsls	r3, r2
 8000dae:	69ba      	ldr	r2, [r7, #24]
 8000db0:	4313      	orrs	r3, r2
 8000db2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000db4:	4934      	ldr	r1, [pc, #208]	; (8000e88 <HAL_GPIO_Init+0x324>)
 8000db6:	69fb      	ldr	r3, [r7, #28]
 8000db8:	089b      	lsrs	r3, r3, #2
 8000dba:	3302      	adds	r3, #2
 8000dbc:	69ba      	ldr	r2, [r7, #24]
 8000dbe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000dc2:	4b3c      	ldr	r3, [pc, #240]	; (8000eb4 <HAL_GPIO_Init+0x350>)
 8000dc4:	681b      	ldr	r3, [r3, #0]
 8000dc6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000dc8:	693b      	ldr	r3, [r7, #16]
 8000dca:	43db      	mvns	r3, r3
 8000dcc:	69ba      	ldr	r2, [r7, #24]
 8000dce:	4013      	ands	r3, r2
 8000dd0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8000dd2:	683b      	ldr	r3, [r7, #0]
 8000dd4:	685b      	ldr	r3, [r3, #4]
 8000dd6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000dda:	2b00      	cmp	r3, #0
 8000ddc:	d003      	beq.n	8000de6 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8000dde:	69ba      	ldr	r2, [r7, #24]
 8000de0:	693b      	ldr	r3, [r7, #16]
 8000de2:	4313      	orrs	r3, r2
 8000de4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8000de6:	4a33      	ldr	r2, [pc, #204]	; (8000eb4 <HAL_GPIO_Init+0x350>)
 8000de8:	69bb      	ldr	r3, [r7, #24]
 8000dea:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8000dec:	4b31      	ldr	r3, [pc, #196]	; (8000eb4 <HAL_GPIO_Init+0x350>)
 8000dee:	685b      	ldr	r3, [r3, #4]
 8000df0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000df2:	693b      	ldr	r3, [r7, #16]
 8000df4:	43db      	mvns	r3, r3
 8000df6:	69ba      	ldr	r2, [r7, #24]
 8000df8:	4013      	ands	r3, r2
 8000dfa:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8000dfc:	683b      	ldr	r3, [r7, #0]
 8000dfe:	685b      	ldr	r3, [r3, #4]
 8000e00:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000e04:	2b00      	cmp	r3, #0
 8000e06:	d003      	beq.n	8000e10 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8000e08:	69ba      	ldr	r2, [r7, #24]
 8000e0a:	693b      	ldr	r3, [r7, #16]
 8000e0c:	4313      	orrs	r3, r2
 8000e0e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8000e10:	4a28      	ldr	r2, [pc, #160]	; (8000eb4 <HAL_GPIO_Init+0x350>)
 8000e12:	69bb      	ldr	r3, [r7, #24]
 8000e14:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000e16:	4b27      	ldr	r3, [pc, #156]	; (8000eb4 <HAL_GPIO_Init+0x350>)
 8000e18:	689b      	ldr	r3, [r3, #8]
 8000e1a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000e1c:	693b      	ldr	r3, [r7, #16]
 8000e1e:	43db      	mvns	r3, r3
 8000e20:	69ba      	ldr	r2, [r7, #24]
 8000e22:	4013      	ands	r3, r2
 8000e24:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8000e26:	683b      	ldr	r3, [r7, #0]
 8000e28:	685b      	ldr	r3, [r3, #4]
 8000e2a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000e2e:	2b00      	cmp	r3, #0
 8000e30:	d003      	beq.n	8000e3a <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8000e32:	69ba      	ldr	r2, [r7, #24]
 8000e34:	693b      	ldr	r3, [r7, #16]
 8000e36:	4313      	orrs	r3, r2
 8000e38:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8000e3a:	4a1e      	ldr	r2, [pc, #120]	; (8000eb4 <HAL_GPIO_Init+0x350>)
 8000e3c:	69bb      	ldr	r3, [r7, #24]
 8000e3e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000e40:	4b1c      	ldr	r3, [pc, #112]	; (8000eb4 <HAL_GPIO_Init+0x350>)
 8000e42:	68db      	ldr	r3, [r3, #12]
 8000e44:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000e46:	693b      	ldr	r3, [r7, #16]
 8000e48:	43db      	mvns	r3, r3
 8000e4a:	69ba      	ldr	r2, [r7, #24]
 8000e4c:	4013      	ands	r3, r2
 8000e4e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8000e50:	683b      	ldr	r3, [r7, #0]
 8000e52:	685b      	ldr	r3, [r3, #4]
 8000e54:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000e58:	2b00      	cmp	r3, #0
 8000e5a:	d003      	beq.n	8000e64 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8000e5c:	69ba      	ldr	r2, [r7, #24]
 8000e5e:	693b      	ldr	r3, [r7, #16]
 8000e60:	4313      	orrs	r3, r2
 8000e62:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8000e64:	4a13      	ldr	r2, [pc, #76]	; (8000eb4 <HAL_GPIO_Init+0x350>)
 8000e66:	69bb      	ldr	r3, [r7, #24]
 8000e68:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000e6a:	69fb      	ldr	r3, [r7, #28]
 8000e6c:	3301      	adds	r3, #1
 8000e6e:	61fb      	str	r3, [r7, #28]
 8000e70:	69fb      	ldr	r3, [r7, #28]
 8000e72:	2b0f      	cmp	r3, #15
 8000e74:	f67f ae84 	bls.w	8000b80 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8000e78:	bf00      	nop
 8000e7a:	bf00      	nop
 8000e7c:	3724      	adds	r7, #36	; 0x24
 8000e7e:	46bd      	mov	sp, r7
 8000e80:	bc80      	pop	{r7}
 8000e82:	4770      	bx	lr
 8000e84:	40023800 	.word	0x40023800
 8000e88:	40013800 	.word	0x40013800
 8000e8c:	40020000 	.word	0x40020000
 8000e90:	40020400 	.word	0x40020400
 8000e94:	40020800 	.word	0x40020800
 8000e98:	40020c00 	.word	0x40020c00
 8000e9c:	40021000 	.word	0x40021000
 8000ea0:	40021400 	.word	0x40021400
 8000ea4:	40021800 	.word	0x40021800
 8000ea8:	40021c00 	.word	0x40021c00
 8000eac:	40022000 	.word	0x40022000
 8000eb0:	40022400 	.word	0x40022400
 8000eb4:	40013c00 	.word	0x40013c00

08000eb8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000eb8:	b480      	push	{r7}
 8000eba:	b083      	sub	sp, #12
 8000ebc:	af00      	add	r7, sp, #0
 8000ebe:	6078      	str	r0, [r7, #4]
 8000ec0:	460b      	mov	r3, r1
 8000ec2:	807b      	strh	r3, [r7, #2]
 8000ec4:	4613      	mov	r3, r2
 8000ec6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000ec8:	787b      	ldrb	r3, [r7, #1]
 8000eca:	2b00      	cmp	r3, #0
 8000ecc:	d003      	beq.n	8000ed6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000ece:	887a      	ldrh	r2, [r7, #2]
 8000ed0:	687b      	ldr	r3, [r7, #4]
 8000ed2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8000ed4:	e003      	b.n	8000ede <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8000ed6:	887b      	ldrh	r3, [r7, #2]
 8000ed8:	041a      	lsls	r2, r3, #16
 8000eda:	687b      	ldr	r3, [r7, #4]
 8000edc:	619a      	str	r2, [r3, #24]
}
 8000ede:	bf00      	nop
 8000ee0:	370c      	adds	r7, #12
 8000ee2:	46bd      	mov	sp, r7
 8000ee4:	bc80      	pop	{r7}
 8000ee6:	4770      	bx	lr

08000ee8 <HAL_MspInit>:
  * @note   This function is called from HAL_Init() function to perform system
  *         level initialization (GPIOs, clock, DMA, interrupt).
  * @retval None
  */
void HAL_MspInit(void)
{
 8000ee8:	b480      	push	{r7}
 8000eea:	af00      	add	r7, sp, #0

}
 8000eec:	bf00      	nop
 8000eee:	46bd      	mov	sp, r7
 8000ef0:	bc80      	pop	{r7}
 8000ef2:	4770      	bx	lr

08000ef4 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8000ef4:	b580      	push	{r7, lr}
 8000ef6:	b082      	sub	sp, #8
 8000ef8:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 8000efa:	2300      	movs	r3, #0
 8000efc:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8000efe:	2300      	movs	r3, #0
 8000f00:	603b      	str	r3, [r7, #0]
 8000f02:	4b20      	ldr	r3, [pc, #128]	; (8000f84 <HAL_PWREx_EnableOverDrive+0x90>)
 8000f04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f06:	4a1f      	ldr	r2, [pc, #124]	; (8000f84 <HAL_PWREx_EnableOverDrive+0x90>)
 8000f08:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000f0c:	6413      	str	r3, [r2, #64]	; 0x40
 8000f0e:	4b1d      	ldr	r3, [pc, #116]	; (8000f84 <HAL_PWREx_EnableOverDrive+0x90>)
 8000f10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f12:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f16:	603b      	str	r3, [r7, #0]
 8000f18:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8000f1a:	4b1b      	ldr	r3, [pc, #108]	; (8000f88 <HAL_PWREx_EnableOverDrive+0x94>)
 8000f1c:	2201      	movs	r2, #1
 8000f1e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000f20:	f7ff fd0e 	bl	8000940 <HAL_GetTick>
 8000f24:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8000f26:	e009      	b.n	8000f3c <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8000f28:	f7ff fd0a 	bl	8000940 <HAL_GetTick>
 8000f2c:	4602      	mov	r2, r0
 8000f2e:	687b      	ldr	r3, [r7, #4]
 8000f30:	1ad3      	subs	r3, r2, r3
 8000f32:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8000f36:	d901      	bls.n	8000f3c <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 8000f38:	2303      	movs	r3, #3
 8000f3a:	e01f      	b.n	8000f7c <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8000f3c:	4b13      	ldr	r3, [pc, #76]	; (8000f8c <HAL_PWREx_EnableOverDrive+0x98>)
 8000f3e:	685b      	ldr	r3, [r3, #4]
 8000f40:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000f44:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000f48:	d1ee      	bne.n	8000f28 <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8000f4a:	4b11      	ldr	r3, [pc, #68]	; (8000f90 <HAL_PWREx_EnableOverDrive+0x9c>)
 8000f4c:	2201      	movs	r2, #1
 8000f4e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000f50:	f7ff fcf6 	bl	8000940 <HAL_GetTick>
 8000f54:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8000f56:	e009      	b.n	8000f6c <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8000f58:	f7ff fcf2 	bl	8000940 <HAL_GetTick>
 8000f5c:	4602      	mov	r2, r0
 8000f5e:	687b      	ldr	r3, [r7, #4]
 8000f60:	1ad3      	subs	r3, r2, r3
 8000f62:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8000f66:	d901      	bls.n	8000f6c <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 8000f68:	2303      	movs	r3, #3
 8000f6a:	e007      	b.n	8000f7c <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8000f6c:	4b07      	ldr	r3, [pc, #28]	; (8000f8c <HAL_PWREx_EnableOverDrive+0x98>)
 8000f6e:	685b      	ldr	r3, [r3, #4]
 8000f70:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000f74:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8000f78:	d1ee      	bne.n	8000f58 <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 8000f7a:	2300      	movs	r3, #0
}
 8000f7c:	4618      	mov	r0, r3
 8000f7e:	3708      	adds	r7, #8
 8000f80:	46bd      	mov	sp, r7
 8000f82:	bd80      	pop	{r7, pc}
 8000f84:	40023800 	.word	0x40023800
 8000f88:	420e0040 	.word	0x420e0040
 8000f8c:	40007000 	.word	0x40007000
 8000f90:	420e0044 	.word	0x420e0044

08000f94 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000f94:	b580      	push	{r7, lr}
 8000f96:	b086      	sub	sp, #24
 8000f98:	af00      	add	r7, sp, #0
 8000f9a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000f9c:	687b      	ldr	r3, [r7, #4]
 8000f9e:	2b00      	cmp	r3, #0
 8000fa0:	d101      	bne.n	8000fa6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000fa2:	2301      	movs	r3, #1
 8000fa4:	e267      	b.n	8001476 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000fa6:	687b      	ldr	r3, [r7, #4]
 8000fa8:	681b      	ldr	r3, [r3, #0]
 8000faa:	f003 0301 	and.w	r3, r3, #1
 8000fae:	2b00      	cmp	r3, #0
 8000fb0:	d075      	beq.n	800109e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8000fb2:	4b88      	ldr	r3, [pc, #544]	; (80011d4 <HAL_RCC_OscConfig+0x240>)
 8000fb4:	689b      	ldr	r3, [r3, #8]
 8000fb6:	f003 030c 	and.w	r3, r3, #12
 8000fba:	2b04      	cmp	r3, #4
 8000fbc:	d00c      	beq.n	8000fd8 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8000fbe:	4b85      	ldr	r3, [pc, #532]	; (80011d4 <HAL_RCC_OscConfig+0x240>)
 8000fc0:	689b      	ldr	r3, [r3, #8]
 8000fc2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8000fc6:	2b08      	cmp	r3, #8
 8000fc8:	d112      	bne.n	8000ff0 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8000fca:	4b82      	ldr	r3, [pc, #520]	; (80011d4 <HAL_RCC_OscConfig+0x240>)
 8000fcc:	685b      	ldr	r3, [r3, #4]
 8000fce:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000fd2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8000fd6:	d10b      	bne.n	8000ff0 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000fd8:	4b7e      	ldr	r3, [pc, #504]	; (80011d4 <HAL_RCC_OscConfig+0x240>)
 8000fda:	681b      	ldr	r3, [r3, #0]
 8000fdc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000fe0:	2b00      	cmp	r3, #0
 8000fe2:	d05b      	beq.n	800109c <HAL_RCC_OscConfig+0x108>
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	685b      	ldr	r3, [r3, #4]
 8000fe8:	2b00      	cmp	r3, #0
 8000fea:	d157      	bne.n	800109c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8000fec:	2301      	movs	r3, #1
 8000fee:	e242      	b.n	8001476 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000ff0:	687b      	ldr	r3, [r7, #4]
 8000ff2:	685b      	ldr	r3, [r3, #4]
 8000ff4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000ff8:	d106      	bne.n	8001008 <HAL_RCC_OscConfig+0x74>
 8000ffa:	4b76      	ldr	r3, [pc, #472]	; (80011d4 <HAL_RCC_OscConfig+0x240>)
 8000ffc:	681b      	ldr	r3, [r3, #0]
 8000ffe:	4a75      	ldr	r2, [pc, #468]	; (80011d4 <HAL_RCC_OscConfig+0x240>)
 8001000:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001004:	6013      	str	r3, [r2, #0]
 8001006:	e01d      	b.n	8001044 <HAL_RCC_OscConfig+0xb0>
 8001008:	687b      	ldr	r3, [r7, #4]
 800100a:	685b      	ldr	r3, [r3, #4]
 800100c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001010:	d10c      	bne.n	800102c <HAL_RCC_OscConfig+0x98>
 8001012:	4b70      	ldr	r3, [pc, #448]	; (80011d4 <HAL_RCC_OscConfig+0x240>)
 8001014:	681b      	ldr	r3, [r3, #0]
 8001016:	4a6f      	ldr	r2, [pc, #444]	; (80011d4 <HAL_RCC_OscConfig+0x240>)
 8001018:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800101c:	6013      	str	r3, [r2, #0]
 800101e:	4b6d      	ldr	r3, [pc, #436]	; (80011d4 <HAL_RCC_OscConfig+0x240>)
 8001020:	681b      	ldr	r3, [r3, #0]
 8001022:	4a6c      	ldr	r2, [pc, #432]	; (80011d4 <HAL_RCC_OscConfig+0x240>)
 8001024:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001028:	6013      	str	r3, [r2, #0]
 800102a:	e00b      	b.n	8001044 <HAL_RCC_OscConfig+0xb0>
 800102c:	4b69      	ldr	r3, [pc, #420]	; (80011d4 <HAL_RCC_OscConfig+0x240>)
 800102e:	681b      	ldr	r3, [r3, #0]
 8001030:	4a68      	ldr	r2, [pc, #416]	; (80011d4 <HAL_RCC_OscConfig+0x240>)
 8001032:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001036:	6013      	str	r3, [r2, #0]
 8001038:	4b66      	ldr	r3, [pc, #408]	; (80011d4 <HAL_RCC_OscConfig+0x240>)
 800103a:	681b      	ldr	r3, [r3, #0]
 800103c:	4a65      	ldr	r2, [pc, #404]	; (80011d4 <HAL_RCC_OscConfig+0x240>)
 800103e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001042:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001044:	687b      	ldr	r3, [r7, #4]
 8001046:	685b      	ldr	r3, [r3, #4]
 8001048:	2b00      	cmp	r3, #0
 800104a:	d013      	beq.n	8001074 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800104c:	f7ff fc78 	bl	8000940 <HAL_GetTick>
 8001050:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001052:	e008      	b.n	8001066 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001054:	f7ff fc74 	bl	8000940 <HAL_GetTick>
 8001058:	4602      	mov	r2, r0
 800105a:	693b      	ldr	r3, [r7, #16]
 800105c:	1ad3      	subs	r3, r2, r3
 800105e:	2b64      	cmp	r3, #100	; 0x64
 8001060:	d901      	bls.n	8001066 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001062:	2303      	movs	r3, #3
 8001064:	e207      	b.n	8001476 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001066:	4b5b      	ldr	r3, [pc, #364]	; (80011d4 <HAL_RCC_OscConfig+0x240>)
 8001068:	681b      	ldr	r3, [r3, #0]
 800106a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800106e:	2b00      	cmp	r3, #0
 8001070:	d0f0      	beq.n	8001054 <HAL_RCC_OscConfig+0xc0>
 8001072:	e014      	b.n	800109e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001074:	f7ff fc64 	bl	8000940 <HAL_GetTick>
 8001078:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800107a:	e008      	b.n	800108e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800107c:	f7ff fc60 	bl	8000940 <HAL_GetTick>
 8001080:	4602      	mov	r2, r0
 8001082:	693b      	ldr	r3, [r7, #16]
 8001084:	1ad3      	subs	r3, r2, r3
 8001086:	2b64      	cmp	r3, #100	; 0x64
 8001088:	d901      	bls.n	800108e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800108a:	2303      	movs	r3, #3
 800108c:	e1f3      	b.n	8001476 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800108e:	4b51      	ldr	r3, [pc, #324]	; (80011d4 <HAL_RCC_OscConfig+0x240>)
 8001090:	681b      	ldr	r3, [r3, #0]
 8001092:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001096:	2b00      	cmp	r3, #0
 8001098:	d1f0      	bne.n	800107c <HAL_RCC_OscConfig+0xe8>
 800109a:	e000      	b.n	800109e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800109c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	681b      	ldr	r3, [r3, #0]
 80010a2:	f003 0302 	and.w	r3, r3, #2
 80010a6:	2b00      	cmp	r3, #0
 80010a8:	d063      	beq.n	8001172 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80010aa:	4b4a      	ldr	r3, [pc, #296]	; (80011d4 <HAL_RCC_OscConfig+0x240>)
 80010ac:	689b      	ldr	r3, [r3, #8]
 80010ae:	f003 030c 	and.w	r3, r3, #12
 80010b2:	2b00      	cmp	r3, #0
 80010b4:	d00b      	beq.n	80010ce <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80010b6:	4b47      	ldr	r3, [pc, #284]	; (80011d4 <HAL_RCC_OscConfig+0x240>)
 80010b8:	689b      	ldr	r3, [r3, #8]
 80010ba:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80010be:	2b08      	cmp	r3, #8
 80010c0:	d11c      	bne.n	80010fc <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80010c2:	4b44      	ldr	r3, [pc, #272]	; (80011d4 <HAL_RCC_OscConfig+0x240>)
 80010c4:	685b      	ldr	r3, [r3, #4]
 80010c6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80010ca:	2b00      	cmp	r3, #0
 80010cc:	d116      	bne.n	80010fc <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80010ce:	4b41      	ldr	r3, [pc, #260]	; (80011d4 <HAL_RCC_OscConfig+0x240>)
 80010d0:	681b      	ldr	r3, [r3, #0]
 80010d2:	f003 0302 	and.w	r3, r3, #2
 80010d6:	2b00      	cmp	r3, #0
 80010d8:	d005      	beq.n	80010e6 <HAL_RCC_OscConfig+0x152>
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	68db      	ldr	r3, [r3, #12]
 80010de:	2b01      	cmp	r3, #1
 80010e0:	d001      	beq.n	80010e6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80010e2:	2301      	movs	r3, #1
 80010e4:	e1c7      	b.n	8001476 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80010e6:	4b3b      	ldr	r3, [pc, #236]	; (80011d4 <HAL_RCC_OscConfig+0x240>)
 80010e8:	681b      	ldr	r3, [r3, #0]
 80010ea:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	691b      	ldr	r3, [r3, #16]
 80010f2:	00db      	lsls	r3, r3, #3
 80010f4:	4937      	ldr	r1, [pc, #220]	; (80011d4 <HAL_RCC_OscConfig+0x240>)
 80010f6:	4313      	orrs	r3, r2
 80010f8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80010fa:	e03a      	b.n	8001172 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	68db      	ldr	r3, [r3, #12]
 8001100:	2b00      	cmp	r3, #0
 8001102:	d020      	beq.n	8001146 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001104:	4b34      	ldr	r3, [pc, #208]	; (80011d8 <HAL_RCC_OscConfig+0x244>)
 8001106:	2201      	movs	r2, #1
 8001108:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800110a:	f7ff fc19 	bl	8000940 <HAL_GetTick>
 800110e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001110:	e008      	b.n	8001124 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001112:	f7ff fc15 	bl	8000940 <HAL_GetTick>
 8001116:	4602      	mov	r2, r0
 8001118:	693b      	ldr	r3, [r7, #16]
 800111a:	1ad3      	subs	r3, r2, r3
 800111c:	2b02      	cmp	r3, #2
 800111e:	d901      	bls.n	8001124 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001120:	2303      	movs	r3, #3
 8001122:	e1a8      	b.n	8001476 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001124:	4b2b      	ldr	r3, [pc, #172]	; (80011d4 <HAL_RCC_OscConfig+0x240>)
 8001126:	681b      	ldr	r3, [r3, #0]
 8001128:	f003 0302 	and.w	r3, r3, #2
 800112c:	2b00      	cmp	r3, #0
 800112e:	d0f0      	beq.n	8001112 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001130:	4b28      	ldr	r3, [pc, #160]	; (80011d4 <HAL_RCC_OscConfig+0x240>)
 8001132:	681b      	ldr	r3, [r3, #0]
 8001134:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	691b      	ldr	r3, [r3, #16]
 800113c:	00db      	lsls	r3, r3, #3
 800113e:	4925      	ldr	r1, [pc, #148]	; (80011d4 <HAL_RCC_OscConfig+0x240>)
 8001140:	4313      	orrs	r3, r2
 8001142:	600b      	str	r3, [r1, #0]
 8001144:	e015      	b.n	8001172 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001146:	4b24      	ldr	r3, [pc, #144]	; (80011d8 <HAL_RCC_OscConfig+0x244>)
 8001148:	2200      	movs	r2, #0
 800114a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800114c:	f7ff fbf8 	bl	8000940 <HAL_GetTick>
 8001150:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001152:	e008      	b.n	8001166 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001154:	f7ff fbf4 	bl	8000940 <HAL_GetTick>
 8001158:	4602      	mov	r2, r0
 800115a:	693b      	ldr	r3, [r7, #16]
 800115c:	1ad3      	subs	r3, r2, r3
 800115e:	2b02      	cmp	r3, #2
 8001160:	d901      	bls.n	8001166 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001162:	2303      	movs	r3, #3
 8001164:	e187      	b.n	8001476 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001166:	4b1b      	ldr	r3, [pc, #108]	; (80011d4 <HAL_RCC_OscConfig+0x240>)
 8001168:	681b      	ldr	r3, [r3, #0]
 800116a:	f003 0302 	and.w	r3, r3, #2
 800116e:	2b00      	cmp	r3, #0
 8001170:	d1f0      	bne.n	8001154 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	681b      	ldr	r3, [r3, #0]
 8001176:	f003 0308 	and.w	r3, r3, #8
 800117a:	2b00      	cmp	r3, #0
 800117c:	d036      	beq.n	80011ec <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	695b      	ldr	r3, [r3, #20]
 8001182:	2b00      	cmp	r3, #0
 8001184:	d016      	beq.n	80011b4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001186:	4b15      	ldr	r3, [pc, #84]	; (80011dc <HAL_RCC_OscConfig+0x248>)
 8001188:	2201      	movs	r2, #1
 800118a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800118c:	f7ff fbd8 	bl	8000940 <HAL_GetTick>
 8001190:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001192:	e008      	b.n	80011a6 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001194:	f7ff fbd4 	bl	8000940 <HAL_GetTick>
 8001198:	4602      	mov	r2, r0
 800119a:	693b      	ldr	r3, [r7, #16]
 800119c:	1ad3      	subs	r3, r2, r3
 800119e:	2b02      	cmp	r3, #2
 80011a0:	d901      	bls.n	80011a6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80011a2:	2303      	movs	r3, #3
 80011a4:	e167      	b.n	8001476 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80011a6:	4b0b      	ldr	r3, [pc, #44]	; (80011d4 <HAL_RCC_OscConfig+0x240>)
 80011a8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80011aa:	f003 0302 	and.w	r3, r3, #2
 80011ae:	2b00      	cmp	r3, #0
 80011b0:	d0f0      	beq.n	8001194 <HAL_RCC_OscConfig+0x200>
 80011b2:	e01b      	b.n	80011ec <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80011b4:	4b09      	ldr	r3, [pc, #36]	; (80011dc <HAL_RCC_OscConfig+0x248>)
 80011b6:	2200      	movs	r2, #0
 80011b8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80011ba:	f7ff fbc1 	bl	8000940 <HAL_GetTick>
 80011be:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80011c0:	e00e      	b.n	80011e0 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80011c2:	f7ff fbbd 	bl	8000940 <HAL_GetTick>
 80011c6:	4602      	mov	r2, r0
 80011c8:	693b      	ldr	r3, [r7, #16]
 80011ca:	1ad3      	subs	r3, r2, r3
 80011cc:	2b02      	cmp	r3, #2
 80011ce:	d907      	bls.n	80011e0 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80011d0:	2303      	movs	r3, #3
 80011d2:	e150      	b.n	8001476 <HAL_RCC_OscConfig+0x4e2>
 80011d4:	40023800 	.word	0x40023800
 80011d8:	42470000 	.word	0x42470000
 80011dc:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80011e0:	4b88      	ldr	r3, [pc, #544]	; (8001404 <HAL_RCC_OscConfig+0x470>)
 80011e2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80011e4:	f003 0302 	and.w	r3, r3, #2
 80011e8:	2b00      	cmp	r3, #0
 80011ea:	d1ea      	bne.n	80011c2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	681b      	ldr	r3, [r3, #0]
 80011f0:	f003 0304 	and.w	r3, r3, #4
 80011f4:	2b00      	cmp	r3, #0
 80011f6:	f000 8097 	beq.w	8001328 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80011fa:	2300      	movs	r3, #0
 80011fc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80011fe:	4b81      	ldr	r3, [pc, #516]	; (8001404 <HAL_RCC_OscConfig+0x470>)
 8001200:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001202:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001206:	2b00      	cmp	r3, #0
 8001208:	d10f      	bne.n	800122a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800120a:	2300      	movs	r3, #0
 800120c:	60bb      	str	r3, [r7, #8]
 800120e:	4b7d      	ldr	r3, [pc, #500]	; (8001404 <HAL_RCC_OscConfig+0x470>)
 8001210:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001212:	4a7c      	ldr	r2, [pc, #496]	; (8001404 <HAL_RCC_OscConfig+0x470>)
 8001214:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001218:	6413      	str	r3, [r2, #64]	; 0x40
 800121a:	4b7a      	ldr	r3, [pc, #488]	; (8001404 <HAL_RCC_OscConfig+0x470>)
 800121c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800121e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001222:	60bb      	str	r3, [r7, #8]
 8001224:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001226:	2301      	movs	r3, #1
 8001228:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800122a:	4b77      	ldr	r3, [pc, #476]	; (8001408 <HAL_RCC_OscConfig+0x474>)
 800122c:	681b      	ldr	r3, [r3, #0]
 800122e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001232:	2b00      	cmp	r3, #0
 8001234:	d118      	bne.n	8001268 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001236:	4b74      	ldr	r3, [pc, #464]	; (8001408 <HAL_RCC_OscConfig+0x474>)
 8001238:	681b      	ldr	r3, [r3, #0]
 800123a:	4a73      	ldr	r2, [pc, #460]	; (8001408 <HAL_RCC_OscConfig+0x474>)
 800123c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001240:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001242:	f7ff fb7d 	bl	8000940 <HAL_GetTick>
 8001246:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001248:	e008      	b.n	800125c <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800124a:	f7ff fb79 	bl	8000940 <HAL_GetTick>
 800124e:	4602      	mov	r2, r0
 8001250:	693b      	ldr	r3, [r7, #16]
 8001252:	1ad3      	subs	r3, r2, r3
 8001254:	2b02      	cmp	r3, #2
 8001256:	d901      	bls.n	800125c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8001258:	2303      	movs	r3, #3
 800125a:	e10c      	b.n	8001476 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800125c:	4b6a      	ldr	r3, [pc, #424]	; (8001408 <HAL_RCC_OscConfig+0x474>)
 800125e:	681b      	ldr	r3, [r3, #0]
 8001260:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001264:	2b00      	cmp	r3, #0
 8001266:	d0f0      	beq.n	800124a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	689b      	ldr	r3, [r3, #8]
 800126c:	2b01      	cmp	r3, #1
 800126e:	d106      	bne.n	800127e <HAL_RCC_OscConfig+0x2ea>
 8001270:	4b64      	ldr	r3, [pc, #400]	; (8001404 <HAL_RCC_OscConfig+0x470>)
 8001272:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001274:	4a63      	ldr	r2, [pc, #396]	; (8001404 <HAL_RCC_OscConfig+0x470>)
 8001276:	f043 0301 	orr.w	r3, r3, #1
 800127a:	6713      	str	r3, [r2, #112]	; 0x70
 800127c:	e01c      	b.n	80012b8 <HAL_RCC_OscConfig+0x324>
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	689b      	ldr	r3, [r3, #8]
 8001282:	2b05      	cmp	r3, #5
 8001284:	d10c      	bne.n	80012a0 <HAL_RCC_OscConfig+0x30c>
 8001286:	4b5f      	ldr	r3, [pc, #380]	; (8001404 <HAL_RCC_OscConfig+0x470>)
 8001288:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800128a:	4a5e      	ldr	r2, [pc, #376]	; (8001404 <HAL_RCC_OscConfig+0x470>)
 800128c:	f043 0304 	orr.w	r3, r3, #4
 8001290:	6713      	str	r3, [r2, #112]	; 0x70
 8001292:	4b5c      	ldr	r3, [pc, #368]	; (8001404 <HAL_RCC_OscConfig+0x470>)
 8001294:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001296:	4a5b      	ldr	r2, [pc, #364]	; (8001404 <HAL_RCC_OscConfig+0x470>)
 8001298:	f043 0301 	orr.w	r3, r3, #1
 800129c:	6713      	str	r3, [r2, #112]	; 0x70
 800129e:	e00b      	b.n	80012b8 <HAL_RCC_OscConfig+0x324>
 80012a0:	4b58      	ldr	r3, [pc, #352]	; (8001404 <HAL_RCC_OscConfig+0x470>)
 80012a2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80012a4:	4a57      	ldr	r2, [pc, #348]	; (8001404 <HAL_RCC_OscConfig+0x470>)
 80012a6:	f023 0301 	bic.w	r3, r3, #1
 80012aa:	6713      	str	r3, [r2, #112]	; 0x70
 80012ac:	4b55      	ldr	r3, [pc, #340]	; (8001404 <HAL_RCC_OscConfig+0x470>)
 80012ae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80012b0:	4a54      	ldr	r2, [pc, #336]	; (8001404 <HAL_RCC_OscConfig+0x470>)
 80012b2:	f023 0304 	bic.w	r3, r3, #4
 80012b6:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	689b      	ldr	r3, [r3, #8]
 80012bc:	2b00      	cmp	r3, #0
 80012be:	d015      	beq.n	80012ec <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80012c0:	f7ff fb3e 	bl	8000940 <HAL_GetTick>
 80012c4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80012c6:	e00a      	b.n	80012de <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80012c8:	f7ff fb3a 	bl	8000940 <HAL_GetTick>
 80012cc:	4602      	mov	r2, r0
 80012ce:	693b      	ldr	r3, [r7, #16]
 80012d0:	1ad3      	subs	r3, r2, r3
 80012d2:	f241 3288 	movw	r2, #5000	; 0x1388
 80012d6:	4293      	cmp	r3, r2
 80012d8:	d901      	bls.n	80012de <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80012da:	2303      	movs	r3, #3
 80012dc:	e0cb      	b.n	8001476 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80012de:	4b49      	ldr	r3, [pc, #292]	; (8001404 <HAL_RCC_OscConfig+0x470>)
 80012e0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80012e2:	f003 0302 	and.w	r3, r3, #2
 80012e6:	2b00      	cmp	r3, #0
 80012e8:	d0ee      	beq.n	80012c8 <HAL_RCC_OscConfig+0x334>
 80012ea:	e014      	b.n	8001316 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80012ec:	f7ff fb28 	bl	8000940 <HAL_GetTick>
 80012f0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80012f2:	e00a      	b.n	800130a <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80012f4:	f7ff fb24 	bl	8000940 <HAL_GetTick>
 80012f8:	4602      	mov	r2, r0
 80012fa:	693b      	ldr	r3, [r7, #16]
 80012fc:	1ad3      	subs	r3, r2, r3
 80012fe:	f241 3288 	movw	r2, #5000	; 0x1388
 8001302:	4293      	cmp	r3, r2
 8001304:	d901      	bls.n	800130a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8001306:	2303      	movs	r3, #3
 8001308:	e0b5      	b.n	8001476 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800130a:	4b3e      	ldr	r3, [pc, #248]	; (8001404 <HAL_RCC_OscConfig+0x470>)
 800130c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800130e:	f003 0302 	and.w	r3, r3, #2
 8001312:	2b00      	cmp	r3, #0
 8001314:	d1ee      	bne.n	80012f4 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001316:	7dfb      	ldrb	r3, [r7, #23]
 8001318:	2b01      	cmp	r3, #1
 800131a:	d105      	bne.n	8001328 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800131c:	4b39      	ldr	r3, [pc, #228]	; (8001404 <HAL_RCC_OscConfig+0x470>)
 800131e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001320:	4a38      	ldr	r2, [pc, #224]	; (8001404 <HAL_RCC_OscConfig+0x470>)
 8001322:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001326:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	699b      	ldr	r3, [r3, #24]
 800132c:	2b00      	cmp	r3, #0
 800132e:	f000 80a1 	beq.w	8001474 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001332:	4b34      	ldr	r3, [pc, #208]	; (8001404 <HAL_RCC_OscConfig+0x470>)
 8001334:	689b      	ldr	r3, [r3, #8]
 8001336:	f003 030c 	and.w	r3, r3, #12
 800133a:	2b08      	cmp	r3, #8
 800133c:	d05c      	beq.n	80013f8 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	699b      	ldr	r3, [r3, #24]
 8001342:	2b02      	cmp	r3, #2
 8001344:	d141      	bne.n	80013ca <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001346:	4b31      	ldr	r3, [pc, #196]	; (800140c <HAL_RCC_OscConfig+0x478>)
 8001348:	2200      	movs	r2, #0
 800134a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800134c:	f7ff faf8 	bl	8000940 <HAL_GetTick>
 8001350:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001352:	e008      	b.n	8001366 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001354:	f7ff faf4 	bl	8000940 <HAL_GetTick>
 8001358:	4602      	mov	r2, r0
 800135a:	693b      	ldr	r3, [r7, #16]
 800135c:	1ad3      	subs	r3, r2, r3
 800135e:	2b02      	cmp	r3, #2
 8001360:	d901      	bls.n	8001366 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8001362:	2303      	movs	r3, #3
 8001364:	e087      	b.n	8001476 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001366:	4b27      	ldr	r3, [pc, #156]	; (8001404 <HAL_RCC_OscConfig+0x470>)
 8001368:	681b      	ldr	r3, [r3, #0]
 800136a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800136e:	2b00      	cmp	r3, #0
 8001370:	d1f0      	bne.n	8001354 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	69da      	ldr	r2, [r3, #28]
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	6a1b      	ldr	r3, [r3, #32]
 800137a:	431a      	orrs	r2, r3
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001380:	019b      	lsls	r3, r3, #6
 8001382:	431a      	orrs	r2, r3
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001388:	085b      	lsrs	r3, r3, #1
 800138a:	3b01      	subs	r3, #1
 800138c:	041b      	lsls	r3, r3, #16
 800138e:	431a      	orrs	r2, r3
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001394:	061b      	lsls	r3, r3, #24
 8001396:	491b      	ldr	r1, [pc, #108]	; (8001404 <HAL_RCC_OscConfig+0x470>)
 8001398:	4313      	orrs	r3, r2
 800139a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800139c:	4b1b      	ldr	r3, [pc, #108]	; (800140c <HAL_RCC_OscConfig+0x478>)
 800139e:	2201      	movs	r2, #1
 80013a0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80013a2:	f7ff facd 	bl	8000940 <HAL_GetTick>
 80013a6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80013a8:	e008      	b.n	80013bc <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80013aa:	f7ff fac9 	bl	8000940 <HAL_GetTick>
 80013ae:	4602      	mov	r2, r0
 80013b0:	693b      	ldr	r3, [r7, #16]
 80013b2:	1ad3      	subs	r3, r2, r3
 80013b4:	2b02      	cmp	r3, #2
 80013b6:	d901      	bls.n	80013bc <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80013b8:	2303      	movs	r3, #3
 80013ba:	e05c      	b.n	8001476 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80013bc:	4b11      	ldr	r3, [pc, #68]	; (8001404 <HAL_RCC_OscConfig+0x470>)
 80013be:	681b      	ldr	r3, [r3, #0]
 80013c0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80013c4:	2b00      	cmp	r3, #0
 80013c6:	d0f0      	beq.n	80013aa <HAL_RCC_OscConfig+0x416>
 80013c8:	e054      	b.n	8001474 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80013ca:	4b10      	ldr	r3, [pc, #64]	; (800140c <HAL_RCC_OscConfig+0x478>)
 80013cc:	2200      	movs	r2, #0
 80013ce:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80013d0:	f7ff fab6 	bl	8000940 <HAL_GetTick>
 80013d4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80013d6:	e008      	b.n	80013ea <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80013d8:	f7ff fab2 	bl	8000940 <HAL_GetTick>
 80013dc:	4602      	mov	r2, r0
 80013de:	693b      	ldr	r3, [r7, #16]
 80013e0:	1ad3      	subs	r3, r2, r3
 80013e2:	2b02      	cmp	r3, #2
 80013e4:	d901      	bls.n	80013ea <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80013e6:	2303      	movs	r3, #3
 80013e8:	e045      	b.n	8001476 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80013ea:	4b06      	ldr	r3, [pc, #24]	; (8001404 <HAL_RCC_OscConfig+0x470>)
 80013ec:	681b      	ldr	r3, [r3, #0]
 80013ee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80013f2:	2b00      	cmp	r3, #0
 80013f4:	d1f0      	bne.n	80013d8 <HAL_RCC_OscConfig+0x444>
 80013f6:	e03d      	b.n	8001474 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	699b      	ldr	r3, [r3, #24]
 80013fc:	2b01      	cmp	r3, #1
 80013fe:	d107      	bne.n	8001410 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8001400:	2301      	movs	r3, #1
 8001402:	e038      	b.n	8001476 <HAL_RCC_OscConfig+0x4e2>
 8001404:	40023800 	.word	0x40023800
 8001408:	40007000 	.word	0x40007000
 800140c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001410:	4b1b      	ldr	r3, [pc, #108]	; (8001480 <HAL_RCC_OscConfig+0x4ec>)
 8001412:	685b      	ldr	r3, [r3, #4]
 8001414:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	699b      	ldr	r3, [r3, #24]
 800141a:	2b01      	cmp	r3, #1
 800141c:	d028      	beq.n	8001470 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800141e:	68fb      	ldr	r3, [r7, #12]
 8001420:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001428:	429a      	cmp	r2, r3
 800142a:	d121      	bne.n	8001470 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800142c:	68fb      	ldr	r3, [r7, #12]
 800142e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001436:	429a      	cmp	r2, r3
 8001438:	d11a      	bne.n	8001470 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800143a:	68fa      	ldr	r2, [r7, #12]
 800143c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001440:	4013      	ands	r3, r2
 8001442:	687a      	ldr	r2, [r7, #4]
 8001444:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001446:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001448:	4293      	cmp	r3, r2
 800144a:	d111      	bne.n	8001470 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800144c:	68fb      	ldr	r3, [r7, #12]
 800144e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001456:	085b      	lsrs	r3, r3, #1
 8001458:	3b01      	subs	r3, #1
 800145a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800145c:	429a      	cmp	r2, r3
 800145e:	d107      	bne.n	8001470 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001460:	68fb      	ldr	r3, [r7, #12]
 8001462:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800146a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800146c:	429a      	cmp	r2, r3
 800146e:	d001      	beq.n	8001474 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8001470:	2301      	movs	r3, #1
 8001472:	e000      	b.n	8001476 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8001474:	2300      	movs	r3, #0
}
 8001476:	4618      	mov	r0, r3
 8001478:	3718      	adds	r7, #24
 800147a:	46bd      	mov	sp, r7
 800147c:	bd80      	pop	{r7, pc}
 800147e:	bf00      	nop
 8001480:	40023800 	.word	0x40023800

08001484 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001484:	b580      	push	{r7, lr}
 8001486:	b084      	sub	sp, #16
 8001488:	af00      	add	r7, sp, #0
 800148a:	6078      	str	r0, [r7, #4]
 800148c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	2b00      	cmp	r3, #0
 8001492:	d101      	bne.n	8001498 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001494:	2301      	movs	r3, #1
 8001496:	e0cc      	b.n	8001632 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001498:	4b68      	ldr	r3, [pc, #416]	; (800163c <HAL_RCC_ClockConfig+0x1b8>)
 800149a:	681b      	ldr	r3, [r3, #0]
 800149c:	f003 030f 	and.w	r3, r3, #15
 80014a0:	683a      	ldr	r2, [r7, #0]
 80014a2:	429a      	cmp	r2, r3
 80014a4:	d90c      	bls.n	80014c0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80014a6:	4b65      	ldr	r3, [pc, #404]	; (800163c <HAL_RCC_ClockConfig+0x1b8>)
 80014a8:	683a      	ldr	r2, [r7, #0]
 80014aa:	b2d2      	uxtb	r2, r2
 80014ac:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80014ae:	4b63      	ldr	r3, [pc, #396]	; (800163c <HAL_RCC_ClockConfig+0x1b8>)
 80014b0:	681b      	ldr	r3, [r3, #0]
 80014b2:	f003 030f 	and.w	r3, r3, #15
 80014b6:	683a      	ldr	r2, [r7, #0]
 80014b8:	429a      	cmp	r2, r3
 80014ba:	d001      	beq.n	80014c0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80014bc:	2301      	movs	r3, #1
 80014be:	e0b8      	b.n	8001632 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	681b      	ldr	r3, [r3, #0]
 80014c4:	f003 0302 	and.w	r3, r3, #2
 80014c8:	2b00      	cmp	r3, #0
 80014ca:	d020      	beq.n	800150e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	681b      	ldr	r3, [r3, #0]
 80014d0:	f003 0304 	and.w	r3, r3, #4
 80014d4:	2b00      	cmp	r3, #0
 80014d6:	d005      	beq.n	80014e4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80014d8:	4b59      	ldr	r3, [pc, #356]	; (8001640 <HAL_RCC_ClockConfig+0x1bc>)
 80014da:	689b      	ldr	r3, [r3, #8]
 80014dc:	4a58      	ldr	r2, [pc, #352]	; (8001640 <HAL_RCC_ClockConfig+0x1bc>)
 80014de:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80014e2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	681b      	ldr	r3, [r3, #0]
 80014e8:	f003 0308 	and.w	r3, r3, #8
 80014ec:	2b00      	cmp	r3, #0
 80014ee:	d005      	beq.n	80014fc <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80014f0:	4b53      	ldr	r3, [pc, #332]	; (8001640 <HAL_RCC_ClockConfig+0x1bc>)
 80014f2:	689b      	ldr	r3, [r3, #8]
 80014f4:	4a52      	ldr	r2, [pc, #328]	; (8001640 <HAL_RCC_ClockConfig+0x1bc>)
 80014f6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80014fa:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80014fc:	4b50      	ldr	r3, [pc, #320]	; (8001640 <HAL_RCC_ClockConfig+0x1bc>)
 80014fe:	689b      	ldr	r3, [r3, #8]
 8001500:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	689b      	ldr	r3, [r3, #8]
 8001508:	494d      	ldr	r1, [pc, #308]	; (8001640 <HAL_RCC_ClockConfig+0x1bc>)
 800150a:	4313      	orrs	r3, r2
 800150c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	681b      	ldr	r3, [r3, #0]
 8001512:	f003 0301 	and.w	r3, r3, #1
 8001516:	2b00      	cmp	r3, #0
 8001518:	d044      	beq.n	80015a4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	685b      	ldr	r3, [r3, #4]
 800151e:	2b01      	cmp	r3, #1
 8001520:	d107      	bne.n	8001532 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001522:	4b47      	ldr	r3, [pc, #284]	; (8001640 <HAL_RCC_ClockConfig+0x1bc>)
 8001524:	681b      	ldr	r3, [r3, #0]
 8001526:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800152a:	2b00      	cmp	r3, #0
 800152c:	d119      	bne.n	8001562 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800152e:	2301      	movs	r3, #1
 8001530:	e07f      	b.n	8001632 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	685b      	ldr	r3, [r3, #4]
 8001536:	2b02      	cmp	r3, #2
 8001538:	d003      	beq.n	8001542 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800153e:	2b03      	cmp	r3, #3
 8001540:	d107      	bne.n	8001552 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001542:	4b3f      	ldr	r3, [pc, #252]	; (8001640 <HAL_RCC_ClockConfig+0x1bc>)
 8001544:	681b      	ldr	r3, [r3, #0]
 8001546:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800154a:	2b00      	cmp	r3, #0
 800154c:	d109      	bne.n	8001562 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800154e:	2301      	movs	r3, #1
 8001550:	e06f      	b.n	8001632 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001552:	4b3b      	ldr	r3, [pc, #236]	; (8001640 <HAL_RCC_ClockConfig+0x1bc>)
 8001554:	681b      	ldr	r3, [r3, #0]
 8001556:	f003 0302 	and.w	r3, r3, #2
 800155a:	2b00      	cmp	r3, #0
 800155c:	d101      	bne.n	8001562 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800155e:	2301      	movs	r3, #1
 8001560:	e067      	b.n	8001632 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001562:	4b37      	ldr	r3, [pc, #220]	; (8001640 <HAL_RCC_ClockConfig+0x1bc>)
 8001564:	689b      	ldr	r3, [r3, #8]
 8001566:	f023 0203 	bic.w	r2, r3, #3
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	685b      	ldr	r3, [r3, #4]
 800156e:	4934      	ldr	r1, [pc, #208]	; (8001640 <HAL_RCC_ClockConfig+0x1bc>)
 8001570:	4313      	orrs	r3, r2
 8001572:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001574:	f7ff f9e4 	bl	8000940 <HAL_GetTick>
 8001578:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800157a:	e00a      	b.n	8001592 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800157c:	f7ff f9e0 	bl	8000940 <HAL_GetTick>
 8001580:	4602      	mov	r2, r0
 8001582:	68fb      	ldr	r3, [r7, #12]
 8001584:	1ad3      	subs	r3, r2, r3
 8001586:	f241 3288 	movw	r2, #5000	; 0x1388
 800158a:	4293      	cmp	r3, r2
 800158c:	d901      	bls.n	8001592 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800158e:	2303      	movs	r3, #3
 8001590:	e04f      	b.n	8001632 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001592:	4b2b      	ldr	r3, [pc, #172]	; (8001640 <HAL_RCC_ClockConfig+0x1bc>)
 8001594:	689b      	ldr	r3, [r3, #8]
 8001596:	f003 020c 	and.w	r2, r3, #12
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	685b      	ldr	r3, [r3, #4]
 800159e:	009b      	lsls	r3, r3, #2
 80015a0:	429a      	cmp	r2, r3
 80015a2:	d1eb      	bne.n	800157c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80015a4:	4b25      	ldr	r3, [pc, #148]	; (800163c <HAL_RCC_ClockConfig+0x1b8>)
 80015a6:	681b      	ldr	r3, [r3, #0]
 80015a8:	f003 030f 	and.w	r3, r3, #15
 80015ac:	683a      	ldr	r2, [r7, #0]
 80015ae:	429a      	cmp	r2, r3
 80015b0:	d20c      	bcs.n	80015cc <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80015b2:	4b22      	ldr	r3, [pc, #136]	; (800163c <HAL_RCC_ClockConfig+0x1b8>)
 80015b4:	683a      	ldr	r2, [r7, #0]
 80015b6:	b2d2      	uxtb	r2, r2
 80015b8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80015ba:	4b20      	ldr	r3, [pc, #128]	; (800163c <HAL_RCC_ClockConfig+0x1b8>)
 80015bc:	681b      	ldr	r3, [r3, #0]
 80015be:	f003 030f 	and.w	r3, r3, #15
 80015c2:	683a      	ldr	r2, [r7, #0]
 80015c4:	429a      	cmp	r2, r3
 80015c6:	d001      	beq.n	80015cc <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80015c8:	2301      	movs	r3, #1
 80015ca:	e032      	b.n	8001632 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	681b      	ldr	r3, [r3, #0]
 80015d0:	f003 0304 	and.w	r3, r3, #4
 80015d4:	2b00      	cmp	r3, #0
 80015d6:	d008      	beq.n	80015ea <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80015d8:	4b19      	ldr	r3, [pc, #100]	; (8001640 <HAL_RCC_ClockConfig+0x1bc>)
 80015da:	689b      	ldr	r3, [r3, #8]
 80015dc:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	68db      	ldr	r3, [r3, #12]
 80015e4:	4916      	ldr	r1, [pc, #88]	; (8001640 <HAL_RCC_ClockConfig+0x1bc>)
 80015e6:	4313      	orrs	r3, r2
 80015e8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	681b      	ldr	r3, [r3, #0]
 80015ee:	f003 0308 	and.w	r3, r3, #8
 80015f2:	2b00      	cmp	r3, #0
 80015f4:	d009      	beq.n	800160a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80015f6:	4b12      	ldr	r3, [pc, #72]	; (8001640 <HAL_RCC_ClockConfig+0x1bc>)
 80015f8:	689b      	ldr	r3, [r3, #8]
 80015fa:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	691b      	ldr	r3, [r3, #16]
 8001602:	00db      	lsls	r3, r3, #3
 8001604:	490e      	ldr	r1, [pc, #56]	; (8001640 <HAL_RCC_ClockConfig+0x1bc>)
 8001606:	4313      	orrs	r3, r2
 8001608:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800160a:	f000 f821 	bl	8001650 <HAL_RCC_GetSysClockFreq>
 800160e:	4602      	mov	r2, r0
 8001610:	4b0b      	ldr	r3, [pc, #44]	; (8001640 <HAL_RCC_ClockConfig+0x1bc>)
 8001612:	689b      	ldr	r3, [r3, #8]
 8001614:	091b      	lsrs	r3, r3, #4
 8001616:	f003 030f 	and.w	r3, r3, #15
 800161a:	490a      	ldr	r1, [pc, #40]	; (8001644 <HAL_RCC_ClockConfig+0x1c0>)
 800161c:	5ccb      	ldrb	r3, [r1, r3]
 800161e:	fa22 f303 	lsr.w	r3, r2, r3
 8001622:	4a09      	ldr	r2, [pc, #36]	; (8001648 <HAL_RCC_ClockConfig+0x1c4>)
 8001624:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001626:	4b09      	ldr	r3, [pc, #36]	; (800164c <HAL_RCC_ClockConfig+0x1c8>)
 8001628:	681b      	ldr	r3, [r3, #0]
 800162a:	4618      	mov	r0, r3
 800162c:	f7ff f946 	bl	80008bc <HAL_InitTick>

  return HAL_OK;
 8001630:	2300      	movs	r3, #0
}
 8001632:	4618      	mov	r0, r3
 8001634:	3710      	adds	r7, #16
 8001636:	46bd      	mov	sp, r7
 8001638:	bd80      	pop	{r7, pc}
 800163a:	bf00      	nop
 800163c:	40023c00 	.word	0x40023c00
 8001640:	40023800 	.word	0x40023800
 8001644:	08002850 	.word	0x08002850
 8001648:	2000000c 	.word	0x2000000c
 800164c:	20000010 	.word	0x20000010

08001650 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001650:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001654:	b094      	sub	sp, #80	; 0x50
 8001656:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8001658:	2300      	movs	r3, #0
 800165a:	647b      	str	r3, [r7, #68]	; 0x44
 800165c:	2300      	movs	r3, #0
 800165e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001660:	2300      	movs	r3, #0
 8001662:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8001664:	2300      	movs	r3, #0
 8001666:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001668:	4b7c      	ldr	r3, [pc, #496]	; (800185c <HAL_RCC_GetSysClockFreq+0x20c>)
 800166a:	689b      	ldr	r3, [r3, #8]
 800166c:	f003 030c 	and.w	r3, r3, #12
 8001670:	2b08      	cmp	r3, #8
 8001672:	d00d      	beq.n	8001690 <HAL_RCC_GetSysClockFreq+0x40>
 8001674:	2b08      	cmp	r3, #8
 8001676:	f200 80e7 	bhi.w	8001848 <HAL_RCC_GetSysClockFreq+0x1f8>
 800167a:	2b00      	cmp	r3, #0
 800167c:	d002      	beq.n	8001684 <HAL_RCC_GetSysClockFreq+0x34>
 800167e:	2b04      	cmp	r3, #4
 8001680:	d003      	beq.n	800168a <HAL_RCC_GetSysClockFreq+0x3a>
 8001682:	e0e1      	b.n	8001848 <HAL_RCC_GetSysClockFreq+0x1f8>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001684:	4b76      	ldr	r3, [pc, #472]	; (8001860 <HAL_RCC_GetSysClockFreq+0x210>)
 8001686:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8001688:	e0e1      	b.n	800184e <HAL_RCC_GetSysClockFreq+0x1fe>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800168a:	4b76      	ldr	r3, [pc, #472]	; (8001864 <HAL_RCC_GetSysClockFreq+0x214>)
 800168c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800168e:	e0de      	b.n	800184e <HAL_RCC_GetSysClockFreq+0x1fe>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001690:	4b72      	ldr	r3, [pc, #456]	; (800185c <HAL_RCC_GetSysClockFreq+0x20c>)
 8001692:	685b      	ldr	r3, [r3, #4]
 8001694:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001698:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800169a:	4b70      	ldr	r3, [pc, #448]	; (800185c <HAL_RCC_GetSysClockFreq+0x20c>)
 800169c:	685b      	ldr	r3, [r3, #4]
 800169e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80016a2:	2b00      	cmp	r3, #0
 80016a4:	d065      	beq.n	8001772 <HAL_RCC_GetSysClockFreq+0x122>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80016a6:	4b6d      	ldr	r3, [pc, #436]	; (800185c <HAL_RCC_GetSysClockFreq+0x20c>)
 80016a8:	685b      	ldr	r3, [r3, #4]
 80016aa:	099b      	lsrs	r3, r3, #6
 80016ac:	2200      	movs	r2, #0
 80016ae:	63bb      	str	r3, [r7, #56]	; 0x38
 80016b0:	63fa      	str	r2, [r7, #60]	; 0x3c
 80016b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80016b4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80016b8:	633b      	str	r3, [r7, #48]	; 0x30
 80016ba:	2300      	movs	r3, #0
 80016bc:	637b      	str	r3, [r7, #52]	; 0x34
 80016be:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80016c2:	4622      	mov	r2, r4
 80016c4:	462b      	mov	r3, r5
 80016c6:	f04f 0000 	mov.w	r0, #0
 80016ca:	f04f 0100 	mov.w	r1, #0
 80016ce:	0159      	lsls	r1, r3, #5
 80016d0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80016d4:	0150      	lsls	r0, r2, #5
 80016d6:	4602      	mov	r2, r0
 80016d8:	460b      	mov	r3, r1
 80016da:	4621      	mov	r1, r4
 80016dc:	1a51      	subs	r1, r2, r1
 80016de:	6139      	str	r1, [r7, #16]
 80016e0:	4629      	mov	r1, r5
 80016e2:	eb63 0301 	sbc.w	r3, r3, r1
 80016e6:	617b      	str	r3, [r7, #20]
 80016e8:	f04f 0200 	mov.w	r2, #0
 80016ec:	f04f 0300 	mov.w	r3, #0
 80016f0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80016f4:	4659      	mov	r1, fp
 80016f6:	018b      	lsls	r3, r1, #6
 80016f8:	4651      	mov	r1, sl
 80016fa:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80016fe:	4651      	mov	r1, sl
 8001700:	018a      	lsls	r2, r1, #6
 8001702:	46d4      	mov	ip, sl
 8001704:	ebb2 080c 	subs.w	r8, r2, ip
 8001708:	4659      	mov	r1, fp
 800170a:	eb63 0901 	sbc.w	r9, r3, r1
 800170e:	f04f 0200 	mov.w	r2, #0
 8001712:	f04f 0300 	mov.w	r3, #0
 8001716:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800171a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800171e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001722:	4690      	mov	r8, r2
 8001724:	4699      	mov	r9, r3
 8001726:	4623      	mov	r3, r4
 8001728:	eb18 0303 	adds.w	r3, r8, r3
 800172c:	60bb      	str	r3, [r7, #8]
 800172e:	462b      	mov	r3, r5
 8001730:	eb49 0303 	adc.w	r3, r9, r3
 8001734:	60fb      	str	r3, [r7, #12]
 8001736:	f04f 0200 	mov.w	r2, #0
 800173a:	f04f 0300 	mov.w	r3, #0
 800173e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8001742:	4629      	mov	r1, r5
 8001744:	024b      	lsls	r3, r1, #9
 8001746:	4620      	mov	r0, r4
 8001748:	4629      	mov	r1, r5
 800174a:	4604      	mov	r4, r0
 800174c:	ea43 53d4 	orr.w	r3, r3, r4, lsr #23
 8001750:	4601      	mov	r1, r0
 8001752:	024a      	lsls	r2, r1, #9
 8001754:	4610      	mov	r0, r2
 8001756:	4619      	mov	r1, r3
 8001758:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800175a:	2200      	movs	r2, #0
 800175c:	62bb      	str	r3, [r7, #40]	; 0x28
 800175e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8001760:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8001764:	f7fe fd94 	bl	8000290 <__aeabi_uldivmod>
 8001768:	4602      	mov	r2, r0
 800176a:	460b      	mov	r3, r1
 800176c:	4613      	mov	r3, r2
 800176e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001770:	e05c      	b.n	800182c <HAL_RCC_GetSysClockFreq+0x1dc>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001772:	4b3a      	ldr	r3, [pc, #232]	; (800185c <HAL_RCC_GetSysClockFreq+0x20c>)
 8001774:	685b      	ldr	r3, [r3, #4]
 8001776:	099b      	lsrs	r3, r3, #6
 8001778:	2200      	movs	r2, #0
 800177a:	4618      	mov	r0, r3
 800177c:	4611      	mov	r1, r2
 800177e:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8001782:	623b      	str	r3, [r7, #32]
 8001784:	2300      	movs	r3, #0
 8001786:	627b      	str	r3, [r7, #36]	; 0x24
 8001788:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 800178c:	4642      	mov	r2, r8
 800178e:	464b      	mov	r3, r9
 8001790:	f04f 0000 	mov.w	r0, #0
 8001794:	f04f 0100 	mov.w	r1, #0
 8001798:	0159      	lsls	r1, r3, #5
 800179a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800179e:	0150      	lsls	r0, r2, #5
 80017a0:	4602      	mov	r2, r0
 80017a2:	460b      	mov	r3, r1
 80017a4:	46c4      	mov	ip, r8
 80017a6:	ebb2 0a0c 	subs.w	sl, r2, ip
 80017aa:	4640      	mov	r0, r8
 80017ac:	4649      	mov	r1, r9
 80017ae:	468c      	mov	ip, r1
 80017b0:	eb63 0b0c 	sbc.w	fp, r3, ip
 80017b4:	f04f 0200 	mov.w	r2, #0
 80017b8:	f04f 0300 	mov.w	r3, #0
 80017bc:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80017c0:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80017c4:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80017c8:	ebb2 040a 	subs.w	r4, r2, sl
 80017cc:	eb63 050b 	sbc.w	r5, r3, fp
 80017d0:	f04f 0200 	mov.w	r2, #0
 80017d4:	f04f 0300 	mov.w	r3, #0
 80017d8:	00eb      	lsls	r3, r5, #3
 80017da:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80017de:	00e2      	lsls	r2, r4, #3
 80017e0:	4614      	mov	r4, r2
 80017e2:	461d      	mov	r5, r3
 80017e4:	4603      	mov	r3, r0
 80017e6:	18e3      	adds	r3, r4, r3
 80017e8:	603b      	str	r3, [r7, #0]
 80017ea:	460b      	mov	r3, r1
 80017ec:	eb45 0303 	adc.w	r3, r5, r3
 80017f0:	607b      	str	r3, [r7, #4]
 80017f2:	f04f 0200 	mov.w	r2, #0
 80017f6:	f04f 0300 	mov.w	r3, #0
 80017fa:	e9d7 4500 	ldrd	r4, r5, [r7]
 80017fe:	4629      	mov	r1, r5
 8001800:	028b      	lsls	r3, r1, #10
 8001802:	4620      	mov	r0, r4
 8001804:	4629      	mov	r1, r5
 8001806:	4604      	mov	r4, r0
 8001808:	ea43 5394 	orr.w	r3, r3, r4, lsr #22
 800180c:	4601      	mov	r1, r0
 800180e:	028a      	lsls	r2, r1, #10
 8001810:	4610      	mov	r0, r2
 8001812:	4619      	mov	r1, r3
 8001814:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001816:	2200      	movs	r2, #0
 8001818:	61bb      	str	r3, [r7, #24]
 800181a:	61fa      	str	r2, [r7, #28]
 800181c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001820:	f7fe fd36 	bl	8000290 <__aeabi_uldivmod>
 8001824:	4602      	mov	r2, r0
 8001826:	460b      	mov	r3, r1
 8001828:	4613      	mov	r3, r2
 800182a:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800182c:	4b0b      	ldr	r3, [pc, #44]	; (800185c <HAL_RCC_GetSysClockFreq+0x20c>)
 800182e:	685b      	ldr	r3, [r3, #4]
 8001830:	0c1b      	lsrs	r3, r3, #16
 8001832:	f003 0303 	and.w	r3, r3, #3
 8001836:	3301      	adds	r3, #1
 8001838:	005b      	lsls	r3, r3, #1
 800183a:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 800183c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800183e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001840:	fbb2 f3f3 	udiv	r3, r2, r3
 8001844:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001846:	e002      	b.n	800184e <HAL_RCC_GetSysClockFreq+0x1fe>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001848:	4b05      	ldr	r3, [pc, #20]	; (8001860 <HAL_RCC_GetSysClockFreq+0x210>)
 800184a:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800184c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800184e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8001850:	4618      	mov	r0, r3
 8001852:	3750      	adds	r7, #80	; 0x50
 8001854:	46bd      	mov	sp, r7
 8001856:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800185a:	bf00      	nop
 800185c:	40023800 	.word	0x40023800
 8001860:	00f42400 	.word	0x00f42400
 8001864:	007a1200 	.word	0x007a1200

08001868 <main>:
  * @brief  Main program
  * @param  None
  * @retval None
  */
int main(void)
{
 8001868:	b580      	push	{r7, lr}
 800186a:	af00      	add	r7, sp, #0
         duration should be kept 1ms since PPP_TIMEOUT_VALUEs are defined and 
         handled in milliseconds basis.
       - Set NVIC Group Priority to 4
       - Low Level Initialization
     */
  HAL_Init();
 800186c:	f7ff f80a 	bl	8000884 <HAL_Init>

  /* Configure the system clock to 180 MHz */
  SystemClock_Config();
 8001870:	f000 f816 	bl	80018a0 <SystemClock_Config>

  /* Initialize BSP Led for LED2 */
  BSP_LED_Init(LED2);
 8001874:	2001      	movs	r0, #1
 8001876:	f7fe fe89 	bl	800058c <BSP_LED_Init>
  BSP_LED_Init(12);
 800187a:	200c      	movs	r0, #12
 800187c:	f7fe fe86 	bl	800058c <BSP_LED_Init>

  /* Infinite loop */
  while (1)
  {	  printf("printing..");
 8001880:	4806      	ldr	r0, [pc, #24]	; (800189c <main+0x34>)
 8001882:	f000 f961 	bl	8001b48 <iprintf>
	  BSP_LED_On(12);
 8001886:	200c      	movs	r0, #12
 8001888:	f7fe fed0 	bl	800062c <BSP_LED_On>
	  HAL_Delay(100);
 800188c:	2064      	movs	r0, #100	; 0x64
 800188e:	f7ff f861 	bl	8000954 <HAL_Delay>
	  BSP_LED_Off(12);
 8001892:	200c      	movs	r0, #12
 8001894:	f7fe fee4 	bl	8000660 <BSP_LED_Off>
  {	  printf("printing..");
 8001898:	e7f2      	b.n	8001880 <main+0x18>
 800189a:	bf00      	nop
 800189c:	0800283c 	.word	0x0800283c

080018a0 <SystemClock_Config>:
  *            Flash Latency(WS)              = 5
  * @param  None
  * @retval None
  */
static void SystemClock_Config(void)
{
 80018a0:	b580      	push	{r7, lr}
 80018a2:	b094      	sub	sp, #80	; 0x50
 80018a4:	af00      	add	r7, sp, #0
  RCC_ClkInitTypeDef RCC_ClkInitStruct;
  RCC_OscInitTypeDef RCC_OscInitStruct;

  /* Enable Power Control clock */
  __HAL_RCC_PWR_CLK_ENABLE();
 80018a6:	2300      	movs	r3, #0
 80018a8:	60bb      	str	r3, [r7, #8]
 80018aa:	4b2c      	ldr	r3, [pc, #176]	; (800195c <SystemClock_Config+0xbc>)
 80018ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018ae:	4a2b      	ldr	r2, [pc, #172]	; (800195c <SystemClock_Config+0xbc>)
 80018b0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80018b4:	6413      	str	r3, [r2, #64]	; 0x40
 80018b6:	4b29      	ldr	r3, [pc, #164]	; (800195c <SystemClock_Config+0xbc>)
 80018b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018ba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80018be:	60bb      	str	r3, [r7, #8]
 80018c0:	68bb      	ldr	r3, [r7, #8]
  
  /* The voltage scaling allows optimizing the power consumption when the device is 
     clocked below the maximum system frequency, to update the voltage scaling value 
     regarding system frequency refer to product datasheet.  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80018c2:	2300      	movs	r3, #0
 80018c4:	607b      	str	r3, [r7, #4]
 80018c6:	4b26      	ldr	r3, [pc, #152]	; (8001960 <SystemClock_Config+0xc0>)
 80018c8:	681b      	ldr	r3, [r3, #0]
 80018ca:	4a25      	ldr	r2, [pc, #148]	; (8001960 <SystemClock_Config+0xc0>)
 80018cc:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80018d0:	6013      	str	r3, [r2, #0]
 80018d2:	4b23      	ldr	r3, [pc, #140]	; (8001960 <SystemClock_Config+0xc0>)
 80018d4:	681b      	ldr	r3, [r3, #0]
 80018d6:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80018da:	607b      	str	r3, [r7, #4]
 80018dc:	687b      	ldr	r3, [r7, #4]
  
  /* Enable HSE Oscillator and activate PLL with HSE as source */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80018de:	2301      	movs	r3, #1
 80018e0:	60fb      	str	r3, [r7, #12]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 80018e2:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 80018e6:	613b      	str	r3, [r7, #16]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80018e8:	2302      	movs	r3, #2
 80018ea:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80018ec:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80018f0:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLM = 8;
 80018f2:	2308      	movs	r3, #8
 80018f4:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLN = 360;
 80018f6:	f44f 73b4 	mov.w	r3, #360	; 0x168
 80018fa:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80018fc:	2302      	movs	r3, #2
 80018fe:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8001900:	2307      	movs	r3, #7
 8001902:	63bb      	str	r3, [r7, #56]	; 0x38
  if(HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001904:	f107 030c 	add.w	r3, r7, #12
 8001908:	4618      	mov	r0, r3
 800190a:	f7ff fb43 	bl	8000f94 <HAL_RCC_OscConfig>
 800190e:	4603      	mov	r3, r0
 8001910:	2b00      	cmp	r3, #0
 8001912:	d001      	beq.n	8001918 <SystemClock_Config+0x78>
  {
    /* Initialization Error */
    Error_Handler();
 8001914:	f000 f826 	bl	8001964 <Error_Handler>
  }
  
  if(HAL_PWREx_EnableOverDrive() != HAL_OK)
 8001918:	f7ff faec 	bl	8000ef4 <HAL_PWREx_EnableOverDrive>
 800191c:	4603      	mov	r3, r0
 800191e:	2b00      	cmp	r3, #0
 8001920:	d001      	beq.n	8001926 <SystemClock_Config+0x86>
  {
    /* Initialization Error */
    Error_Handler();
 8001922:	f000 f81f 	bl	8001964 <Error_Handler>
  }
  
  /* Select PLL as system clock source and configure the HCLK, PCLK1 and PCLK2 
     clocks dividers */
  RCC_ClkInitStruct.ClockType = (RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2);
 8001926:	230f      	movs	r3, #15
 8001928:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800192a:	2302      	movs	r3, #2
 800192c:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800192e:	2300      	movs	r3, #0
 8001930:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;  
 8001932:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001936:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;  
 8001938:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800193c:	64fb      	str	r3, [r7, #76]	; 0x4c
  if(HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800193e:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8001942:	2105      	movs	r1, #5
 8001944:	4618      	mov	r0, r3
 8001946:	f7ff fd9d 	bl	8001484 <HAL_RCC_ClockConfig>
 800194a:	4603      	mov	r3, r0
 800194c:	2b00      	cmp	r3, #0
 800194e:	d001      	beq.n	8001954 <SystemClock_Config+0xb4>
  {
    /* Initialization Error */
    Error_Handler();
 8001950:	f000 f808 	bl	8001964 <Error_Handler>
  }
}
 8001954:	bf00      	nop
 8001956:	3750      	adds	r7, #80	; 0x50
 8001958:	46bd      	mov	sp, r7
 800195a:	bd80      	pop	{r7, pc}
 800195c:	40023800 	.word	0x40023800
 8001960:	40007000 	.word	0x40007000

08001964 <Error_Handler>:
  * @brief  This function is executed in case of error occurrence.
  * @param  None
  * @retval None
  */
static void Error_Handler(void)
{
 8001964:	b580      	push	{r7, lr}
 8001966:	af00      	add	r7, sp, #0
  /* Turn LED2 on */
  BSP_LED_On(LED2);
 8001968:	2001      	movs	r0, #1
 800196a:	f7fe fe5f 	bl	800062c <BSP_LED_On>
  while (1)
 800196e:	e7fe      	b.n	800196e <Error_Handler+0xa>

08001970 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8001970:	f8df d034 	ldr.w	sp, [pc, #52]	; 80019a8 <LoopFillZerobss+0x14>
 
/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8001974:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8001976:	e003      	b.n	8001980 <LoopCopyDataInit>

08001978 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8001978:	4b0c      	ldr	r3, [pc, #48]	; (80019ac <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 800197a:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 800197c:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800197e:	3104      	adds	r1, #4

08001980 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8001980:	480b      	ldr	r0, [pc, #44]	; (80019b0 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8001982:	4b0c      	ldr	r3, [pc, #48]	; (80019b4 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8001984:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8001986:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8001988:	d3f6      	bcc.n	8001978 <CopyDataInit>
  ldr  r2, =_sbss
 800198a:	4a0b      	ldr	r2, [pc, #44]	; (80019b8 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 800198c:	e002      	b.n	8001994 <LoopFillZerobss>

0800198e <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 800198e:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8001990:	f842 3b04 	str.w	r3, [r2], #4

08001994 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8001994:	4b09      	ldr	r3, [pc, #36]	; (80019bc <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8001996:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8001998:	d3f9      	bcc.n	800198e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800199a:	f7fe fe7b 	bl	8000694 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800199e:	f000 f97d 	bl	8001c9c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80019a2:	f7ff ff61 	bl	8001868 <main>
  bx  lr    
 80019a6:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 80019a8:	20030000 	.word	0x20030000
  ldr  r3, =_sidata
 80019ac:	080028a4 	.word	0x080028a4
  ldr  r0, =_sdata
 80019b0:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 80019b4:	20000074 	.word	0x20000074
  ldr  r2, =_sbss
 80019b8:	20000074 	.word	0x20000074
  ldr  r3, = _ebss
 80019bc:	200001e4 	.word	0x200001e4

080019c0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80019c0:	e7fe      	b.n	80019c0 <ADC_IRQHandler>
	...

080019c4 <std>:
 80019c4:	2300      	movs	r3, #0
 80019c6:	b510      	push	{r4, lr}
 80019c8:	4604      	mov	r4, r0
 80019ca:	e9c0 3300 	strd	r3, r3, [r0]
 80019ce:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80019d2:	6083      	str	r3, [r0, #8]
 80019d4:	8181      	strh	r1, [r0, #12]
 80019d6:	6643      	str	r3, [r0, #100]	; 0x64
 80019d8:	81c2      	strh	r2, [r0, #14]
 80019da:	6183      	str	r3, [r0, #24]
 80019dc:	4619      	mov	r1, r3
 80019de:	2208      	movs	r2, #8
 80019e0:	305c      	adds	r0, #92	; 0x5c
 80019e2:	f000 f906 	bl	8001bf2 <memset>
 80019e6:	4b0d      	ldr	r3, [pc, #52]	; (8001a1c <std+0x58>)
 80019e8:	6263      	str	r3, [r4, #36]	; 0x24
 80019ea:	4b0d      	ldr	r3, [pc, #52]	; (8001a20 <std+0x5c>)
 80019ec:	62a3      	str	r3, [r4, #40]	; 0x28
 80019ee:	4b0d      	ldr	r3, [pc, #52]	; (8001a24 <std+0x60>)
 80019f0:	62e3      	str	r3, [r4, #44]	; 0x2c
 80019f2:	4b0d      	ldr	r3, [pc, #52]	; (8001a28 <std+0x64>)
 80019f4:	6323      	str	r3, [r4, #48]	; 0x30
 80019f6:	4b0d      	ldr	r3, [pc, #52]	; (8001a2c <std+0x68>)
 80019f8:	6224      	str	r4, [r4, #32]
 80019fa:	429c      	cmp	r4, r3
 80019fc:	d006      	beq.n	8001a0c <std+0x48>
 80019fe:	f103 0268 	add.w	r2, r3, #104	; 0x68
 8001a02:	4294      	cmp	r4, r2
 8001a04:	d002      	beq.n	8001a0c <std+0x48>
 8001a06:	33d0      	adds	r3, #208	; 0xd0
 8001a08:	429c      	cmp	r4, r3
 8001a0a:	d105      	bne.n	8001a18 <std+0x54>
 8001a0c:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8001a10:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8001a14:	f000 b966 	b.w	8001ce4 <__retarget_lock_init_recursive>
 8001a18:	bd10      	pop	{r4, pc}
 8001a1a:	bf00      	nop
 8001a1c:	08001b6d 	.word	0x08001b6d
 8001a20:	08001b8f 	.word	0x08001b8f
 8001a24:	08001bc7 	.word	0x08001bc7
 8001a28:	08001beb 	.word	0x08001beb
 8001a2c:	20000098 	.word	0x20000098

08001a30 <stdio_exit_handler>:
 8001a30:	4a02      	ldr	r2, [pc, #8]	; (8001a3c <stdio_exit_handler+0xc>)
 8001a32:	4903      	ldr	r1, [pc, #12]	; (8001a40 <stdio_exit_handler+0x10>)
 8001a34:	4803      	ldr	r0, [pc, #12]	; (8001a44 <stdio_exit_handler+0x14>)
 8001a36:	f000 b869 	b.w	8001b0c <_fwalk_sglue>
 8001a3a:	bf00      	nop
 8001a3c:	20000018 	.word	0x20000018
 8001a40:	08002581 	.word	0x08002581
 8001a44:	20000024 	.word	0x20000024

08001a48 <cleanup_stdio>:
 8001a48:	6841      	ldr	r1, [r0, #4]
 8001a4a:	4b0c      	ldr	r3, [pc, #48]	; (8001a7c <cleanup_stdio+0x34>)
 8001a4c:	4299      	cmp	r1, r3
 8001a4e:	b510      	push	{r4, lr}
 8001a50:	4604      	mov	r4, r0
 8001a52:	d001      	beq.n	8001a58 <cleanup_stdio+0x10>
 8001a54:	f000 fd94 	bl	8002580 <_fflush_r>
 8001a58:	68a1      	ldr	r1, [r4, #8]
 8001a5a:	4b09      	ldr	r3, [pc, #36]	; (8001a80 <cleanup_stdio+0x38>)
 8001a5c:	4299      	cmp	r1, r3
 8001a5e:	d002      	beq.n	8001a66 <cleanup_stdio+0x1e>
 8001a60:	4620      	mov	r0, r4
 8001a62:	f000 fd8d 	bl	8002580 <_fflush_r>
 8001a66:	68e1      	ldr	r1, [r4, #12]
 8001a68:	4b06      	ldr	r3, [pc, #24]	; (8001a84 <cleanup_stdio+0x3c>)
 8001a6a:	4299      	cmp	r1, r3
 8001a6c:	d004      	beq.n	8001a78 <cleanup_stdio+0x30>
 8001a6e:	4620      	mov	r0, r4
 8001a70:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8001a74:	f000 bd84 	b.w	8002580 <_fflush_r>
 8001a78:	bd10      	pop	{r4, pc}
 8001a7a:	bf00      	nop
 8001a7c:	20000098 	.word	0x20000098
 8001a80:	20000100 	.word	0x20000100
 8001a84:	20000168 	.word	0x20000168

08001a88 <global_stdio_init.part.0>:
 8001a88:	b510      	push	{r4, lr}
 8001a8a:	4b0b      	ldr	r3, [pc, #44]	; (8001ab8 <global_stdio_init.part.0+0x30>)
 8001a8c:	4c0b      	ldr	r4, [pc, #44]	; (8001abc <global_stdio_init.part.0+0x34>)
 8001a8e:	4a0c      	ldr	r2, [pc, #48]	; (8001ac0 <global_stdio_init.part.0+0x38>)
 8001a90:	601a      	str	r2, [r3, #0]
 8001a92:	4620      	mov	r0, r4
 8001a94:	2200      	movs	r2, #0
 8001a96:	2104      	movs	r1, #4
 8001a98:	f7ff ff94 	bl	80019c4 <std>
 8001a9c:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8001aa0:	2201      	movs	r2, #1
 8001aa2:	2109      	movs	r1, #9
 8001aa4:	f7ff ff8e 	bl	80019c4 <std>
 8001aa8:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8001aac:	2202      	movs	r2, #2
 8001aae:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8001ab2:	2112      	movs	r1, #18
 8001ab4:	f7ff bf86 	b.w	80019c4 <std>
 8001ab8:	200001d0 	.word	0x200001d0
 8001abc:	20000098 	.word	0x20000098
 8001ac0:	08001a31 	.word	0x08001a31

08001ac4 <__sfp_lock_acquire>:
 8001ac4:	4801      	ldr	r0, [pc, #4]	; (8001acc <__sfp_lock_acquire+0x8>)
 8001ac6:	f000 b90e 	b.w	8001ce6 <__retarget_lock_acquire_recursive>
 8001aca:	bf00      	nop
 8001acc:	200001d9 	.word	0x200001d9

08001ad0 <__sfp_lock_release>:
 8001ad0:	4801      	ldr	r0, [pc, #4]	; (8001ad8 <__sfp_lock_release+0x8>)
 8001ad2:	f000 b909 	b.w	8001ce8 <__retarget_lock_release_recursive>
 8001ad6:	bf00      	nop
 8001ad8:	200001d9 	.word	0x200001d9

08001adc <__sinit>:
 8001adc:	b510      	push	{r4, lr}
 8001ade:	4604      	mov	r4, r0
 8001ae0:	f7ff fff0 	bl	8001ac4 <__sfp_lock_acquire>
 8001ae4:	6a23      	ldr	r3, [r4, #32]
 8001ae6:	b11b      	cbz	r3, 8001af0 <__sinit+0x14>
 8001ae8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8001aec:	f7ff bff0 	b.w	8001ad0 <__sfp_lock_release>
 8001af0:	4b04      	ldr	r3, [pc, #16]	; (8001b04 <__sinit+0x28>)
 8001af2:	6223      	str	r3, [r4, #32]
 8001af4:	4b04      	ldr	r3, [pc, #16]	; (8001b08 <__sinit+0x2c>)
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	2b00      	cmp	r3, #0
 8001afa:	d1f5      	bne.n	8001ae8 <__sinit+0xc>
 8001afc:	f7ff ffc4 	bl	8001a88 <global_stdio_init.part.0>
 8001b00:	e7f2      	b.n	8001ae8 <__sinit+0xc>
 8001b02:	bf00      	nop
 8001b04:	08001a49 	.word	0x08001a49
 8001b08:	200001d0 	.word	0x200001d0

08001b0c <_fwalk_sglue>:
 8001b0c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8001b10:	4607      	mov	r7, r0
 8001b12:	4688      	mov	r8, r1
 8001b14:	4614      	mov	r4, r2
 8001b16:	2600      	movs	r6, #0
 8001b18:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8001b1c:	f1b9 0901 	subs.w	r9, r9, #1
 8001b20:	d505      	bpl.n	8001b2e <_fwalk_sglue+0x22>
 8001b22:	6824      	ldr	r4, [r4, #0]
 8001b24:	2c00      	cmp	r4, #0
 8001b26:	d1f7      	bne.n	8001b18 <_fwalk_sglue+0xc>
 8001b28:	4630      	mov	r0, r6
 8001b2a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8001b2e:	89ab      	ldrh	r3, [r5, #12]
 8001b30:	2b01      	cmp	r3, #1
 8001b32:	d907      	bls.n	8001b44 <_fwalk_sglue+0x38>
 8001b34:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8001b38:	3301      	adds	r3, #1
 8001b3a:	d003      	beq.n	8001b44 <_fwalk_sglue+0x38>
 8001b3c:	4629      	mov	r1, r5
 8001b3e:	4638      	mov	r0, r7
 8001b40:	47c0      	blx	r8
 8001b42:	4306      	orrs	r6, r0
 8001b44:	3568      	adds	r5, #104	; 0x68
 8001b46:	e7e9      	b.n	8001b1c <_fwalk_sglue+0x10>

08001b48 <iprintf>:
 8001b48:	b40f      	push	{r0, r1, r2, r3}
 8001b4a:	b507      	push	{r0, r1, r2, lr}
 8001b4c:	4906      	ldr	r1, [pc, #24]	; (8001b68 <iprintf+0x20>)
 8001b4e:	ab04      	add	r3, sp, #16
 8001b50:	6808      	ldr	r0, [r1, #0]
 8001b52:	f853 2b04 	ldr.w	r2, [r3], #4
 8001b56:	6881      	ldr	r1, [r0, #8]
 8001b58:	9301      	str	r3, [sp, #4]
 8001b5a:	f000 f9e5 	bl	8001f28 <_vfiprintf_r>
 8001b5e:	b003      	add	sp, #12
 8001b60:	f85d eb04 	ldr.w	lr, [sp], #4
 8001b64:	b004      	add	sp, #16
 8001b66:	4770      	bx	lr
 8001b68:	20000070 	.word	0x20000070

08001b6c <__sread>:
 8001b6c:	b510      	push	{r4, lr}
 8001b6e:	460c      	mov	r4, r1
 8001b70:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001b74:	f000 f868 	bl	8001c48 <_read_r>
 8001b78:	2800      	cmp	r0, #0
 8001b7a:	bfab      	itete	ge
 8001b7c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8001b7e:	89a3      	ldrhlt	r3, [r4, #12]
 8001b80:	181b      	addge	r3, r3, r0
 8001b82:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8001b86:	bfac      	ite	ge
 8001b88:	6563      	strge	r3, [r4, #84]	; 0x54
 8001b8a:	81a3      	strhlt	r3, [r4, #12]
 8001b8c:	bd10      	pop	{r4, pc}

08001b8e <__swrite>:
 8001b8e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001b92:	461f      	mov	r7, r3
 8001b94:	898b      	ldrh	r3, [r1, #12]
 8001b96:	05db      	lsls	r3, r3, #23
 8001b98:	4605      	mov	r5, r0
 8001b9a:	460c      	mov	r4, r1
 8001b9c:	4616      	mov	r6, r2
 8001b9e:	d505      	bpl.n	8001bac <__swrite+0x1e>
 8001ba0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001ba4:	2302      	movs	r3, #2
 8001ba6:	2200      	movs	r2, #0
 8001ba8:	f000 f83c 	bl	8001c24 <_lseek_r>
 8001bac:	89a3      	ldrh	r3, [r4, #12]
 8001bae:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8001bb2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8001bb6:	81a3      	strh	r3, [r4, #12]
 8001bb8:	4632      	mov	r2, r6
 8001bba:	463b      	mov	r3, r7
 8001bbc:	4628      	mov	r0, r5
 8001bbe:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8001bc2:	f000 b853 	b.w	8001c6c <_write_r>

08001bc6 <__sseek>:
 8001bc6:	b510      	push	{r4, lr}
 8001bc8:	460c      	mov	r4, r1
 8001bca:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001bce:	f000 f829 	bl	8001c24 <_lseek_r>
 8001bd2:	1c43      	adds	r3, r0, #1
 8001bd4:	89a3      	ldrh	r3, [r4, #12]
 8001bd6:	bf15      	itete	ne
 8001bd8:	6560      	strne	r0, [r4, #84]	; 0x54
 8001bda:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8001bde:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8001be2:	81a3      	strheq	r3, [r4, #12]
 8001be4:	bf18      	it	ne
 8001be6:	81a3      	strhne	r3, [r4, #12]
 8001be8:	bd10      	pop	{r4, pc}

08001bea <__sclose>:
 8001bea:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001bee:	f000 b809 	b.w	8001c04 <_close_r>

08001bf2 <memset>:
 8001bf2:	4402      	add	r2, r0
 8001bf4:	4603      	mov	r3, r0
 8001bf6:	4293      	cmp	r3, r2
 8001bf8:	d100      	bne.n	8001bfc <memset+0xa>
 8001bfa:	4770      	bx	lr
 8001bfc:	f803 1b01 	strb.w	r1, [r3], #1
 8001c00:	e7f9      	b.n	8001bf6 <memset+0x4>
	...

08001c04 <_close_r>:
 8001c04:	b538      	push	{r3, r4, r5, lr}
 8001c06:	4d06      	ldr	r5, [pc, #24]	; (8001c20 <_close_r+0x1c>)
 8001c08:	2300      	movs	r3, #0
 8001c0a:	4604      	mov	r4, r0
 8001c0c:	4608      	mov	r0, r1
 8001c0e:	602b      	str	r3, [r5, #0]
 8001c10:	f7fe fdd1 	bl	80007b6 <_close>
 8001c14:	1c43      	adds	r3, r0, #1
 8001c16:	d102      	bne.n	8001c1e <_close_r+0x1a>
 8001c18:	682b      	ldr	r3, [r5, #0]
 8001c1a:	b103      	cbz	r3, 8001c1e <_close_r+0x1a>
 8001c1c:	6023      	str	r3, [r4, #0]
 8001c1e:	bd38      	pop	{r3, r4, r5, pc}
 8001c20:	200001d4 	.word	0x200001d4

08001c24 <_lseek_r>:
 8001c24:	b538      	push	{r3, r4, r5, lr}
 8001c26:	4d07      	ldr	r5, [pc, #28]	; (8001c44 <_lseek_r+0x20>)
 8001c28:	4604      	mov	r4, r0
 8001c2a:	4608      	mov	r0, r1
 8001c2c:	4611      	mov	r1, r2
 8001c2e:	2200      	movs	r2, #0
 8001c30:	602a      	str	r2, [r5, #0]
 8001c32:	461a      	mov	r2, r3
 8001c34:	f7fe fde3 	bl	80007fe <_lseek>
 8001c38:	1c43      	adds	r3, r0, #1
 8001c3a:	d102      	bne.n	8001c42 <_lseek_r+0x1e>
 8001c3c:	682b      	ldr	r3, [r5, #0]
 8001c3e:	b103      	cbz	r3, 8001c42 <_lseek_r+0x1e>
 8001c40:	6023      	str	r3, [r4, #0]
 8001c42:	bd38      	pop	{r3, r4, r5, pc}
 8001c44:	200001d4 	.word	0x200001d4

08001c48 <_read_r>:
 8001c48:	b538      	push	{r3, r4, r5, lr}
 8001c4a:	4d07      	ldr	r5, [pc, #28]	; (8001c68 <_read_r+0x20>)
 8001c4c:	4604      	mov	r4, r0
 8001c4e:	4608      	mov	r0, r1
 8001c50:	4611      	mov	r1, r2
 8001c52:	2200      	movs	r2, #0
 8001c54:	602a      	str	r2, [r5, #0]
 8001c56:	461a      	mov	r2, r3
 8001c58:	f7fe fd74 	bl	8000744 <_read>
 8001c5c:	1c43      	adds	r3, r0, #1
 8001c5e:	d102      	bne.n	8001c66 <_read_r+0x1e>
 8001c60:	682b      	ldr	r3, [r5, #0]
 8001c62:	b103      	cbz	r3, 8001c66 <_read_r+0x1e>
 8001c64:	6023      	str	r3, [r4, #0]
 8001c66:	bd38      	pop	{r3, r4, r5, pc}
 8001c68:	200001d4 	.word	0x200001d4

08001c6c <_write_r>:
 8001c6c:	b538      	push	{r3, r4, r5, lr}
 8001c6e:	4d07      	ldr	r5, [pc, #28]	; (8001c8c <_write_r+0x20>)
 8001c70:	4604      	mov	r4, r0
 8001c72:	4608      	mov	r0, r1
 8001c74:	4611      	mov	r1, r2
 8001c76:	2200      	movs	r2, #0
 8001c78:	602a      	str	r2, [r5, #0]
 8001c7a:	461a      	mov	r2, r3
 8001c7c:	f7fe fd7f 	bl	800077e <_write>
 8001c80:	1c43      	adds	r3, r0, #1
 8001c82:	d102      	bne.n	8001c8a <_write_r+0x1e>
 8001c84:	682b      	ldr	r3, [r5, #0]
 8001c86:	b103      	cbz	r3, 8001c8a <_write_r+0x1e>
 8001c88:	6023      	str	r3, [r4, #0]
 8001c8a:	bd38      	pop	{r3, r4, r5, pc}
 8001c8c:	200001d4 	.word	0x200001d4

08001c90 <__errno>:
 8001c90:	4b01      	ldr	r3, [pc, #4]	; (8001c98 <__errno+0x8>)
 8001c92:	6818      	ldr	r0, [r3, #0]
 8001c94:	4770      	bx	lr
 8001c96:	bf00      	nop
 8001c98:	20000070 	.word	0x20000070

08001c9c <__libc_init_array>:
 8001c9c:	b570      	push	{r4, r5, r6, lr}
 8001c9e:	4d0d      	ldr	r5, [pc, #52]	; (8001cd4 <__libc_init_array+0x38>)
 8001ca0:	4c0d      	ldr	r4, [pc, #52]	; (8001cd8 <__libc_init_array+0x3c>)
 8001ca2:	1b64      	subs	r4, r4, r5
 8001ca4:	10a4      	asrs	r4, r4, #2
 8001ca6:	2600      	movs	r6, #0
 8001ca8:	42a6      	cmp	r6, r4
 8001caa:	d109      	bne.n	8001cc0 <__libc_init_array+0x24>
 8001cac:	4d0b      	ldr	r5, [pc, #44]	; (8001cdc <__libc_init_array+0x40>)
 8001cae:	4c0c      	ldr	r4, [pc, #48]	; (8001ce0 <__libc_init_array+0x44>)
 8001cb0:	f000 fdb8 	bl	8002824 <_init>
 8001cb4:	1b64      	subs	r4, r4, r5
 8001cb6:	10a4      	asrs	r4, r4, #2
 8001cb8:	2600      	movs	r6, #0
 8001cba:	42a6      	cmp	r6, r4
 8001cbc:	d105      	bne.n	8001cca <__libc_init_array+0x2e>
 8001cbe:	bd70      	pop	{r4, r5, r6, pc}
 8001cc0:	f855 3b04 	ldr.w	r3, [r5], #4
 8001cc4:	4798      	blx	r3
 8001cc6:	3601      	adds	r6, #1
 8001cc8:	e7ee      	b.n	8001ca8 <__libc_init_array+0xc>
 8001cca:	f855 3b04 	ldr.w	r3, [r5], #4
 8001cce:	4798      	blx	r3
 8001cd0:	3601      	adds	r6, #1
 8001cd2:	e7f2      	b.n	8001cba <__libc_init_array+0x1e>
 8001cd4:	0800289c 	.word	0x0800289c
 8001cd8:	0800289c 	.word	0x0800289c
 8001cdc:	0800289c 	.word	0x0800289c
 8001ce0:	080028a0 	.word	0x080028a0

08001ce4 <__retarget_lock_init_recursive>:
 8001ce4:	4770      	bx	lr

08001ce6 <__retarget_lock_acquire_recursive>:
 8001ce6:	4770      	bx	lr

08001ce8 <__retarget_lock_release_recursive>:
 8001ce8:	4770      	bx	lr
	...

08001cec <_free_r>:
 8001cec:	b538      	push	{r3, r4, r5, lr}
 8001cee:	4605      	mov	r5, r0
 8001cf0:	2900      	cmp	r1, #0
 8001cf2:	d041      	beq.n	8001d78 <_free_r+0x8c>
 8001cf4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8001cf8:	1f0c      	subs	r4, r1, #4
 8001cfa:	2b00      	cmp	r3, #0
 8001cfc:	bfb8      	it	lt
 8001cfe:	18e4      	addlt	r4, r4, r3
 8001d00:	f000 f8de 	bl	8001ec0 <__malloc_lock>
 8001d04:	4a1d      	ldr	r2, [pc, #116]	; (8001d7c <_free_r+0x90>)
 8001d06:	6813      	ldr	r3, [r2, #0]
 8001d08:	b933      	cbnz	r3, 8001d18 <_free_r+0x2c>
 8001d0a:	6063      	str	r3, [r4, #4]
 8001d0c:	6014      	str	r4, [r2, #0]
 8001d0e:	4628      	mov	r0, r5
 8001d10:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8001d14:	f000 b8da 	b.w	8001ecc <__malloc_unlock>
 8001d18:	42a3      	cmp	r3, r4
 8001d1a:	d908      	bls.n	8001d2e <_free_r+0x42>
 8001d1c:	6820      	ldr	r0, [r4, #0]
 8001d1e:	1821      	adds	r1, r4, r0
 8001d20:	428b      	cmp	r3, r1
 8001d22:	bf01      	itttt	eq
 8001d24:	6819      	ldreq	r1, [r3, #0]
 8001d26:	685b      	ldreq	r3, [r3, #4]
 8001d28:	1809      	addeq	r1, r1, r0
 8001d2a:	6021      	streq	r1, [r4, #0]
 8001d2c:	e7ed      	b.n	8001d0a <_free_r+0x1e>
 8001d2e:	461a      	mov	r2, r3
 8001d30:	685b      	ldr	r3, [r3, #4]
 8001d32:	b10b      	cbz	r3, 8001d38 <_free_r+0x4c>
 8001d34:	42a3      	cmp	r3, r4
 8001d36:	d9fa      	bls.n	8001d2e <_free_r+0x42>
 8001d38:	6811      	ldr	r1, [r2, #0]
 8001d3a:	1850      	adds	r0, r2, r1
 8001d3c:	42a0      	cmp	r0, r4
 8001d3e:	d10b      	bne.n	8001d58 <_free_r+0x6c>
 8001d40:	6820      	ldr	r0, [r4, #0]
 8001d42:	4401      	add	r1, r0
 8001d44:	1850      	adds	r0, r2, r1
 8001d46:	4283      	cmp	r3, r0
 8001d48:	6011      	str	r1, [r2, #0]
 8001d4a:	d1e0      	bne.n	8001d0e <_free_r+0x22>
 8001d4c:	6818      	ldr	r0, [r3, #0]
 8001d4e:	685b      	ldr	r3, [r3, #4]
 8001d50:	6053      	str	r3, [r2, #4]
 8001d52:	4408      	add	r0, r1
 8001d54:	6010      	str	r0, [r2, #0]
 8001d56:	e7da      	b.n	8001d0e <_free_r+0x22>
 8001d58:	d902      	bls.n	8001d60 <_free_r+0x74>
 8001d5a:	230c      	movs	r3, #12
 8001d5c:	602b      	str	r3, [r5, #0]
 8001d5e:	e7d6      	b.n	8001d0e <_free_r+0x22>
 8001d60:	6820      	ldr	r0, [r4, #0]
 8001d62:	1821      	adds	r1, r4, r0
 8001d64:	428b      	cmp	r3, r1
 8001d66:	bf04      	itt	eq
 8001d68:	6819      	ldreq	r1, [r3, #0]
 8001d6a:	685b      	ldreq	r3, [r3, #4]
 8001d6c:	6063      	str	r3, [r4, #4]
 8001d6e:	bf04      	itt	eq
 8001d70:	1809      	addeq	r1, r1, r0
 8001d72:	6021      	streq	r1, [r4, #0]
 8001d74:	6054      	str	r4, [r2, #4]
 8001d76:	e7ca      	b.n	8001d0e <_free_r+0x22>
 8001d78:	bd38      	pop	{r3, r4, r5, pc}
 8001d7a:	bf00      	nop
 8001d7c:	200001dc 	.word	0x200001dc

08001d80 <sbrk_aligned>:
 8001d80:	b570      	push	{r4, r5, r6, lr}
 8001d82:	4e0e      	ldr	r6, [pc, #56]	; (8001dbc <sbrk_aligned+0x3c>)
 8001d84:	460c      	mov	r4, r1
 8001d86:	6831      	ldr	r1, [r6, #0]
 8001d88:	4605      	mov	r5, r0
 8001d8a:	b911      	cbnz	r1, 8001d92 <sbrk_aligned+0x12>
 8001d8c:	f000 fcb6 	bl	80026fc <_sbrk_r>
 8001d90:	6030      	str	r0, [r6, #0]
 8001d92:	4621      	mov	r1, r4
 8001d94:	4628      	mov	r0, r5
 8001d96:	f000 fcb1 	bl	80026fc <_sbrk_r>
 8001d9a:	1c43      	adds	r3, r0, #1
 8001d9c:	d00a      	beq.n	8001db4 <sbrk_aligned+0x34>
 8001d9e:	1cc4      	adds	r4, r0, #3
 8001da0:	f024 0403 	bic.w	r4, r4, #3
 8001da4:	42a0      	cmp	r0, r4
 8001da6:	d007      	beq.n	8001db8 <sbrk_aligned+0x38>
 8001da8:	1a21      	subs	r1, r4, r0
 8001daa:	4628      	mov	r0, r5
 8001dac:	f000 fca6 	bl	80026fc <_sbrk_r>
 8001db0:	3001      	adds	r0, #1
 8001db2:	d101      	bne.n	8001db8 <sbrk_aligned+0x38>
 8001db4:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8001db8:	4620      	mov	r0, r4
 8001dba:	bd70      	pop	{r4, r5, r6, pc}
 8001dbc:	200001e0 	.word	0x200001e0

08001dc0 <_malloc_r>:
 8001dc0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8001dc4:	1ccd      	adds	r5, r1, #3
 8001dc6:	f025 0503 	bic.w	r5, r5, #3
 8001dca:	3508      	adds	r5, #8
 8001dcc:	2d0c      	cmp	r5, #12
 8001dce:	bf38      	it	cc
 8001dd0:	250c      	movcc	r5, #12
 8001dd2:	2d00      	cmp	r5, #0
 8001dd4:	4607      	mov	r7, r0
 8001dd6:	db01      	blt.n	8001ddc <_malloc_r+0x1c>
 8001dd8:	42a9      	cmp	r1, r5
 8001dda:	d905      	bls.n	8001de8 <_malloc_r+0x28>
 8001ddc:	230c      	movs	r3, #12
 8001dde:	603b      	str	r3, [r7, #0]
 8001de0:	2600      	movs	r6, #0
 8001de2:	4630      	mov	r0, r6
 8001de4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8001de8:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8001ebc <_malloc_r+0xfc>
 8001dec:	f000 f868 	bl	8001ec0 <__malloc_lock>
 8001df0:	f8d8 3000 	ldr.w	r3, [r8]
 8001df4:	461c      	mov	r4, r3
 8001df6:	bb5c      	cbnz	r4, 8001e50 <_malloc_r+0x90>
 8001df8:	4629      	mov	r1, r5
 8001dfa:	4638      	mov	r0, r7
 8001dfc:	f7ff ffc0 	bl	8001d80 <sbrk_aligned>
 8001e00:	1c43      	adds	r3, r0, #1
 8001e02:	4604      	mov	r4, r0
 8001e04:	d155      	bne.n	8001eb2 <_malloc_r+0xf2>
 8001e06:	f8d8 4000 	ldr.w	r4, [r8]
 8001e0a:	4626      	mov	r6, r4
 8001e0c:	2e00      	cmp	r6, #0
 8001e0e:	d145      	bne.n	8001e9c <_malloc_r+0xdc>
 8001e10:	2c00      	cmp	r4, #0
 8001e12:	d048      	beq.n	8001ea6 <_malloc_r+0xe6>
 8001e14:	6823      	ldr	r3, [r4, #0]
 8001e16:	4631      	mov	r1, r6
 8001e18:	4638      	mov	r0, r7
 8001e1a:	eb04 0903 	add.w	r9, r4, r3
 8001e1e:	f000 fc6d 	bl	80026fc <_sbrk_r>
 8001e22:	4581      	cmp	r9, r0
 8001e24:	d13f      	bne.n	8001ea6 <_malloc_r+0xe6>
 8001e26:	6821      	ldr	r1, [r4, #0]
 8001e28:	1a6d      	subs	r5, r5, r1
 8001e2a:	4629      	mov	r1, r5
 8001e2c:	4638      	mov	r0, r7
 8001e2e:	f7ff ffa7 	bl	8001d80 <sbrk_aligned>
 8001e32:	3001      	adds	r0, #1
 8001e34:	d037      	beq.n	8001ea6 <_malloc_r+0xe6>
 8001e36:	6823      	ldr	r3, [r4, #0]
 8001e38:	442b      	add	r3, r5
 8001e3a:	6023      	str	r3, [r4, #0]
 8001e3c:	f8d8 3000 	ldr.w	r3, [r8]
 8001e40:	2b00      	cmp	r3, #0
 8001e42:	d038      	beq.n	8001eb6 <_malloc_r+0xf6>
 8001e44:	685a      	ldr	r2, [r3, #4]
 8001e46:	42a2      	cmp	r2, r4
 8001e48:	d12b      	bne.n	8001ea2 <_malloc_r+0xe2>
 8001e4a:	2200      	movs	r2, #0
 8001e4c:	605a      	str	r2, [r3, #4]
 8001e4e:	e00f      	b.n	8001e70 <_malloc_r+0xb0>
 8001e50:	6822      	ldr	r2, [r4, #0]
 8001e52:	1b52      	subs	r2, r2, r5
 8001e54:	d41f      	bmi.n	8001e96 <_malloc_r+0xd6>
 8001e56:	2a0b      	cmp	r2, #11
 8001e58:	d917      	bls.n	8001e8a <_malloc_r+0xca>
 8001e5a:	1961      	adds	r1, r4, r5
 8001e5c:	42a3      	cmp	r3, r4
 8001e5e:	6025      	str	r5, [r4, #0]
 8001e60:	bf18      	it	ne
 8001e62:	6059      	strne	r1, [r3, #4]
 8001e64:	6863      	ldr	r3, [r4, #4]
 8001e66:	bf08      	it	eq
 8001e68:	f8c8 1000 	streq.w	r1, [r8]
 8001e6c:	5162      	str	r2, [r4, r5]
 8001e6e:	604b      	str	r3, [r1, #4]
 8001e70:	4638      	mov	r0, r7
 8001e72:	f104 060b 	add.w	r6, r4, #11
 8001e76:	f000 f829 	bl	8001ecc <__malloc_unlock>
 8001e7a:	f026 0607 	bic.w	r6, r6, #7
 8001e7e:	1d23      	adds	r3, r4, #4
 8001e80:	1af2      	subs	r2, r6, r3
 8001e82:	d0ae      	beq.n	8001de2 <_malloc_r+0x22>
 8001e84:	1b9b      	subs	r3, r3, r6
 8001e86:	50a3      	str	r3, [r4, r2]
 8001e88:	e7ab      	b.n	8001de2 <_malloc_r+0x22>
 8001e8a:	42a3      	cmp	r3, r4
 8001e8c:	6862      	ldr	r2, [r4, #4]
 8001e8e:	d1dd      	bne.n	8001e4c <_malloc_r+0x8c>
 8001e90:	f8c8 2000 	str.w	r2, [r8]
 8001e94:	e7ec      	b.n	8001e70 <_malloc_r+0xb0>
 8001e96:	4623      	mov	r3, r4
 8001e98:	6864      	ldr	r4, [r4, #4]
 8001e9a:	e7ac      	b.n	8001df6 <_malloc_r+0x36>
 8001e9c:	4634      	mov	r4, r6
 8001e9e:	6876      	ldr	r6, [r6, #4]
 8001ea0:	e7b4      	b.n	8001e0c <_malloc_r+0x4c>
 8001ea2:	4613      	mov	r3, r2
 8001ea4:	e7cc      	b.n	8001e40 <_malloc_r+0x80>
 8001ea6:	230c      	movs	r3, #12
 8001ea8:	603b      	str	r3, [r7, #0]
 8001eaa:	4638      	mov	r0, r7
 8001eac:	f000 f80e 	bl	8001ecc <__malloc_unlock>
 8001eb0:	e797      	b.n	8001de2 <_malloc_r+0x22>
 8001eb2:	6025      	str	r5, [r4, #0]
 8001eb4:	e7dc      	b.n	8001e70 <_malloc_r+0xb0>
 8001eb6:	605b      	str	r3, [r3, #4]
 8001eb8:	deff      	udf	#255	; 0xff
 8001eba:	bf00      	nop
 8001ebc:	200001dc 	.word	0x200001dc

08001ec0 <__malloc_lock>:
 8001ec0:	4801      	ldr	r0, [pc, #4]	; (8001ec8 <__malloc_lock+0x8>)
 8001ec2:	f7ff bf10 	b.w	8001ce6 <__retarget_lock_acquire_recursive>
 8001ec6:	bf00      	nop
 8001ec8:	200001d8 	.word	0x200001d8

08001ecc <__malloc_unlock>:
 8001ecc:	4801      	ldr	r0, [pc, #4]	; (8001ed4 <__malloc_unlock+0x8>)
 8001ece:	f7ff bf0b 	b.w	8001ce8 <__retarget_lock_release_recursive>
 8001ed2:	bf00      	nop
 8001ed4:	200001d8 	.word	0x200001d8

08001ed8 <__sfputc_r>:
 8001ed8:	6893      	ldr	r3, [r2, #8]
 8001eda:	3b01      	subs	r3, #1
 8001edc:	2b00      	cmp	r3, #0
 8001ede:	b410      	push	{r4}
 8001ee0:	6093      	str	r3, [r2, #8]
 8001ee2:	da07      	bge.n	8001ef4 <__sfputc_r+0x1c>
 8001ee4:	6994      	ldr	r4, [r2, #24]
 8001ee6:	42a3      	cmp	r3, r4
 8001ee8:	db01      	blt.n	8001eee <__sfputc_r+0x16>
 8001eea:	290a      	cmp	r1, #10
 8001eec:	d102      	bne.n	8001ef4 <__sfputc_r+0x1c>
 8001eee:	bc10      	pop	{r4}
 8001ef0:	f000 bb6e 	b.w	80025d0 <__swbuf_r>
 8001ef4:	6813      	ldr	r3, [r2, #0]
 8001ef6:	1c58      	adds	r0, r3, #1
 8001ef8:	6010      	str	r0, [r2, #0]
 8001efa:	7019      	strb	r1, [r3, #0]
 8001efc:	4608      	mov	r0, r1
 8001efe:	bc10      	pop	{r4}
 8001f00:	4770      	bx	lr

08001f02 <__sfputs_r>:
 8001f02:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001f04:	4606      	mov	r6, r0
 8001f06:	460f      	mov	r7, r1
 8001f08:	4614      	mov	r4, r2
 8001f0a:	18d5      	adds	r5, r2, r3
 8001f0c:	42ac      	cmp	r4, r5
 8001f0e:	d101      	bne.n	8001f14 <__sfputs_r+0x12>
 8001f10:	2000      	movs	r0, #0
 8001f12:	e007      	b.n	8001f24 <__sfputs_r+0x22>
 8001f14:	f814 1b01 	ldrb.w	r1, [r4], #1
 8001f18:	463a      	mov	r2, r7
 8001f1a:	4630      	mov	r0, r6
 8001f1c:	f7ff ffdc 	bl	8001ed8 <__sfputc_r>
 8001f20:	1c43      	adds	r3, r0, #1
 8001f22:	d1f3      	bne.n	8001f0c <__sfputs_r+0xa>
 8001f24:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08001f28 <_vfiprintf_r>:
 8001f28:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001f2c:	460d      	mov	r5, r1
 8001f2e:	b09d      	sub	sp, #116	; 0x74
 8001f30:	4614      	mov	r4, r2
 8001f32:	4698      	mov	r8, r3
 8001f34:	4606      	mov	r6, r0
 8001f36:	b118      	cbz	r0, 8001f40 <_vfiprintf_r+0x18>
 8001f38:	6a03      	ldr	r3, [r0, #32]
 8001f3a:	b90b      	cbnz	r3, 8001f40 <_vfiprintf_r+0x18>
 8001f3c:	f7ff fdce 	bl	8001adc <__sinit>
 8001f40:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8001f42:	07d9      	lsls	r1, r3, #31
 8001f44:	d405      	bmi.n	8001f52 <_vfiprintf_r+0x2a>
 8001f46:	89ab      	ldrh	r3, [r5, #12]
 8001f48:	059a      	lsls	r2, r3, #22
 8001f4a:	d402      	bmi.n	8001f52 <_vfiprintf_r+0x2a>
 8001f4c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8001f4e:	f7ff feca 	bl	8001ce6 <__retarget_lock_acquire_recursive>
 8001f52:	89ab      	ldrh	r3, [r5, #12]
 8001f54:	071b      	lsls	r3, r3, #28
 8001f56:	d501      	bpl.n	8001f5c <_vfiprintf_r+0x34>
 8001f58:	692b      	ldr	r3, [r5, #16]
 8001f5a:	b99b      	cbnz	r3, 8001f84 <_vfiprintf_r+0x5c>
 8001f5c:	4629      	mov	r1, r5
 8001f5e:	4630      	mov	r0, r6
 8001f60:	f000 fb74 	bl	800264c <__swsetup_r>
 8001f64:	b170      	cbz	r0, 8001f84 <_vfiprintf_r+0x5c>
 8001f66:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8001f68:	07dc      	lsls	r4, r3, #31
 8001f6a:	d504      	bpl.n	8001f76 <_vfiprintf_r+0x4e>
 8001f6c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001f70:	b01d      	add	sp, #116	; 0x74
 8001f72:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001f76:	89ab      	ldrh	r3, [r5, #12]
 8001f78:	0598      	lsls	r0, r3, #22
 8001f7a:	d4f7      	bmi.n	8001f6c <_vfiprintf_r+0x44>
 8001f7c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8001f7e:	f7ff feb3 	bl	8001ce8 <__retarget_lock_release_recursive>
 8001f82:	e7f3      	b.n	8001f6c <_vfiprintf_r+0x44>
 8001f84:	2300      	movs	r3, #0
 8001f86:	9309      	str	r3, [sp, #36]	; 0x24
 8001f88:	2320      	movs	r3, #32
 8001f8a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8001f8e:	f8cd 800c 	str.w	r8, [sp, #12]
 8001f92:	2330      	movs	r3, #48	; 0x30
 8001f94:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 8002148 <_vfiprintf_r+0x220>
 8001f98:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8001f9c:	f04f 0901 	mov.w	r9, #1
 8001fa0:	4623      	mov	r3, r4
 8001fa2:	469a      	mov	sl, r3
 8001fa4:	f813 2b01 	ldrb.w	r2, [r3], #1
 8001fa8:	b10a      	cbz	r2, 8001fae <_vfiprintf_r+0x86>
 8001faa:	2a25      	cmp	r2, #37	; 0x25
 8001fac:	d1f9      	bne.n	8001fa2 <_vfiprintf_r+0x7a>
 8001fae:	ebba 0b04 	subs.w	fp, sl, r4
 8001fb2:	d00b      	beq.n	8001fcc <_vfiprintf_r+0xa4>
 8001fb4:	465b      	mov	r3, fp
 8001fb6:	4622      	mov	r2, r4
 8001fb8:	4629      	mov	r1, r5
 8001fba:	4630      	mov	r0, r6
 8001fbc:	f7ff ffa1 	bl	8001f02 <__sfputs_r>
 8001fc0:	3001      	adds	r0, #1
 8001fc2:	f000 80a9 	beq.w	8002118 <_vfiprintf_r+0x1f0>
 8001fc6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8001fc8:	445a      	add	r2, fp
 8001fca:	9209      	str	r2, [sp, #36]	; 0x24
 8001fcc:	f89a 3000 	ldrb.w	r3, [sl]
 8001fd0:	2b00      	cmp	r3, #0
 8001fd2:	f000 80a1 	beq.w	8002118 <_vfiprintf_r+0x1f0>
 8001fd6:	2300      	movs	r3, #0
 8001fd8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001fdc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8001fe0:	f10a 0a01 	add.w	sl, sl, #1
 8001fe4:	9304      	str	r3, [sp, #16]
 8001fe6:	9307      	str	r3, [sp, #28]
 8001fe8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8001fec:	931a      	str	r3, [sp, #104]	; 0x68
 8001fee:	4654      	mov	r4, sl
 8001ff0:	2205      	movs	r2, #5
 8001ff2:	f814 1b01 	ldrb.w	r1, [r4], #1
 8001ff6:	4854      	ldr	r0, [pc, #336]	; (8002148 <_vfiprintf_r+0x220>)
 8001ff8:	f7fe f8fa 	bl	80001f0 <memchr>
 8001ffc:	9a04      	ldr	r2, [sp, #16]
 8001ffe:	b9d8      	cbnz	r0, 8002038 <_vfiprintf_r+0x110>
 8002000:	06d1      	lsls	r1, r2, #27
 8002002:	bf44      	itt	mi
 8002004:	2320      	movmi	r3, #32
 8002006:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800200a:	0713      	lsls	r3, r2, #28
 800200c:	bf44      	itt	mi
 800200e:	232b      	movmi	r3, #43	; 0x2b
 8002010:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8002014:	f89a 3000 	ldrb.w	r3, [sl]
 8002018:	2b2a      	cmp	r3, #42	; 0x2a
 800201a:	d015      	beq.n	8002048 <_vfiprintf_r+0x120>
 800201c:	9a07      	ldr	r2, [sp, #28]
 800201e:	4654      	mov	r4, sl
 8002020:	2000      	movs	r0, #0
 8002022:	f04f 0c0a 	mov.w	ip, #10
 8002026:	4621      	mov	r1, r4
 8002028:	f811 3b01 	ldrb.w	r3, [r1], #1
 800202c:	3b30      	subs	r3, #48	; 0x30
 800202e:	2b09      	cmp	r3, #9
 8002030:	d94d      	bls.n	80020ce <_vfiprintf_r+0x1a6>
 8002032:	b1b0      	cbz	r0, 8002062 <_vfiprintf_r+0x13a>
 8002034:	9207      	str	r2, [sp, #28]
 8002036:	e014      	b.n	8002062 <_vfiprintf_r+0x13a>
 8002038:	eba0 0308 	sub.w	r3, r0, r8
 800203c:	fa09 f303 	lsl.w	r3, r9, r3
 8002040:	4313      	orrs	r3, r2
 8002042:	9304      	str	r3, [sp, #16]
 8002044:	46a2      	mov	sl, r4
 8002046:	e7d2      	b.n	8001fee <_vfiprintf_r+0xc6>
 8002048:	9b03      	ldr	r3, [sp, #12]
 800204a:	1d19      	adds	r1, r3, #4
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	9103      	str	r1, [sp, #12]
 8002050:	2b00      	cmp	r3, #0
 8002052:	bfbb      	ittet	lt
 8002054:	425b      	neglt	r3, r3
 8002056:	f042 0202 	orrlt.w	r2, r2, #2
 800205a:	9307      	strge	r3, [sp, #28]
 800205c:	9307      	strlt	r3, [sp, #28]
 800205e:	bfb8      	it	lt
 8002060:	9204      	strlt	r2, [sp, #16]
 8002062:	7823      	ldrb	r3, [r4, #0]
 8002064:	2b2e      	cmp	r3, #46	; 0x2e
 8002066:	d10c      	bne.n	8002082 <_vfiprintf_r+0x15a>
 8002068:	7863      	ldrb	r3, [r4, #1]
 800206a:	2b2a      	cmp	r3, #42	; 0x2a
 800206c:	d134      	bne.n	80020d8 <_vfiprintf_r+0x1b0>
 800206e:	9b03      	ldr	r3, [sp, #12]
 8002070:	1d1a      	adds	r2, r3, #4
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	9203      	str	r2, [sp, #12]
 8002076:	2b00      	cmp	r3, #0
 8002078:	bfb8      	it	lt
 800207a:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800207e:	3402      	adds	r4, #2
 8002080:	9305      	str	r3, [sp, #20]
 8002082:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800214c <_vfiprintf_r+0x224>
 8002086:	7821      	ldrb	r1, [r4, #0]
 8002088:	2203      	movs	r2, #3
 800208a:	4650      	mov	r0, sl
 800208c:	f7fe f8b0 	bl	80001f0 <memchr>
 8002090:	b138      	cbz	r0, 80020a2 <_vfiprintf_r+0x17a>
 8002092:	9b04      	ldr	r3, [sp, #16]
 8002094:	eba0 000a 	sub.w	r0, r0, sl
 8002098:	2240      	movs	r2, #64	; 0x40
 800209a:	4082      	lsls	r2, r0
 800209c:	4313      	orrs	r3, r2
 800209e:	3401      	adds	r4, #1
 80020a0:	9304      	str	r3, [sp, #16]
 80020a2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80020a6:	482a      	ldr	r0, [pc, #168]	; (8002150 <_vfiprintf_r+0x228>)
 80020a8:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80020ac:	2206      	movs	r2, #6
 80020ae:	f7fe f89f 	bl	80001f0 <memchr>
 80020b2:	2800      	cmp	r0, #0
 80020b4:	d03f      	beq.n	8002136 <_vfiprintf_r+0x20e>
 80020b6:	4b27      	ldr	r3, [pc, #156]	; (8002154 <_vfiprintf_r+0x22c>)
 80020b8:	bb1b      	cbnz	r3, 8002102 <_vfiprintf_r+0x1da>
 80020ba:	9b03      	ldr	r3, [sp, #12]
 80020bc:	3307      	adds	r3, #7
 80020be:	f023 0307 	bic.w	r3, r3, #7
 80020c2:	3308      	adds	r3, #8
 80020c4:	9303      	str	r3, [sp, #12]
 80020c6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80020c8:	443b      	add	r3, r7
 80020ca:	9309      	str	r3, [sp, #36]	; 0x24
 80020cc:	e768      	b.n	8001fa0 <_vfiprintf_r+0x78>
 80020ce:	fb0c 3202 	mla	r2, ip, r2, r3
 80020d2:	460c      	mov	r4, r1
 80020d4:	2001      	movs	r0, #1
 80020d6:	e7a6      	b.n	8002026 <_vfiprintf_r+0xfe>
 80020d8:	2300      	movs	r3, #0
 80020da:	3401      	adds	r4, #1
 80020dc:	9305      	str	r3, [sp, #20]
 80020de:	4619      	mov	r1, r3
 80020e0:	f04f 0c0a 	mov.w	ip, #10
 80020e4:	4620      	mov	r0, r4
 80020e6:	f810 2b01 	ldrb.w	r2, [r0], #1
 80020ea:	3a30      	subs	r2, #48	; 0x30
 80020ec:	2a09      	cmp	r2, #9
 80020ee:	d903      	bls.n	80020f8 <_vfiprintf_r+0x1d0>
 80020f0:	2b00      	cmp	r3, #0
 80020f2:	d0c6      	beq.n	8002082 <_vfiprintf_r+0x15a>
 80020f4:	9105      	str	r1, [sp, #20]
 80020f6:	e7c4      	b.n	8002082 <_vfiprintf_r+0x15a>
 80020f8:	fb0c 2101 	mla	r1, ip, r1, r2
 80020fc:	4604      	mov	r4, r0
 80020fe:	2301      	movs	r3, #1
 8002100:	e7f0      	b.n	80020e4 <_vfiprintf_r+0x1bc>
 8002102:	ab03      	add	r3, sp, #12
 8002104:	9300      	str	r3, [sp, #0]
 8002106:	462a      	mov	r2, r5
 8002108:	4b13      	ldr	r3, [pc, #76]	; (8002158 <_vfiprintf_r+0x230>)
 800210a:	a904      	add	r1, sp, #16
 800210c:	4630      	mov	r0, r6
 800210e:	f3af 8000 	nop.w
 8002112:	4607      	mov	r7, r0
 8002114:	1c78      	adds	r0, r7, #1
 8002116:	d1d6      	bne.n	80020c6 <_vfiprintf_r+0x19e>
 8002118:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800211a:	07d9      	lsls	r1, r3, #31
 800211c:	d405      	bmi.n	800212a <_vfiprintf_r+0x202>
 800211e:	89ab      	ldrh	r3, [r5, #12]
 8002120:	059a      	lsls	r2, r3, #22
 8002122:	d402      	bmi.n	800212a <_vfiprintf_r+0x202>
 8002124:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8002126:	f7ff fddf 	bl	8001ce8 <__retarget_lock_release_recursive>
 800212a:	89ab      	ldrh	r3, [r5, #12]
 800212c:	065b      	lsls	r3, r3, #25
 800212e:	f53f af1d 	bmi.w	8001f6c <_vfiprintf_r+0x44>
 8002132:	9809      	ldr	r0, [sp, #36]	; 0x24
 8002134:	e71c      	b.n	8001f70 <_vfiprintf_r+0x48>
 8002136:	ab03      	add	r3, sp, #12
 8002138:	9300      	str	r3, [sp, #0]
 800213a:	462a      	mov	r2, r5
 800213c:	4b06      	ldr	r3, [pc, #24]	; (8002158 <_vfiprintf_r+0x230>)
 800213e:	a904      	add	r1, sp, #16
 8002140:	4630      	mov	r0, r6
 8002142:	f000 f879 	bl	8002238 <_printf_i>
 8002146:	e7e4      	b.n	8002112 <_vfiprintf_r+0x1ea>
 8002148:	08002860 	.word	0x08002860
 800214c:	08002866 	.word	0x08002866
 8002150:	0800286a 	.word	0x0800286a
 8002154:	00000000 	.word	0x00000000
 8002158:	08001f03 	.word	0x08001f03

0800215c <_printf_common>:
 800215c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002160:	4616      	mov	r6, r2
 8002162:	4699      	mov	r9, r3
 8002164:	688a      	ldr	r2, [r1, #8]
 8002166:	690b      	ldr	r3, [r1, #16]
 8002168:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800216c:	4293      	cmp	r3, r2
 800216e:	bfb8      	it	lt
 8002170:	4613      	movlt	r3, r2
 8002172:	6033      	str	r3, [r6, #0]
 8002174:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8002178:	4607      	mov	r7, r0
 800217a:	460c      	mov	r4, r1
 800217c:	b10a      	cbz	r2, 8002182 <_printf_common+0x26>
 800217e:	3301      	adds	r3, #1
 8002180:	6033      	str	r3, [r6, #0]
 8002182:	6823      	ldr	r3, [r4, #0]
 8002184:	0699      	lsls	r1, r3, #26
 8002186:	bf42      	ittt	mi
 8002188:	6833      	ldrmi	r3, [r6, #0]
 800218a:	3302      	addmi	r3, #2
 800218c:	6033      	strmi	r3, [r6, #0]
 800218e:	6825      	ldr	r5, [r4, #0]
 8002190:	f015 0506 	ands.w	r5, r5, #6
 8002194:	d106      	bne.n	80021a4 <_printf_common+0x48>
 8002196:	f104 0a19 	add.w	sl, r4, #25
 800219a:	68e3      	ldr	r3, [r4, #12]
 800219c:	6832      	ldr	r2, [r6, #0]
 800219e:	1a9b      	subs	r3, r3, r2
 80021a0:	42ab      	cmp	r3, r5
 80021a2:	dc26      	bgt.n	80021f2 <_printf_common+0x96>
 80021a4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80021a8:	1e13      	subs	r3, r2, #0
 80021aa:	6822      	ldr	r2, [r4, #0]
 80021ac:	bf18      	it	ne
 80021ae:	2301      	movne	r3, #1
 80021b0:	0692      	lsls	r2, r2, #26
 80021b2:	d42b      	bmi.n	800220c <_printf_common+0xb0>
 80021b4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80021b8:	4649      	mov	r1, r9
 80021ba:	4638      	mov	r0, r7
 80021bc:	47c0      	blx	r8
 80021be:	3001      	adds	r0, #1
 80021c0:	d01e      	beq.n	8002200 <_printf_common+0xa4>
 80021c2:	6823      	ldr	r3, [r4, #0]
 80021c4:	6922      	ldr	r2, [r4, #16]
 80021c6:	f003 0306 	and.w	r3, r3, #6
 80021ca:	2b04      	cmp	r3, #4
 80021cc:	bf02      	ittt	eq
 80021ce:	68e5      	ldreq	r5, [r4, #12]
 80021d0:	6833      	ldreq	r3, [r6, #0]
 80021d2:	1aed      	subeq	r5, r5, r3
 80021d4:	68a3      	ldr	r3, [r4, #8]
 80021d6:	bf0c      	ite	eq
 80021d8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80021dc:	2500      	movne	r5, #0
 80021de:	4293      	cmp	r3, r2
 80021e0:	bfc4      	itt	gt
 80021e2:	1a9b      	subgt	r3, r3, r2
 80021e4:	18ed      	addgt	r5, r5, r3
 80021e6:	2600      	movs	r6, #0
 80021e8:	341a      	adds	r4, #26
 80021ea:	42b5      	cmp	r5, r6
 80021ec:	d11a      	bne.n	8002224 <_printf_common+0xc8>
 80021ee:	2000      	movs	r0, #0
 80021f0:	e008      	b.n	8002204 <_printf_common+0xa8>
 80021f2:	2301      	movs	r3, #1
 80021f4:	4652      	mov	r2, sl
 80021f6:	4649      	mov	r1, r9
 80021f8:	4638      	mov	r0, r7
 80021fa:	47c0      	blx	r8
 80021fc:	3001      	adds	r0, #1
 80021fe:	d103      	bne.n	8002208 <_printf_common+0xac>
 8002200:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002204:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002208:	3501      	adds	r5, #1
 800220a:	e7c6      	b.n	800219a <_printf_common+0x3e>
 800220c:	18e1      	adds	r1, r4, r3
 800220e:	1c5a      	adds	r2, r3, #1
 8002210:	2030      	movs	r0, #48	; 0x30
 8002212:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8002216:	4422      	add	r2, r4
 8002218:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800221c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8002220:	3302      	adds	r3, #2
 8002222:	e7c7      	b.n	80021b4 <_printf_common+0x58>
 8002224:	2301      	movs	r3, #1
 8002226:	4622      	mov	r2, r4
 8002228:	4649      	mov	r1, r9
 800222a:	4638      	mov	r0, r7
 800222c:	47c0      	blx	r8
 800222e:	3001      	adds	r0, #1
 8002230:	d0e6      	beq.n	8002200 <_printf_common+0xa4>
 8002232:	3601      	adds	r6, #1
 8002234:	e7d9      	b.n	80021ea <_printf_common+0x8e>
	...

08002238 <_printf_i>:
 8002238:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800223c:	7e0f      	ldrb	r7, [r1, #24]
 800223e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8002240:	2f78      	cmp	r7, #120	; 0x78
 8002242:	4691      	mov	r9, r2
 8002244:	4680      	mov	r8, r0
 8002246:	460c      	mov	r4, r1
 8002248:	469a      	mov	sl, r3
 800224a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800224e:	d807      	bhi.n	8002260 <_printf_i+0x28>
 8002250:	2f62      	cmp	r7, #98	; 0x62
 8002252:	d80a      	bhi.n	800226a <_printf_i+0x32>
 8002254:	2f00      	cmp	r7, #0
 8002256:	f000 80d4 	beq.w	8002402 <_printf_i+0x1ca>
 800225a:	2f58      	cmp	r7, #88	; 0x58
 800225c:	f000 80c0 	beq.w	80023e0 <_printf_i+0x1a8>
 8002260:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8002264:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8002268:	e03a      	b.n	80022e0 <_printf_i+0xa8>
 800226a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800226e:	2b15      	cmp	r3, #21
 8002270:	d8f6      	bhi.n	8002260 <_printf_i+0x28>
 8002272:	a101      	add	r1, pc, #4	; (adr r1, 8002278 <_printf_i+0x40>)
 8002274:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8002278:	080022d1 	.word	0x080022d1
 800227c:	080022e5 	.word	0x080022e5
 8002280:	08002261 	.word	0x08002261
 8002284:	08002261 	.word	0x08002261
 8002288:	08002261 	.word	0x08002261
 800228c:	08002261 	.word	0x08002261
 8002290:	080022e5 	.word	0x080022e5
 8002294:	08002261 	.word	0x08002261
 8002298:	08002261 	.word	0x08002261
 800229c:	08002261 	.word	0x08002261
 80022a0:	08002261 	.word	0x08002261
 80022a4:	080023e9 	.word	0x080023e9
 80022a8:	08002311 	.word	0x08002311
 80022ac:	080023a3 	.word	0x080023a3
 80022b0:	08002261 	.word	0x08002261
 80022b4:	08002261 	.word	0x08002261
 80022b8:	0800240b 	.word	0x0800240b
 80022bc:	08002261 	.word	0x08002261
 80022c0:	08002311 	.word	0x08002311
 80022c4:	08002261 	.word	0x08002261
 80022c8:	08002261 	.word	0x08002261
 80022cc:	080023ab 	.word	0x080023ab
 80022d0:	682b      	ldr	r3, [r5, #0]
 80022d2:	1d1a      	adds	r2, r3, #4
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	602a      	str	r2, [r5, #0]
 80022d8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80022dc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80022e0:	2301      	movs	r3, #1
 80022e2:	e09f      	b.n	8002424 <_printf_i+0x1ec>
 80022e4:	6820      	ldr	r0, [r4, #0]
 80022e6:	682b      	ldr	r3, [r5, #0]
 80022e8:	0607      	lsls	r7, r0, #24
 80022ea:	f103 0104 	add.w	r1, r3, #4
 80022ee:	6029      	str	r1, [r5, #0]
 80022f0:	d501      	bpl.n	80022f6 <_printf_i+0xbe>
 80022f2:	681e      	ldr	r6, [r3, #0]
 80022f4:	e003      	b.n	80022fe <_printf_i+0xc6>
 80022f6:	0646      	lsls	r6, r0, #25
 80022f8:	d5fb      	bpl.n	80022f2 <_printf_i+0xba>
 80022fa:	f9b3 6000 	ldrsh.w	r6, [r3]
 80022fe:	2e00      	cmp	r6, #0
 8002300:	da03      	bge.n	800230a <_printf_i+0xd2>
 8002302:	232d      	movs	r3, #45	; 0x2d
 8002304:	4276      	negs	r6, r6
 8002306:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800230a:	485a      	ldr	r0, [pc, #360]	; (8002474 <_printf_i+0x23c>)
 800230c:	230a      	movs	r3, #10
 800230e:	e012      	b.n	8002336 <_printf_i+0xfe>
 8002310:	682b      	ldr	r3, [r5, #0]
 8002312:	6820      	ldr	r0, [r4, #0]
 8002314:	1d19      	adds	r1, r3, #4
 8002316:	6029      	str	r1, [r5, #0]
 8002318:	0605      	lsls	r5, r0, #24
 800231a:	d501      	bpl.n	8002320 <_printf_i+0xe8>
 800231c:	681e      	ldr	r6, [r3, #0]
 800231e:	e002      	b.n	8002326 <_printf_i+0xee>
 8002320:	0641      	lsls	r1, r0, #25
 8002322:	d5fb      	bpl.n	800231c <_printf_i+0xe4>
 8002324:	881e      	ldrh	r6, [r3, #0]
 8002326:	4853      	ldr	r0, [pc, #332]	; (8002474 <_printf_i+0x23c>)
 8002328:	2f6f      	cmp	r7, #111	; 0x6f
 800232a:	bf0c      	ite	eq
 800232c:	2308      	moveq	r3, #8
 800232e:	230a      	movne	r3, #10
 8002330:	2100      	movs	r1, #0
 8002332:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8002336:	6865      	ldr	r5, [r4, #4]
 8002338:	60a5      	str	r5, [r4, #8]
 800233a:	2d00      	cmp	r5, #0
 800233c:	bfa2      	ittt	ge
 800233e:	6821      	ldrge	r1, [r4, #0]
 8002340:	f021 0104 	bicge.w	r1, r1, #4
 8002344:	6021      	strge	r1, [r4, #0]
 8002346:	b90e      	cbnz	r6, 800234c <_printf_i+0x114>
 8002348:	2d00      	cmp	r5, #0
 800234a:	d04b      	beq.n	80023e4 <_printf_i+0x1ac>
 800234c:	4615      	mov	r5, r2
 800234e:	fbb6 f1f3 	udiv	r1, r6, r3
 8002352:	fb03 6711 	mls	r7, r3, r1, r6
 8002356:	5dc7      	ldrb	r7, [r0, r7]
 8002358:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800235c:	4637      	mov	r7, r6
 800235e:	42bb      	cmp	r3, r7
 8002360:	460e      	mov	r6, r1
 8002362:	d9f4      	bls.n	800234e <_printf_i+0x116>
 8002364:	2b08      	cmp	r3, #8
 8002366:	d10b      	bne.n	8002380 <_printf_i+0x148>
 8002368:	6823      	ldr	r3, [r4, #0]
 800236a:	07de      	lsls	r6, r3, #31
 800236c:	d508      	bpl.n	8002380 <_printf_i+0x148>
 800236e:	6923      	ldr	r3, [r4, #16]
 8002370:	6861      	ldr	r1, [r4, #4]
 8002372:	4299      	cmp	r1, r3
 8002374:	bfde      	ittt	le
 8002376:	2330      	movle	r3, #48	; 0x30
 8002378:	f805 3c01 	strble.w	r3, [r5, #-1]
 800237c:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8002380:	1b52      	subs	r2, r2, r5
 8002382:	6122      	str	r2, [r4, #16]
 8002384:	f8cd a000 	str.w	sl, [sp]
 8002388:	464b      	mov	r3, r9
 800238a:	aa03      	add	r2, sp, #12
 800238c:	4621      	mov	r1, r4
 800238e:	4640      	mov	r0, r8
 8002390:	f7ff fee4 	bl	800215c <_printf_common>
 8002394:	3001      	adds	r0, #1
 8002396:	d14a      	bne.n	800242e <_printf_i+0x1f6>
 8002398:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800239c:	b004      	add	sp, #16
 800239e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80023a2:	6823      	ldr	r3, [r4, #0]
 80023a4:	f043 0320 	orr.w	r3, r3, #32
 80023a8:	6023      	str	r3, [r4, #0]
 80023aa:	4833      	ldr	r0, [pc, #204]	; (8002478 <_printf_i+0x240>)
 80023ac:	2778      	movs	r7, #120	; 0x78
 80023ae:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80023b2:	6823      	ldr	r3, [r4, #0]
 80023b4:	6829      	ldr	r1, [r5, #0]
 80023b6:	061f      	lsls	r7, r3, #24
 80023b8:	f851 6b04 	ldr.w	r6, [r1], #4
 80023bc:	d402      	bmi.n	80023c4 <_printf_i+0x18c>
 80023be:	065f      	lsls	r7, r3, #25
 80023c0:	bf48      	it	mi
 80023c2:	b2b6      	uxthmi	r6, r6
 80023c4:	07df      	lsls	r7, r3, #31
 80023c6:	bf48      	it	mi
 80023c8:	f043 0320 	orrmi.w	r3, r3, #32
 80023cc:	6029      	str	r1, [r5, #0]
 80023ce:	bf48      	it	mi
 80023d0:	6023      	strmi	r3, [r4, #0]
 80023d2:	b91e      	cbnz	r6, 80023dc <_printf_i+0x1a4>
 80023d4:	6823      	ldr	r3, [r4, #0]
 80023d6:	f023 0320 	bic.w	r3, r3, #32
 80023da:	6023      	str	r3, [r4, #0]
 80023dc:	2310      	movs	r3, #16
 80023de:	e7a7      	b.n	8002330 <_printf_i+0xf8>
 80023e0:	4824      	ldr	r0, [pc, #144]	; (8002474 <_printf_i+0x23c>)
 80023e2:	e7e4      	b.n	80023ae <_printf_i+0x176>
 80023e4:	4615      	mov	r5, r2
 80023e6:	e7bd      	b.n	8002364 <_printf_i+0x12c>
 80023e8:	682b      	ldr	r3, [r5, #0]
 80023ea:	6826      	ldr	r6, [r4, #0]
 80023ec:	6961      	ldr	r1, [r4, #20]
 80023ee:	1d18      	adds	r0, r3, #4
 80023f0:	6028      	str	r0, [r5, #0]
 80023f2:	0635      	lsls	r5, r6, #24
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	d501      	bpl.n	80023fc <_printf_i+0x1c4>
 80023f8:	6019      	str	r1, [r3, #0]
 80023fa:	e002      	b.n	8002402 <_printf_i+0x1ca>
 80023fc:	0670      	lsls	r0, r6, #25
 80023fe:	d5fb      	bpl.n	80023f8 <_printf_i+0x1c0>
 8002400:	8019      	strh	r1, [r3, #0]
 8002402:	2300      	movs	r3, #0
 8002404:	6123      	str	r3, [r4, #16]
 8002406:	4615      	mov	r5, r2
 8002408:	e7bc      	b.n	8002384 <_printf_i+0x14c>
 800240a:	682b      	ldr	r3, [r5, #0]
 800240c:	1d1a      	adds	r2, r3, #4
 800240e:	602a      	str	r2, [r5, #0]
 8002410:	681d      	ldr	r5, [r3, #0]
 8002412:	6862      	ldr	r2, [r4, #4]
 8002414:	2100      	movs	r1, #0
 8002416:	4628      	mov	r0, r5
 8002418:	f7fd feea 	bl	80001f0 <memchr>
 800241c:	b108      	cbz	r0, 8002422 <_printf_i+0x1ea>
 800241e:	1b40      	subs	r0, r0, r5
 8002420:	6060      	str	r0, [r4, #4]
 8002422:	6863      	ldr	r3, [r4, #4]
 8002424:	6123      	str	r3, [r4, #16]
 8002426:	2300      	movs	r3, #0
 8002428:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800242c:	e7aa      	b.n	8002384 <_printf_i+0x14c>
 800242e:	6923      	ldr	r3, [r4, #16]
 8002430:	462a      	mov	r2, r5
 8002432:	4649      	mov	r1, r9
 8002434:	4640      	mov	r0, r8
 8002436:	47d0      	blx	sl
 8002438:	3001      	adds	r0, #1
 800243a:	d0ad      	beq.n	8002398 <_printf_i+0x160>
 800243c:	6823      	ldr	r3, [r4, #0]
 800243e:	079b      	lsls	r3, r3, #30
 8002440:	d413      	bmi.n	800246a <_printf_i+0x232>
 8002442:	68e0      	ldr	r0, [r4, #12]
 8002444:	9b03      	ldr	r3, [sp, #12]
 8002446:	4298      	cmp	r0, r3
 8002448:	bfb8      	it	lt
 800244a:	4618      	movlt	r0, r3
 800244c:	e7a6      	b.n	800239c <_printf_i+0x164>
 800244e:	2301      	movs	r3, #1
 8002450:	4632      	mov	r2, r6
 8002452:	4649      	mov	r1, r9
 8002454:	4640      	mov	r0, r8
 8002456:	47d0      	blx	sl
 8002458:	3001      	adds	r0, #1
 800245a:	d09d      	beq.n	8002398 <_printf_i+0x160>
 800245c:	3501      	adds	r5, #1
 800245e:	68e3      	ldr	r3, [r4, #12]
 8002460:	9903      	ldr	r1, [sp, #12]
 8002462:	1a5b      	subs	r3, r3, r1
 8002464:	42ab      	cmp	r3, r5
 8002466:	dcf2      	bgt.n	800244e <_printf_i+0x216>
 8002468:	e7eb      	b.n	8002442 <_printf_i+0x20a>
 800246a:	2500      	movs	r5, #0
 800246c:	f104 0619 	add.w	r6, r4, #25
 8002470:	e7f5      	b.n	800245e <_printf_i+0x226>
 8002472:	bf00      	nop
 8002474:	08002871 	.word	0x08002871
 8002478:	08002882 	.word	0x08002882

0800247c <__sflush_r>:
 800247c:	898a      	ldrh	r2, [r1, #12]
 800247e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002480:	4605      	mov	r5, r0
 8002482:	0710      	lsls	r0, r2, #28
 8002484:	460c      	mov	r4, r1
 8002486:	d457      	bmi.n	8002538 <__sflush_r+0xbc>
 8002488:	684b      	ldr	r3, [r1, #4]
 800248a:	2b00      	cmp	r3, #0
 800248c:	dc04      	bgt.n	8002498 <__sflush_r+0x1c>
 800248e:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8002490:	2b00      	cmp	r3, #0
 8002492:	dc01      	bgt.n	8002498 <__sflush_r+0x1c>
 8002494:	2000      	movs	r0, #0
 8002496:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002498:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800249a:	2e00      	cmp	r6, #0
 800249c:	d0fa      	beq.n	8002494 <__sflush_r+0x18>
 800249e:	2300      	movs	r3, #0
 80024a0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80024a4:	682f      	ldr	r7, [r5, #0]
 80024a6:	6a21      	ldr	r1, [r4, #32]
 80024a8:	602b      	str	r3, [r5, #0]
 80024aa:	d032      	beq.n	8002512 <__sflush_r+0x96>
 80024ac:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80024ae:	89a3      	ldrh	r3, [r4, #12]
 80024b0:	075a      	lsls	r2, r3, #29
 80024b2:	d505      	bpl.n	80024c0 <__sflush_r+0x44>
 80024b4:	6863      	ldr	r3, [r4, #4]
 80024b6:	1ac0      	subs	r0, r0, r3
 80024b8:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80024ba:	b10b      	cbz	r3, 80024c0 <__sflush_r+0x44>
 80024bc:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80024be:	1ac0      	subs	r0, r0, r3
 80024c0:	2300      	movs	r3, #0
 80024c2:	4602      	mov	r2, r0
 80024c4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80024c6:	6a21      	ldr	r1, [r4, #32]
 80024c8:	4628      	mov	r0, r5
 80024ca:	47b0      	blx	r6
 80024cc:	1c43      	adds	r3, r0, #1
 80024ce:	89a3      	ldrh	r3, [r4, #12]
 80024d0:	d106      	bne.n	80024e0 <__sflush_r+0x64>
 80024d2:	6829      	ldr	r1, [r5, #0]
 80024d4:	291d      	cmp	r1, #29
 80024d6:	d82b      	bhi.n	8002530 <__sflush_r+0xb4>
 80024d8:	4a28      	ldr	r2, [pc, #160]	; (800257c <__sflush_r+0x100>)
 80024da:	410a      	asrs	r2, r1
 80024dc:	07d6      	lsls	r6, r2, #31
 80024de:	d427      	bmi.n	8002530 <__sflush_r+0xb4>
 80024e0:	2200      	movs	r2, #0
 80024e2:	6062      	str	r2, [r4, #4]
 80024e4:	04d9      	lsls	r1, r3, #19
 80024e6:	6922      	ldr	r2, [r4, #16]
 80024e8:	6022      	str	r2, [r4, #0]
 80024ea:	d504      	bpl.n	80024f6 <__sflush_r+0x7a>
 80024ec:	1c42      	adds	r2, r0, #1
 80024ee:	d101      	bne.n	80024f4 <__sflush_r+0x78>
 80024f0:	682b      	ldr	r3, [r5, #0]
 80024f2:	b903      	cbnz	r3, 80024f6 <__sflush_r+0x7a>
 80024f4:	6560      	str	r0, [r4, #84]	; 0x54
 80024f6:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80024f8:	602f      	str	r7, [r5, #0]
 80024fa:	2900      	cmp	r1, #0
 80024fc:	d0ca      	beq.n	8002494 <__sflush_r+0x18>
 80024fe:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8002502:	4299      	cmp	r1, r3
 8002504:	d002      	beq.n	800250c <__sflush_r+0x90>
 8002506:	4628      	mov	r0, r5
 8002508:	f7ff fbf0 	bl	8001cec <_free_r>
 800250c:	2000      	movs	r0, #0
 800250e:	6360      	str	r0, [r4, #52]	; 0x34
 8002510:	e7c1      	b.n	8002496 <__sflush_r+0x1a>
 8002512:	2301      	movs	r3, #1
 8002514:	4628      	mov	r0, r5
 8002516:	47b0      	blx	r6
 8002518:	1c41      	adds	r1, r0, #1
 800251a:	d1c8      	bne.n	80024ae <__sflush_r+0x32>
 800251c:	682b      	ldr	r3, [r5, #0]
 800251e:	2b00      	cmp	r3, #0
 8002520:	d0c5      	beq.n	80024ae <__sflush_r+0x32>
 8002522:	2b1d      	cmp	r3, #29
 8002524:	d001      	beq.n	800252a <__sflush_r+0xae>
 8002526:	2b16      	cmp	r3, #22
 8002528:	d101      	bne.n	800252e <__sflush_r+0xb2>
 800252a:	602f      	str	r7, [r5, #0]
 800252c:	e7b2      	b.n	8002494 <__sflush_r+0x18>
 800252e:	89a3      	ldrh	r3, [r4, #12]
 8002530:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002534:	81a3      	strh	r3, [r4, #12]
 8002536:	e7ae      	b.n	8002496 <__sflush_r+0x1a>
 8002538:	690f      	ldr	r7, [r1, #16]
 800253a:	2f00      	cmp	r7, #0
 800253c:	d0aa      	beq.n	8002494 <__sflush_r+0x18>
 800253e:	0793      	lsls	r3, r2, #30
 8002540:	680e      	ldr	r6, [r1, #0]
 8002542:	bf08      	it	eq
 8002544:	694b      	ldreq	r3, [r1, #20]
 8002546:	600f      	str	r7, [r1, #0]
 8002548:	bf18      	it	ne
 800254a:	2300      	movne	r3, #0
 800254c:	1bf6      	subs	r6, r6, r7
 800254e:	608b      	str	r3, [r1, #8]
 8002550:	2e00      	cmp	r6, #0
 8002552:	dd9f      	ble.n	8002494 <__sflush_r+0x18>
 8002554:	6a21      	ldr	r1, [r4, #32]
 8002556:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 800255a:	4633      	mov	r3, r6
 800255c:	463a      	mov	r2, r7
 800255e:	4628      	mov	r0, r5
 8002560:	47e0      	blx	ip
 8002562:	2800      	cmp	r0, #0
 8002564:	dc06      	bgt.n	8002574 <__sflush_r+0xf8>
 8002566:	89a3      	ldrh	r3, [r4, #12]
 8002568:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800256c:	81a3      	strh	r3, [r4, #12]
 800256e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002572:	e790      	b.n	8002496 <__sflush_r+0x1a>
 8002574:	4407      	add	r7, r0
 8002576:	1a36      	subs	r6, r6, r0
 8002578:	e7ea      	b.n	8002550 <__sflush_r+0xd4>
 800257a:	bf00      	nop
 800257c:	dfbffffe 	.word	0xdfbffffe

08002580 <_fflush_r>:
 8002580:	b538      	push	{r3, r4, r5, lr}
 8002582:	690b      	ldr	r3, [r1, #16]
 8002584:	4605      	mov	r5, r0
 8002586:	460c      	mov	r4, r1
 8002588:	b913      	cbnz	r3, 8002590 <_fflush_r+0x10>
 800258a:	2500      	movs	r5, #0
 800258c:	4628      	mov	r0, r5
 800258e:	bd38      	pop	{r3, r4, r5, pc}
 8002590:	b118      	cbz	r0, 800259a <_fflush_r+0x1a>
 8002592:	6a03      	ldr	r3, [r0, #32]
 8002594:	b90b      	cbnz	r3, 800259a <_fflush_r+0x1a>
 8002596:	f7ff faa1 	bl	8001adc <__sinit>
 800259a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800259e:	2b00      	cmp	r3, #0
 80025a0:	d0f3      	beq.n	800258a <_fflush_r+0xa>
 80025a2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80025a4:	07d0      	lsls	r0, r2, #31
 80025a6:	d404      	bmi.n	80025b2 <_fflush_r+0x32>
 80025a8:	0599      	lsls	r1, r3, #22
 80025aa:	d402      	bmi.n	80025b2 <_fflush_r+0x32>
 80025ac:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80025ae:	f7ff fb9a 	bl	8001ce6 <__retarget_lock_acquire_recursive>
 80025b2:	4628      	mov	r0, r5
 80025b4:	4621      	mov	r1, r4
 80025b6:	f7ff ff61 	bl	800247c <__sflush_r>
 80025ba:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80025bc:	07da      	lsls	r2, r3, #31
 80025be:	4605      	mov	r5, r0
 80025c0:	d4e4      	bmi.n	800258c <_fflush_r+0xc>
 80025c2:	89a3      	ldrh	r3, [r4, #12]
 80025c4:	059b      	lsls	r3, r3, #22
 80025c6:	d4e1      	bmi.n	800258c <_fflush_r+0xc>
 80025c8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80025ca:	f7ff fb8d 	bl	8001ce8 <__retarget_lock_release_recursive>
 80025ce:	e7dd      	b.n	800258c <_fflush_r+0xc>

080025d0 <__swbuf_r>:
 80025d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80025d2:	460e      	mov	r6, r1
 80025d4:	4614      	mov	r4, r2
 80025d6:	4605      	mov	r5, r0
 80025d8:	b118      	cbz	r0, 80025e2 <__swbuf_r+0x12>
 80025da:	6a03      	ldr	r3, [r0, #32]
 80025dc:	b90b      	cbnz	r3, 80025e2 <__swbuf_r+0x12>
 80025de:	f7ff fa7d 	bl	8001adc <__sinit>
 80025e2:	69a3      	ldr	r3, [r4, #24]
 80025e4:	60a3      	str	r3, [r4, #8]
 80025e6:	89a3      	ldrh	r3, [r4, #12]
 80025e8:	071a      	lsls	r2, r3, #28
 80025ea:	d525      	bpl.n	8002638 <__swbuf_r+0x68>
 80025ec:	6923      	ldr	r3, [r4, #16]
 80025ee:	b31b      	cbz	r3, 8002638 <__swbuf_r+0x68>
 80025f0:	6823      	ldr	r3, [r4, #0]
 80025f2:	6922      	ldr	r2, [r4, #16]
 80025f4:	1a98      	subs	r0, r3, r2
 80025f6:	6963      	ldr	r3, [r4, #20]
 80025f8:	b2f6      	uxtb	r6, r6
 80025fa:	4283      	cmp	r3, r0
 80025fc:	4637      	mov	r7, r6
 80025fe:	dc04      	bgt.n	800260a <__swbuf_r+0x3a>
 8002600:	4621      	mov	r1, r4
 8002602:	4628      	mov	r0, r5
 8002604:	f7ff ffbc 	bl	8002580 <_fflush_r>
 8002608:	b9e0      	cbnz	r0, 8002644 <__swbuf_r+0x74>
 800260a:	68a3      	ldr	r3, [r4, #8]
 800260c:	3b01      	subs	r3, #1
 800260e:	60a3      	str	r3, [r4, #8]
 8002610:	6823      	ldr	r3, [r4, #0]
 8002612:	1c5a      	adds	r2, r3, #1
 8002614:	6022      	str	r2, [r4, #0]
 8002616:	701e      	strb	r6, [r3, #0]
 8002618:	6962      	ldr	r2, [r4, #20]
 800261a:	1c43      	adds	r3, r0, #1
 800261c:	429a      	cmp	r2, r3
 800261e:	d004      	beq.n	800262a <__swbuf_r+0x5a>
 8002620:	89a3      	ldrh	r3, [r4, #12]
 8002622:	07db      	lsls	r3, r3, #31
 8002624:	d506      	bpl.n	8002634 <__swbuf_r+0x64>
 8002626:	2e0a      	cmp	r6, #10
 8002628:	d104      	bne.n	8002634 <__swbuf_r+0x64>
 800262a:	4621      	mov	r1, r4
 800262c:	4628      	mov	r0, r5
 800262e:	f7ff ffa7 	bl	8002580 <_fflush_r>
 8002632:	b938      	cbnz	r0, 8002644 <__swbuf_r+0x74>
 8002634:	4638      	mov	r0, r7
 8002636:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002638:	4621      	mov	r1, r4
 800263a:	4628      	mov	r0, r5
 800263c:	f000 f806 	bl	800264c <__swsetup_r>
 8002640:	2800      	cmp	r0, #0
 8002642:	d0d5      	beq.n	80025f0 <__swbuf_r+0x20>
 8002644:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8002648:	e7f4      	b.n	8002634 <__swbuf_r+0x64>
	...

0800264c <__swsetup_r>:
 800264c:	b538      	push	{r3, r4, r5, lr}
 800264e:	4b2a      	ldr	r3, [pc, #168]	; (80026f8 <__swsetup_r+0xac>)
 8002650:	4605      	mov	r5, r0
 8002652:	6818      	ldr	r0, [r3, #0]
 8002654:	460c      	mov	r4, r1
 8002656:	b118      	cbz	r0, 8002660 <__swsetup_r+0x14>
 8002658:	6a03      	ldr	r3, [r0, #32]
 800265a:	b90b      	cbnz	r3, 8002660 <__swsetup_r+0x14>
 800265c:	f7ff fa3e 	bl	8001adc <__sinit>
 8002660:	89a3      	ldrh	r3, [r4, #12]
 8002662:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8002666:	0718      	lsls	r0, r3, #28
 8002668:	d422      	bmi.n	80026b0 <__swsetup_r+0x64>
 800266a:	06d9      	lsls	r1, r3, #27
 800266c:	d407      	bmi.n	800267e <__swsetup_r+0x32>
 800266e:	2309      	movs	r3, #9
 8002670:	602b      	str	r3, [r5, #0]
 8002672:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8002676:	81a3      	strh	r3, [r4, #12]
 8002678:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800267c:	e034      	b.n	80026e8 <__swsetup_r+0x9c>
 800267e:	0758      	lsls	r0, r3, #29
 8002680:	d512      	bpl.n	80026a8 <__swsetup_r+0x5c>
 8002682:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8002684:	b141      	cbz	r1, 8002698 <__swsetup_r+0x4c>
 8002686:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800268a:	4299      	cmp	r1, r3
 800268c:	d002      	beq.n	8002694 <__swsetup_r+0x48>
 800268e:	4628      	mov	r0, r5
 8002690:	f7ff fb2c 	bl	8001cec <_free_r>
 8002694:	2300      	movs	r3, #0
 8002696:	6363      	str	r3, [r4, #52]	; 0x34
 8002698:	89a3      	ldrh	r3, [r4, #12]
 800269a:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800269e:	81a3      	strh	r3, [r4, #12]
 80026a0:	2300      	movs	r3, #0
 80026a2:	6063      	str	r3, [r4, #4]
 80026a4:	6923      	ldr	r3, [r4, #16]
 80026a6:	6023      	str	r3, [r4, #0]
 80026a8:	89a3      	ldrh	r3, [r4, #12]
 80026aa:	f043 0308 	orr.w	r3, r3, #8
 80026ae:	81a3      	strh	r3, [r4, #12]
 80026b0:	6923      	ldr	r3, [r4, #16]
 80026b2:	b94b      	cbnz	r3, 80026c8 <__swsetup_r+0x7c>
 80026b4:	89a3      	ldrh	r3, [r4, #12]
 80026b6:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80026ba:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80026be:	d003      	beq.n	80026c8 <__swsetup_r+0x7c>
 80026c0:	4621      	mov	r1, r4
 80026c2:	4628      	mov	r0, r5
 80026c4:	f000 f850 	bl	8002768 <__smakebuf_r>
 80026c8:	89a0      	ldrh	r0, [r4, #12]
 80026ca:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80026ce:	f010 0301 	ands.w	r3, r0, #1
 80026d2:	d00a      	beq.n	80026ea <__swsetup_r+0x9e>
 80026d4:	2300      	movs	r3, #0
 80026d6:	60a3      	str	r3, [r4, #8]
 80026d8:	6963      	ldr	r3, [r4, #20]
 80026da:	425b      	negs	r3, r3
 80026dc:	61a3      	str	r3, [r4, #24]
 80026de:	6923      	ldr	r3, [r4, #16]
 80026e0:	b943      	cbnz	r3, 80026f4 <__swsetup_r+0xa8>
 80026e2:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80026e6:	d1c4      	bne.n	8002672 <__swsetup_r+0x26>
 80026e8:	bd38      	pop	{r3, r4, r5, pc}
 80026ea:	0781      	lsls	r1, r0, #30
 80026ec:	bf58      	it	pl
 80026ee:	6963      	ldrpl	r3, [r4, #20]
 80026f0:	60a3      	str	r3, [r4, #8]
 80026f2:	e7f4      	b.n	80026de <__swsetup_r+0x92>
 80026f4:	2000      	movs	r0, #0
 80026f6:	e7f7      	b.n	80026e8 <__swsetup_r+0x9c>
 80026f8:	20000070 	.word	0x20000070

080026fc <_sbrk_r>:
 80026fc:	b538      	push	{r3, r4, r5, lr}
 80026fe:	4d06      	ldr	r5, [pc, #24]	; (8002718 <_sbrk_r+0x1c>)
 8002700:	2300      	movs	r3, #0
 8002702:	4604      	mov	r4, r0
 8002704:	4608      	mov	r0, r1
 8002706:	602b      	str	r3, [r5, #0]
 8002708:	f7fe f886 	bl	8000818 <_sbrk>
 800270c:	1c43      	adds	r3, r0, #1
 800270e:	d102      	bne.n	8002716 <_sbrk_r+0x1a>
 8002710:	682b      	ldr	r3, [r5, #0]
 8002712:	b103      	cbz	r3, 8002716 <_sbrk_r+0x1a>
 8002714:	6023      	str	r3, [r4, #0]
 8002716:	bd38      	pop	{r3, r4, r5, pc}
 8002718:	200001d4 	.word	0x200001d4

0800271c <__swhatbuf_r>:
 800271c:	b570      	push	{r4, r5, r6, lr}
 800271e:	460c      	mov	r4, r1
 8002720:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002724:	2900      	cmp	r1, #0
 8002726:	b096      	sub	sp, #88	; 0x58
 8002728:	4615      	mov	r5, r2
 800272a:	461e      	mov	r6, r3
 800272c:	da0d      	bge.n	800274a <__swhatbuf_r+0x2e>
 800272e:	89a3      	ldrh	r3, [r4, #12]
 8002730:	f013 0f80 	tst.w	r3, #128	; 0x80
 8002734:	f04f 0100 	mov.w	r1, #0
 8002738:	bf0c      	ite	eq
 800273a:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800273e:	2340      	movne	r3, #64	; 0x40
 8002740:	2000      	movs	r0, #0
 8002742:	6031      	str	r1, [r6, #0]
 8002744:	602b      	str	r3, [r5, #0]
 8002746:	b016      	add	sp, #88	; 0x58
 8002748:	bd70      	pop	{r4, r5, r6, pc}
 800274a:	466a      	mov	r2, sp
 800274c:	f000 f848 	bl	80027e0 <_fstat_r>
 8002750:	2800      	cmp	r0, #0
 8002752:	dbec      	blt.n	800272e <__swhatbuf_r+0x12>
 8002754:	9901      	ldr	r1, [sp, #4]
 8002756:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 800275a:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800275e:	4259      	negs	r1, r3
 8002760:	4159      	adcs	r1, r3
 8002762:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002766:	e7eb      	b.n	8002740 <__swhatbuf_r+0x24>

08002768 <__smakebuf_r>:
 8002768:	898b      	ldrh	r3, [r1, #12]
 800276a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800276c:	079d      	lsls	r5, r3, #30
 800276e:	4606      	mov	r6, r0
 8002770:	460c      	mov	r4, r1
 8002772:	d507      	bpl.n	8002784 <__smakebuf_r+0x1c>
 8002774:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8002778:	6023      	str	r3, [r4, #0]
 800277a:	6123      	str	r3, [r4, #16]
 800277c:	2301      	movs	r3, #1
 800277e:	6163      	str	r3, [r4, #20]
 8002780:	b002      	add	sp, #8
 8002782:	bd70      	pop	{r4, r5, r6, pc}
 8002784:	ab01      	add	r3, sp, #4
 8002786:	466a      	mov	r2, sp
 8002788:	f7ff ffc8 	bl	800271c <__swhatbuf_r>
 800278c:	9900      	ldr	r1, [sp, #0]
 800278e:	4605      	mov	r5, r0
 8002790:	4630      	mov	r0, r6
 8002792:	f7ff fb15 	bl	8001dc0 <_malloc_r>
 8002796:	b948      	cbnz	r0, 80027ac <__smakebuf_r+0x44>
 8002798:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800279c:	059a      	lsls	r2, r3, #22
 800279e:	d4ef      	bmi.n	8002780 <__smakebuf_r+0x18>
 80027a0:	f023 0303 	bic.w	r3, r3, #3
 80027a4:	f043 0302 	orr.w	r3, r3, #2
 80027a8:	81a3      	strh	r3, [r4, #12]
 80027aa:	e7e3      	b.n	8002774 <__smakebuf_r+0xc>
 80027ac:	89a3      	ldrh	r3, [r4, #12]
 80027ae:	6020      	str	r0, [r4, #0]
 80027b0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80027b4:	81a3      	strh	r3, [r4, #12]
 80027b6:	9b00      	ldr	r3, [sp, #0]
 80027b8:	6163      	str	r3, [r4, #20]
 80027ba:	9b01      	ldr	r3, [sp, #4]
 80027bc:	6120      	str	r0, [r4, #16]
 80027be:	b15b      	cbz	r3, 80027d8 <__smakebuf_r+0x70>
 80027c0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80027c4:	4630      	mov	r0, r6
 80027c6:	f000 f81d 	bl	8002804 <_isatty_r>
 80027ca:	b128      	cbz	r0, 80027d8 <__smakebuf_r+0x70>
 80027cc:	89a3      	ldrh	r3, [r4, #12]
 80027ce:	f023 0303 	bic.w	r3, r3, #3
 80027d2:	f043 0301 	orr.w	r3, r3, #1
 80027d6:	81a3      	strh	r3, [r4, #12]
 80027d8:	89a3      	ldrh	r3, [r4, #12]
 80027da:	431d      	orrs	r5, r3
 80027dc:	81a5      	strh	r5, [r4, #12]
 80027de:	e7cf      	b.n	8002780 <__smakebuf_r+0x18>

080027e0 <_fstat_r>:
 80027e0:	b538      	push	{r3, r4, r5, lr}
 80027e2:	4d07      	ldr	r5, [pc, #28]	; (8002800 <_fstat_r+0x20>)
 80027e4:	2300      	movs	r3, #0
 80027e6:	4604      	mov	r4, r0
 80027e8:	4608      	mov	r0, r1
 80027ea:	4611      	mov	r1, r2
 80027ec:	602b      	str	r3, [r5, #0]
 80027ee:	f7fd ffed 	bl	80007cc <_fstat>
 80027f2:	1c43      	adds	r3, r0, #1
 80027f4:	d102      	bne.n	80027fc <_fstat_r+0x1c>
 80027f6:	682b      	ldr	r3, [r5, #0]
 80027f8:	b103      	cbz	r3, 80027fc <_fstat_r+0x1c>
 80027fa:	6023      	str	r3, [r4, #0]
 80027fc:	bd38      	pop	{r3, r4, r5, pc}
 80027fe:	bf00      	nop
 8002800:	200001d4 	.word	0x200001d4

08002804 <_isatty_r>:
 8002804:	b538      	push	{r3, r4, r5, lr}
 8002806:	4d06      	ldr	r5, [pc, #24]	; (8002820 <_isatty_r+0x1c>)
 8002808:	2300      	movs	r3, #0
 800280a:	4604      	mov	r4, r0
 800280c:	4608      	mov	r0, r1
 800280e:	602b      	str	r3, [r5, #0]
 8002810:	f7fd ffeb 	bl	80007ea <_isatty>
 8002814:	1c43      	adds	r3, r0, #1
 8002816:	d102      	bne.n	800281e <_isatty_r+0x1a>
 8002818:	682b      	ldr	r3, [r5, #0]
 800281a:	b103      	cbz	r3, 800281e <_isatty_r+0x1a>
 800281c:	6023      	str	r3, [r4, #0]
 800281e:	bd38      	pop	{r3, r4, r5, pc}
 8002820:	200001d4 	.word	0x200001d4

08002824 <_init>:
 8002824:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002826:	bf00      	nop
 8002828:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800282a:	bc08      	pop	{r3}
 800282c:	469e      	mov	lr, r3
 800282e:	4770      	bx	lr

08002830 <_fini>:
 8002830:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002832:	bf00      	nop
 8002834:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002836:	bc08      	pop	{r3}
 8002838:	469e      	mov	lr, r3
 800283a:	4770      	bx	lr
