
practica_4_b.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001f98  080001ac  080001ac  000101ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  08002144  08002144  00012144  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800215c  0800215c  00020050  2**0
                  CONTENTS
  4 .ARM          00000008  0800215c  0800215c  0001215c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08002164  08002164  00020050  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002164  08002164  00012164  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002168  08002168  00012168  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000050  20000000  0800216c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020050  2**0
                  CONTENTS
 10 .bss          00000034  20000050  20000050  00020050  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20000084  20000084  00020050  2**0
                  ALLOC
 12 .ARM.attributes 0000002a  00000000  00000000  00020050  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  0002007a  2**0
                  CONTENTS, READONLY
 14 .debug_info   000046f4  00000000  00000000  000200bd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00001328  00000000  00000000  000247b1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00000508  00000000  00000000  00025ae0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 0000039a  00000000  00000000  00025fe8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  000249f8  00000000  00000000  00026382  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   00007a50  00000000  00000000  0004ad7a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000e0b36  00000000  00000000  000527ca  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00001260  00000000  00000000  00133300  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000005d  00000000  00000000  00134560  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001ac <__do_global_dtors_aux>:
 80001ac:	b510      	push	{r4, lr}
 80001ae:	4c05      	ldr	r4, [pc, #20]	; (80001c4 <__do_global_dtors_aux+0x18>)
 80001b0:	7823      	ldrb	r3, [r4, #0]
 80001b2:	b933      	cbnz	r3, 80001c2 <__do_global_dtors_aux+0x16>
 80001b4:	4b04      	ldr	r3, [pc, #16]	; (80001c8 <__do_global_dtors_aux+0x1c>)
 80001b6:	b113      	cbz	r3, 80001be <__do_global_dtors_aux+0x12>
 80001b8:	4804      	ldr	r0, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x20>)
 80001ba:	f3af 8000 	nop.w
 80001be:	2301      	movs	r3, #1
 80001c0:	7023      	strb	r3, [r4, #0]
 80001c2:	bd10      	pop	{r4, pc}
 80001c4:	20000050 	.word	0x20000050
 80001c8:	00000000 	.word	0x00000000
 80001cc:	0800212c 	.word	0x0800212c

080001d0 <frame_dummy>:
 80001d0:	b508      	push	{r3, lr}
 80001d2:	4b03      	ldr	r3, [pc, #12]	; (80001e0 <frame_dummy+0x10>)
 80001d4:	b11b      	cbz	r3, 80001de <frame_dummy+0xe>
 80001d6:	4903      	ldr	r1, [pc, #12]	; (80001e4 <frame_dummy+0x14>)
 80001d8:	4803      	ldr	r0, [pc, #12]	; (80001e8 <frame_dummy+0x18>)
 80001da:	f3af 8000 	nop.w
 80001de:	bd08      	pop	{r3, pc}
 80001e0:	00000000 	.word	0x00000000
 80001e4:	20000054 	.word	0x20000054
 80001e8:	0800212c 	.word	0x0800212c

080001ec <__aeabi_fmul>:
 80001ec:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80001f0:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 80001f4:	bf1e      	ittt	ne
 80001f6:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 80001fa:	ea92 0f0c 	teqne	r2, ip
 80001fe:	ea93 0f0c 	teqne	r3, ip
 8000202:	d06f      	beq.n	80002e4 <__aeabi_fmul+0xf8>
 8000204:	441a      	add	r2, r3
 8000206:	ea80 0c01 	eor.w	ip, r0, r1
 800020a:	0240      	lsls	r0, r0, #9
 800020c:	bf18      	it	ne
 800020e:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000212:	d01e      	beq.n	8000252 <__aeabi_fmul+0x66>
 8000214:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000218:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 800021c:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000220:	fba0 3101 	umull	r3, r1, r0, r1
 8000224:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000228:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 800022c:	bf3e      	ittt	cc
 800022e:	0049      	lslcc	r1, r1, #1
 8000230:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000234:	005b      	lslcc	r3, r3, #1
 8000236:	ea40 0001 	orr.w	r0, r0, r1
 800023a:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 800023e:	2afd      	cmp	r2, #253	; 0xfd
 8000240:	d81d      	bhi.n	800027e <__aeabi_fmul+0x92>
 8000242:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000246:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 800024a:	bf08      	it	eq
 800024c:	f020 0001 	biceq.w	r0, r0, #1
 8000250:	4770      	bx	lr
 8000252:	f090 0f00 	teq	r0, #0
 8000256:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 800025a:	bf08      	it	eq
 800025c:	0249      	lsleq	r1, r1, #9
 800025e:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000262:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000266:	3a7f      	subs	r2, #127	; 0x7f
 8000268:	bfc2      	ittt	gt
 800026a:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 800026e:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000272:	4770      	bxgt	lr
 8000274:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000278:	f04f 0300 	mov.w	r3, #0
 800027c:	3a01      	subs	r2, #1
 800027e:	dc5d      	bgt.n	800033c <__aeabi_fmul+0x150>
 8000280:	f112 0f19 	cmn.w	r2, #25
 8000284:	bfdc      	itt	le
 8000286:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 800028a:	4770      	bxle	lr
 800028c:	f1c2 0200 	rsb	r2, r2, #0
 8000290:	0041      	lsls	r1, r0, #1
 8000292:	fa21 f102 	lsr.w	r1, r1, r2
 8000296:	f1c2 0220 	rsb	r2, r2, #32
 800029a:	fa00 fc02 	lsl.w	ip, r0, r2
 800029e:	ea5f 0031 	movs.w	r0, r1, rrx
 80002a2:	f140 0000 	adc.w	r0, r0, #0
 80002a6:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 80002aa:	bf08      	it	eq
 80002ac:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 80002b0:	4770      	bx	lr
 80002b2:	f092 0f00 	teq	r2, #0
 80002b6:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 80002ba:	bf02      	ittt	eq
 80002bc:	0040      	lsleq	r0, r0, #1
 80002be:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 80002c2:	3a01      	subeq	r2, #1
 80002c4:	d0f9      	beq.n	80002ba <__aeabi_fmul+0xce>
 80002c6:	ea40 000c 	orr.w	r0, r0, ip
 80002ca:	f093 0f00 	teq	r3, #0
 80002ce:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 80002d2:	bf02      	ittt	eq
 80002d4:	0049      	lsleq	r1, r1, #1
 80002d6:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 80002da:	3b01      	subeq	r3, #1
 80002dc:	d0f9      	beq.n	80002d2 <__aeabi_fmul+0xe6>
 80002de:	ea41 010c 	orr.w	r1, r1, ip
 80002e2:	e78f      	b.n	8000204 <__aeabi_fmul+0x18>
 80002e4:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 80002e8:	ea92 0f0c 	teq	r2, ip
 80002ec:	bf18      	it	ne
 80002ee:	ea93 0f0c 	teqne	r3, ip
 80002f2:	d00a      	beq.n	800030a <__aeabi_fmul+0x11e>
 80002f4:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 80002f8:	bf18      	it	ne
 80002fa:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 80002fe:	d1d8      	bne.n	80002b2 <__aeabi_fmul+0xc6>
 8000300:	ea80 0001 	eor.w	r0, r0, r1
 8000304:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000308:	4770      	bx	lr
 800030a:	f090 0f00 	teq	r0, #0
 800030e:	bf17      	itett	ne
 8000310:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000314:	4608      	moveq	r0, r1
 8000316:	f091 0f00 	teqne	r1, #0
 800031a:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 800031e:	d014      	beq.n	800034a <__aeabi_fmul+0x15e>
 8000320:	ea92 0f0c 	teq	r2, ip
 8000324:	d101      	bne.n	800032a <__aeabi_fmul+0x13e>
 8000326:	0242      	lsls	r2, r0, #9
 8000328:	d10f      	bne.n	800034a <__aeabi_fmul+0x15e>
 800032a:	ea93 0f0c 	teq	r3, ip
 800032e:	d103      	bne.n	8000338 <__aeabi_fmul+0x14c>
 8000330:	024b      	lsls	r3, r1, #9
 8000332:	bf18      	it	ne
 8000334:	4608      	movne	r0, r1
 8000336:	d108      	bne.n	800034a <__aeabi_fmul+0x15e>
 8000338:	ea80 0001 	eor.w	r0, r0, r1
 800033c:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000340:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000344:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000348:	4770      	bx	lr
 800034a:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 800034e:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000352:	4770      	bx	lr

08000354 <__aeabi_frsub>:
 8000354:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000358:	e002      	b.n	8000360 <__addsf3>
 800035a:	bf00      	nop

0800035c <__aeabi_fsub>:
 800035c:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000360 <__addsf3>:
 8000360:	0042      	lsls	r2, r0, #1
 8000362:	bf1f      	itttt	ne
 8000364:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000368:	ea92 0f03 	teqne	r2, r3
 800036c:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000370:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000374:	d06a      	beq.n	800044c <__addsf3+0xec>
 8000376:	ea4f 6212 	mov.w	r2, r2, lsr #24
 800037a:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 800037e:	bfc1      	itttt	gt
 8000380:	18d2      	addgt	r2, r2, r3
 8000382:	4041      	eorgt	r1, r0
 8000384:	4048      	eorgt	r0, r1
 8000386:	4041      	eorgt	r1, r0
 8000388:	bfb8      	it	lt
 800038a:	425b      	neglt	r3, r3
 800038c:	2b19      	cmp	r3, #25
 800038e:	bf88      	it	hi
 8000390:	4770      	bxhi	lr
 8000392:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000396:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 800039a:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 800039e:	bf18      	it	ne
 80003a0:	4240      	negne	r0, r0
 80003a2:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80003a6:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 80003aa:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 80003ae:	bf18      	it	ne
 80003b0:	4249      	negne	r1, r1
 80003b2:	ea92 0f03 	teq	r2, r3
 80003b6:	d03f      	beq.n	8000438 <__addsf3+0xd8>
 80003b8:	f1a2 0201 	sub.w	r2, r2, #1
 80003bc:	fa41 fc03 	asr.w	ip, r1, r3
 80003c0:	eb10 000c 	adds.w	r0, r0, ip
 80003c4:	f1c3 0320 	rsb	r3, r3, #32
 80003c8:	fa01 f103 	lsl.w	r1, r1, r3
 80003cc:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 80003d0:	d502      	bpl.n	80003d8 <__addsf3+0x78>
 80003d2:	4249      	negs	r1, r1
 80003d4:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 80003d8:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 80003dc:	d313      	bcc.n	8000406 <__addsf3+0xa6>
 80003de:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 80003e2:	d306      	bcc.n	80003f2 <__addsf3+0x92>
 80003e4:	0840      	lsrs	r0, r0, #1
 80003e6:	ea4f 0131 	mov.w	r1, r1, rrx
 80003ea:	f102 0201 	add.w	r2, r2, #1
 80003ee:	2afe      	cmp	r2, #254	; 0xfe
 80003f0:	d251      	bcs.n	8000496 <__addsf3+0x136>
 80003f2:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 80003f6:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80003fa:	bf08      	it	eq
 80003fc:	f020 0001 	biceq.w	r0, r0, #1
 8000400:	ea40 0003 	orr.w	r0, r0, r3
 8000404:	4770      	bx	lr
 8000406:	0049      	lsls	r1, r1, #1
 8000408:	eb40 0000 	adc.w	r0, r0, r0
 800040c:	3a01      	subs	r2, #1
 800040e:	bf28      	it	cs
 8000410:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000414:	d2ed      	bcs.n	80003f2 <__addsf3+0x92>
 8000416:	fab0 fc80 	clz	ip, r0
 800041a:	f1ac 0c08 	sub.w	ip, ip, #8
 800041e:	ebb2 020c 	subs.w	r2, r2, ip
 8000422:	fa00 f00c 	lsl.w	r0, r0, ip
 8000426:	bfaa      	itet	ge
 8000428:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 800042c:	4252      	neglt	r2, r2
 800042e:	4318      	orrge	r0, r3
 8000430:	bfbc      	itt	lt
 8000432:	40d0      	lsrlt	r0, r2
 8000434:	4318      	orrlt	r0, r3
 8000436:	4770      	bx	lr
 8000438:	f092 0f00 	teq	r2, #0
 800043c:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000440:	bf06      	itte	eq
 8000442:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000446:	3201      	addeq	r2, #1
 8000448:	3b01      	subne	r3, #1
 800044a:	e7b5      	b.n	80003b8 <__addsf3+0x58>
 800044c:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000450:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000454:	bf18      	it	ne
 8000456:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 800045a:	d021      	beq.n	80004a0 <__addsf3+0x140>
 800045c:	ea92 0f03 	teq	r2, r3
 8000460:	d004      	beq.n	800046c <__addsf3+0x10c>
 8000462:	f092 0f00 	teq	r2, #0
 8000466:	bf08      	it	eq
 8000468:	4608      	moveq	r0, r1
 800046a:	4770      	bx	lr
 800046c:	ea90 0f01 	teq	r0, r1
 8000470:	bf1c      	itt	ne
 8000472:	2000      	movne	r0, #0
 8000474:	4770      	bxne	lr
 8000476:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 800047a:	d104      	bne.n	8000486 <__addsf3+0x126>
 800047c:	0040      	lsls	r0, r0, #1
 800047e:	bf28      	it	cs
 8000480:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000484:	4770      	bx	lr
 8000486:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 800048a:	bf3c      	itt	cc
 800048c:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000490:	4770      	bxcc	lr
 8000492:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000496:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 800049a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 800049e:	4770      	bx	lr
 80004a0:	ea7f 6222 	mvns.w	r2, r2, asr #24
 80004a4:	bf16      	itet	ne
 80004a6:	4608      	movne	r0, r1
 80004a8:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 80004ac:	4601      	movne	r1, r0
 80004ae:	0242      	lsls	r2, r0, #9
 80004b0:	bf06      	itte	eq
 80004b2:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 80004b6:	ea90 0f01 	teqeq	r0, r1
 80004ba:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 80004be:	4770      	bx	lr

080004c0 <__aeabi_ui2f>:
 80004c0:	f04f 0300 	mov.w	r3, #0
 80004c4:	e004      	b.n	80004d0 <__aeabi_i2f+0x8>
 80004c6:	bf00      	nop

080004c8 <__aeabi_i2f>:
 80004c8:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 80004cc:	bf48      	it	mi
 80004ce:	4240      	negmi	r0, r0
 80004d0:	ea5f 0c00 	movs.w	ip, r0
 80004d4:	bf08      	it	eq
 80004d6:	4770      	bxeq	lr
 80004d8:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 80004dc:	4601      	mov	r1, r0
 80004de:	f04f 0000 	mov.w	r0, #0
 80004e2:	e01c      	b.n	800051e <__aeabi_l2f+0x2a>

080004e4 <__aeabi_ul2f>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	f04f 0300 	mov.w	r3, #0
 80004f0:	e00a      	b.n	8000508 <__aeabi_l2f+0x14>
 80004f2:	bf00      	nop

080004f4 <__aeabi_l2f>:
 80004f4:	ea50 0201 	orrs.w	r2, r0, r1
 80004f8:	bf08      	it	eq
 80004fa:	4770      	bxeq	lr
 80004fc:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000500:	d502      	bpl.n	8000508 <__aeabi_l2f+0x14>
 8000502:	4240      	negs	r0, r0
 8000504:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000508:	ea5f 0c01 	movs.w	ip, r1
 800050c:	bf02      	ittt	eq
 800050e:	4684      	moveq	ip, r0
 8000510:	4601      	moveq	r1, r0
 8000512:	2000      	moveq	r0, #0
 8000514:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000518:	bf08      	it	eq
 800051a:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 800051e:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000522:	fabc f28c 	clz	r2, ip
 8000526:	3a08      	subs	r2, #8
 8000528:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 800052c:	db10      	blt.n	8000550 <__aeabi_l2f+0x5c>
 800052e:	fa01 fc02 	lsl.w	ip, r1, r2
 8000532:	4463      	add	r3, ip
 8000534:	fa00 fc02 	lsl.w	ip, r0, r2
 8000538:	f1c2 0220 	rsb	r2, r2, #32
 800053c:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000540:	fa20 f202 	lsr.w	r2, r0, r2
 8000544:	eb43 0002 	adc.w	r0, r3, r2
 8000548:	bf08      	it	eq
 800054a:	f020 0001 	biceq.w	r0, r0, #1
 800054e:	4770      	bx	lr
 8000550:	f102 0220 	add.w	r2, r2, #32
 8000554:	fa01 fc02 	lsl.w	ip, r1, r2
 8000558:	f1c2 0220 	rsb	r2, r2, #32
 800055c:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000560:	fa21 f202 	lsr.w	r2, r1, r2
 8000564:	eb43 0002 	adc.w	r0, r3, r2
 8000568:	bf08      	it	eq
 800056a:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 800056e:	4770      	bx	lr

08000570 <__aeabi_f2uiz>:
 8000570:	0042      	lsls	r2, r0, #1
 8000572:	d20e      	bcs.n	8000592 <__aeabi_f2uiz+0x22>
 8000574:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8000578:	d30b      	bcc.n	8000592 <__aeabi_f2uiz+0x22>
 800057a:	f04f 039e 	mov.w	r3, #158	; 0x9e
 800057e:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000582:	d409      	bmi.n	8000598 <__aeabi_f2uiz+0x28>
 8000584:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000588:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800058c:	fa23 f002 	lsr.w	r0, r3, r2
 8000590:	4770      	bx	lr
 8000592:	f04f 0000 	mov.w	r0, #0
 8000596:	4770      	bx	lr
 8000598:	f112 0f61 	cmn.w	r2, #97	; 0x61
 800059c:	d101      	bne.n	80005a2 <__aeabi_f2uiz+0x32>
 800059e:	0242      	lsls	r2, r0, #9
 80005a0:	d102      	bne.n	80005a8 <__aeabi_f2uiz+0x38>
 80005a2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80005a6:	4770      	bx	lr
 80005a8:	f04f 0000 	mov.w	r0, #0
 80005ac:	4770      	bx	lr
 80005ae:	bf00      	nop

080005b0 <__aeabi_uldivmod>:
 80005b0:	b953      	cbnz	r3, 80005c8 <__aeabi_uldivmod+0x18>
 80005b2:	b94a      	cbnz	r2, 80005c8 <__aeabi_uldivmod+0x18>
 80005b4:	2900      	cmp	r1, #0
 80005b6:	bf08      	it	eq
 80005b8:	2800      	cmpeq	r0, #0
 80005ba:	bf1c      	itt	ne
 80005bc:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80005c0:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80005c4:	f000 b970 	b.w	80008a8 <__aeabi_idiv0>
 80005c8:	f1ad 0c08 	sub.w	ip, sp, #8
 80005cc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80005d0:	f000 f806 	bl	80005e0 <__udivmoddi4>
 80005d4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80005d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80005dc:	b004      	add	sp, #16
 80005de:	4770      	bx	lr

080005e0 <__udivmoddi4>:
 80005e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80005e4:	9e08      	ldr	r6, [sp, #32]
 80005e6:	460d      	mov	r5, r1
 80005e8:	4604      	mov	r4, r0
 80005ea:	460f      	mov	r7, r1
 80005ec:	2b00      	cmp	r3, #0
 80005ee:	d14a      	bne.n	8000686 <__udivmoddi4+0xa6>
 80005f0:	428a      	cmp	r2, r1
 80005f2:	4694      	mov	ip, r2
 80005f4:	d965      	bls.n	80006c2 <__udivmoddi4+0xe2>
 80005f6:	fab2 f382 	clz	r3, r2
 80005fa:	b143      	cbz	r3, 800060e <__udivmoddi4+0x2e>
 80005fc:	fa02 fc03 	lsl.w	ip, r2, r3
 8000600:	f1c3 0220 	rsb	r2, r3, #32
 8000604:	409f      	lsls	r7, r3
 8000606:	fa20 f202 	lsr.w	r2, r0, r2
 800060a:	4317      	orrs	r7, r2
 800060c:	409c      	lsls	r4, r3
 800060e:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000612:	fa1f f58c 	uxth.w	r5, ip
 8000616:	fbb7 f1fe 	udiv	r1, r7, lr
 800061a:	0c22      	lsrs	r2, r4, #16
 800061c:	fb0e 7711 	mls	r7, lr, r1, r7
 8000620:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000624:	fb01 f005 	mul.w	r0, r1, r5
 8000628:	4290      	cmp	r0, r2
 800062a:	d90a      	bls.n	8000642 <__udivmoddi4+0x62>
 800062c:	eb1c 0202 	adds.w	r2, ip, r2
 8000630:	f101 37ff 	add.w	r7, r1, #4294967295	; 0xffffffff
 8000634:	f080 811b 	bcs.w	800086e <__udivmoddi4+0x28e>
 8000638:	4290      	cmp	r0, r2
 800063a:	f240 8118 	bls.w	800086e <__udivmoddi4+0x28e>
 800063e:	3902      	subs	r1, #2
 8000640:	4462      	add	r2, ip
 8000642:	1a12      	subs	r2, r2, r0
 8000644:	b2a4      	uxth	r4, r4
 8000646:	fbb2 f0fe 	udiv	r0, r2, lr
 800064a:	fb0e 2210 	mls	r2, lr, r0, r2
 800064e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000652:	fb00 f505 	mul.w	r5, r0, r5
 8000656:	42a5      	cmp	r5, r4
 8000658:	d90a      	bls.n	8000670 <__udivmoddi4+0x90>
 800065a:	eb1c 0404 	adds.w	r4, ip, r4
 800065e:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000662:	f080 8106 	bcs.w	8000872 <__udivmoddi4+0x292>
 8000666:	42a5      	cmp	r5, r4
 8000668:	f240 8103 	bls.w	8000872 <__udivmoddi4+0x292>
 800066c:	4464      	add	r4, ip
 800066e:	3802      	subs	r0, #2
 8000670:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000674:	1b64      	subs	r4, r4, r5
 8000676:	2100      	movs	r1, #0
 8000678:	b11e      	cbz	r6, 8000682 <__udivmoddi4+0xa2>
 800067a:	40dc      	lsrs	r4, r3
 800067c:	2300      	movs	r3, #0
 800067e:	e9c6 4300 	strd	r4, r3, [r6]
 8000682:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000686:	428b      	cmp	r3, r1
 8000688:	d908      	bls.n	800069c <__udivmoddi4+0xbc>
 800068a:	2e00      	cmp	r6, #0
 800068c:	f000 80ec 	beq.w	8000868 <__udivmoddi4+0x288>
 8000690:	2100      	movs	r1, #0
 8000692:	e9c6 0500 	strd	r0, r5, [r6]
 8000696:	4608      	mov	r0, r1
 8000698:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800069c:	fab3 f183 	clz	r1, r3
 80006a0:	2900      	cmp	r1, #0
 80006a2:	d149      	bne.n	8000738 <__udivmoddi4+0x158>
 80006a4:	42ab      	cmp	r3, r5
 80006a6:	d302      	bcc.n	80006ae <__udivmoddi4+0xce>
 80006a8:	4282      	cmp	r2, r0
 80006aa:	f200 80f7 	bhi.w	800089c <__udivmoddi4+0x2bc>
 80006ae:	1a84      	subs	r4, r0, r2
 80006b0:	eb65 0203 	sbc.w	r2, r5, r3
 80006b4:	2001      	movs	r0, #1
 80006b6:	4617      	mov	r7, r2
 80006b8:	2e00      	cmp	r6, #0
 80006ba:	d0e2      	beq.n	8000682 <__udivmoddi4+0xa2>
 80006bc:	e9c6 4700 	strd	r4, r7, [r6]
 80006c0:	e7df      	b.n	8000682 <__udivmoddi4+0xa2>
 80006c2:	b902      	cbnz	r2, 80006c6 <__udivmoddi4+0xe6>
 80006c4:	deff      	udf	#255	; 0xff
 80006c6:	fab2 f382 	clz	r3, r2
 80006ca:	2b00      	cmp	r3, #0
 80006cc:	f040 808f 	bne.w	80007ee <__udivmoddi4+0x20e>
 80006d0:	1a8a      	subs	r2, r1, r2
 80006d2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80006d6:	fa1f fe8c 	uxth.w	lr, ip
 80006da:	2101      	movs	r1, #1
 80006dc:	fbb2 f5f7 	udiv	r5, r2, r7
 80006e0:	fb07 2015 	mls	r0, r7, r5, r2
 80006e4:	0c22      	lsrs	r2, r4, #16
 80006e6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80006ea:	fb0e f005 	mul.w	r0, lr, r5
 80006ee:	4290      	cmp	r0, r2
 80006f0:	d908      	bls.n	8000704 <__udivmoddi4+0x124>
 80006f2:	eb1c 0202 	adds.w	r2, ip, r2
 80006f6:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 80006fa:	d202      	bcs.n	8000702 <__udivmoddi4+0x122>
 80006fc:	4290      	cmp	r0, r2
 80006fe:	f200 80ca 	bhi.w	8000896 <__udivmoddi4+0x2b6>
 8000702:	4645      	mov	r5, r8
 8000704:	1a12      	subs	r2, r2, r0
 8000706:	b2a4      	uxth	r4, r4
 8000708:	fbb2 f0f7 	udiv	r0, r2, r7
 800070c:	fb07 2210 	mls	r2, r7, r0, r2
 8000710:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000714:	fb0e fe00 	mul.w	lr, lr, r0
 8000718:	45a6      	cmp	lr, r4
 800071a:	d908      	bls.n	800072e <__udivmoddi4+0x14e>
 800071c:	eb1c 0404 	adds.w	r4, ip, r4
 8000720:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000724:	d202      	bcs.n	800072c <__udivmoddi4+0x14c>
 8000726:	45a6      	cmp	lr, r4
 8000728:	f200 80ba 	bhi.w	80008a0 <__udivmoddi4+0x2c0>
 800072c:	4610      	mov	r0, r2
 800072e:	eba4 040e 	sub.w	r4, r4, lr
 8000732:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000736:	e79f      	b.n	8000678 <__udivmoddi4+0x98>
 8000738:	f1c1 0720 	rsb	r7, r1, #32
 800073c:	408b      	lsls	r3, r1
 800073e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000742:	ea4c 0c03 	orr.w	ip, ip, r3
 8000746:	fa05 f401 	lsl.w	r4, r5, r1
 800074a:	fa20 f307 	lsr.w	r3, r0, r7
 800074e:	40fd      	lsrs	r5, r7
 8000750:	4323      	orrs	r3, r4
 8000752:	fa00 f901 	lsl.w	r9, r0, r1
 8000756:	ea4f 401c 	mov.w	r0, ip, lsr #16
 800075a:	fa1f fe8c 	uxth.w	lr, ip
 800075e:	fbb5 f8f0 	udiv	r8, r5, r0
 8000762:	0c1c      	lsrs	r4, r3, #16
 8000764:	fb00 5518 	mls	r5, r0, r8, r5
 8000768:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 800076c:	fb08 f50e 	mul.w	r5, r8, lr
 8000770:	42a5      	cmp	r5, r4
 8000772:	fa02 f201 	lsl.w	r2, r2, r1
 8000776:	d90b      	bls.n	8000790 <__udivmoddi4+0x1b0>
 8000778:	eb1c 0404 	adds.w	r4, ip, r4
 800077c:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000780:	f080 8087 	bcs.w	8000892 <__udivmoddi4+0x2b2>
 8000784:	42a5      	cmp	r5, r4
 8000786:	f240 8084 	bls.w	8000892 <__udivmoddi4+0x2b2>
 800078a:	f1a8 0802 	sub.w	r8, r8, #2
 800078e:	4464      	add	r4, ip
 8000790:	1b64      	subs	r4, r4, r5
 8000792:	b29d      	uxth	r5, r3
 8000794:	fbb4 f3f0 	udiv	r3, r4, r0
 8000798:	fb00 4413 	mls	r4, r0, r3, r4
 800079c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80007a0:	fb03 fe0e 	mul.w	lr, r3, lr
 80007a4:	45a6      	cmp	lr, r4
 80007a6:	d908      	bls.n	80007ba <__udivmoddi4+0x1da>
 80007a8:	eb1c 0404 	adds.w	r4, ip, r4
 80007ac:	f103 30ff 	add.w	r0, r3, #4294967295	; 0xffffffff
 80007b0:	d26b      	bcs.n	800088a <__udivmoddi4+0x2aa>
 80007b2:	45a6      	cmp	lr, r4
 80007b4:	d969      	bls.n	800088a <__udivmoddi4+0x2aa>
 80007b6:	3b02      	subs	r3, #2
 80007b8:	4464      	add	r4, ip
 80007ba:	ea43 4008 	orr.w	r0, r3, r8, lsl #16
 80007be:	fba0 8302 	umull	r8, r3, r0, r2
 80007c2:	eba4 040e 	sub.w	r4, r4, lr
 80007c6:	429c      	cmp	r4, r3
 80007c8:	46c6      	mov	lr, r8
 80007ca:	461d      	mov	r5, r3
 80007cc:	d355      	bcc.n	800087a <__udivmoddi4+0x29a>
 80007ce:	d052      	beq.n	8000876 <__udivmoddi4+0x296>
 80007d0:	b156      	cbz	r6, 80007e8 <__udivmoddi4+0x208>
 80007d2:	ebb9 030e 	subs.w	r3, r9, lr
 80007d6:	eb64 0405 	sbc.w	r4, r4, r5
 80007da:	fa04 f707 	lsl.w	r7, r4, r7
 80007de:	40cb      	lsrs	r3, r1
 80007e0:	40cc      	lsrs	r4, r1
 80007e2:	431f      	orrs	r7, r3
 80007e4:	e9c6 7400 	strd	r7, r4, [r6]
 80007e8:	2100      	movs	r1, #0
 80007ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80007ee:	f1c3 0120 	rsb	r1, r3, #32
 80007f2:	fa02 fc03 	lsl.w	ip, r2, r3
 80007f6:	fa20 f201 	lsr.w	r2, r0, r1
 80007fa:	fa25 f101 	lsr.w	r1, r5, r1
 80007fe:	409d      	lsls	r5, r3
 8000800:	432a      	orrs	r2, r5
 8000802:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000806:	fa1f fe8c 	uxth.w	lr, ip
 800080a:	fbb1 f0f7 	udiv	r0, r1, r7
 800080e:	fb07 1510 	mls	r5, r7, r0, r1
 8000812:	0c11      	lsrs	r1, r2, #16
 8000814:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000818:	fb00 f50e 	mul.w	r5, r0, lr
 800081c:	428d      	cmp	r5, r1
 800081e:	fa04 f403 	lsl.w	r4, r4, r3
 8000822:	d908      	bls.n	8000836 <__udivmoddi4+0x256>
 8000824:	eb1c 0101 	adds.w	r1, ip, r1
 8000828:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 800082c:	d22f      	bcs.n	800088e <__udivmoddi4+0x2ae>
 800082e:	428d      	cmp	r5, r1
 8000830:	d92d      	bls.n	800088e <__udivmoddi4+0x2ae>
 8000832:	3802      	subs	r0, #2
 8000834:	4461      	add	r1, ip
 8000836:	1b49      	subs	r1, r1, r5
 8000838:	b292      	uxth	r2, r2
 800083a:	fbb1 f5f7 	udiv	r5, r1, r7
 800083e:	fb07 1115 	mls	r1, r7, r5, r1
 8000842:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000846:	fb05 f10e 	mul.w	r1, r5, lr
 800084a:	4291      	cmp	r1, r2
 800084c:	d908      	bls.n	8000860 <__udivmoddi4+0x280>
 800084e:	eb1c 0202 	adds.w	r2, ip, r2
 8000852:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000856:	d216      	bcs.n	8000886 <__udivmoddi4+0x2a6>
 8000858:	4291      	cmp	r1, r2
 800085a:	d914      	bls.n	8000886 <__udivmoddi4+0x2a6>
 800085c:	3d02      	subs	r5, #2
 800085e:	4462      	add	r2, ip
 8000860:	1a52      	subs	r2, r2, r1
 8000862:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000866:	e739      	b.n	80006dc <__udivmoddi4+0xfc>
 8000868:	4631      	mov	r1, r6
 800086a:	4630      	mov	r0, r6
 800086c:	e709      	b.n	8000682 <__udivmoddi4+0xa2>
 800086e:	4639      	mov	r1, r7
 8000870:	e6e7      	b.n	8000642 <__udivmoddi4+0x62>
 8000872:	4610      	mov	r0, r2
 8000874:	e6fc      	b.n	8000670 <__udivmoddi4+0x90>
 8000876:	45c1      	cmp	r9, r8
 8000878:	d2aa      	bcs.n	80007d0 <__udivmoddi4+0x1f0>
 800087a:	ebb8 0e02 	subs.w	lr, r8, r2
 800087e:	eb63 050c 	sbc.w	r5, r3, ip
 8000882:	3801      	subs	r0, #1
 8000884:	e7a4      	b.n	80007d0 <__udivmoddi4+0x1f0>
 8000886:	4645      	mov	r5, r8
 8000888:	e7ea      	b.n	8000860 <__udivmoddi4+0x280>
 800088a:	4603      	mov	r3, r0
 800088c:	e795      	b.n	80007ba <__udivmoddi4+0x1da>
 800088e:	4640      	mov	r0, r8
 8000890:	e7d1      	b.n	8000836 <__udivmoddi4+0x256>
 8000892:	46d0      	mov	r8, sl
 8000894:	e77c      	b.n	8000790 <__udivmoddi4+0x1b0>
 8000896:	3d02      	subs	r5, #2
 8000898:	4462      	add	r2, ip
 800089a:	e733      	b.n	8000704 <__udivmoddi4+0x124>
 800089c:	4608      	mov	r0, r1
 800089e:	e70b      	b.n	80006b8 <__udivmoddi4+0xd8>
 80008a0:	4464      	add	r4, ip
 80008a2:	3802      	subs	r0, #2
 80008a4:	e743      	b.n	800072e <__udivmoddi4+0x14e>
 80008a6:	bf00      	nop

080008a8 <__aeabi_idiv0>:
 80008a8:	4770      	bx	lr
 80008aa:	bf00      	nop

080008ac <debounceFSM_init>:
static delay_t debounce_delay;

static bool_t key_state = false;


void debounceFSM_init(void){
 80008ac:	b480      	push	{r7}
 80008ae:	af00      	add	r7, sp, #0
	state = BUTTON_UP;
 80008b0:	4b03      	ldr	r3, [pc, #12]	; (80008c0 <debounceFSM_init+0x14>)
 80008b2:	2200      	movs	r2, #0
 80008b4:	701a      	strb	r2, [r3, #0]
}
 80008b6:	bf00      	nop
 80008b8:	46bd      	mov	sp, r7
 80008ba:	bc80      	pop	{r7}
 80008bc:	4770      	bx	lr
 80008be:	bf00      	nop
 80008c0:	2000006c 	.word	0x2000006c

080008c4 <debounceFSM_update>:

void debounceFSM_update(void){
 80008c4:	b580      	push	{r7, lr}
 80008c6:	af00      	add	r7, sp, #0
	delayInit(&debounce_delay, 40);
 80008c8:	2128      	movs	r1, #40	; 0x28
 80008ca:	482a      	ldr	r0, [pc, #168]	; (8000974 <debounceFSM_update+0xb0>)
 80008cc:	f000 f8da 	bl	8000a84 <delayInit>

	switch (state){
 80008d0:	4b29      	ldr	r3, [pc, #164]	; (8000978 <debounceFSM_update+0xb4>)
 80008d2:	781b      	ldrb	r3, [r3, #0]
 80008d4:	2b03      	cmp	r3, #3
 80008d6:	d84b      	bhi.n	8000970 <debounceFSM_update+0xac>
 80008d8:	a201      	add	r2, pc, #4	; (adr r2, 80008e0 <debounceFSM_update+0x1c>)
 80008da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80008de:	bf00      	nop
 80008e0:	080008f1 	.word	0x080008f1
 80008e4:	08000905 	.word	0x08000905
 80008e8:	08000931 	.word	0x08000931
 80008ec:	08000945 	.word	0x08000945
	case BUTTON_UP:
		if (BSP_PB_GetState(BUTTON_USER)){
 80008f0:	2000      	movs	r0, #0
 80008f2:	f000 f9ff 	bl	8000cf4 <BSP_PB_GetState>
 80008f6:	4603      	mov	r3, r0
 80008f8:	2b00      	cmp	r3, #0
 80008fa:	d036      	beq.n	800096a <debounceFSM_update+0xa6>
			state = BUTTON_FALLING;
 80008fc:	4b1e      	ldr	r3, [pc, #120]	; (8000978 <debounceFSM_update+0xb4>)
 80008fe:	2201      	movs	r2, #1
 8000900:	701a      	strb	r2, [r3, #0]
		}
		break;
 8000902:	e032      	b.n	800096a <debounceFSM_update+0xa6>


	case BUTTON_FALLING:
		delayRead(&debounce_delay);
 8000904:	481b      	ldr	r0, [pc, #108]	; (8000974 <debounceFSM_update+0xb0>)
 8000906:	f000 f8d5 	bl	8000ab4 <delayRead>
		if (BSP_PB_GetState(BUTTON_USER)){
 800090a:	2000      	movs	r0, #0
 800090c:	f000 f9f2 	bl	8000cf4 <BSP_PB_GetState>
 8000910:	4603      	mov	r3, r0
 8000912:	2b00      	cmp	r3, #0
 8000914:	d008      	beq.n	8000928 <debounceFSM_update+0x64>
			state = BUTTON_DOWN;
 8000916:	4b18      	ldr	r3, [pc, #96]	; (8000978 <debounceFSM_update+0xb4>)
 8000918:	2202      	movs	r2, #2
 800091a:	701a      	strb	r2, [r3, #0]
			key_state = true;
 800091c:	4b17      	ldr	r3, [pc, #92]	; (800097c <debounceFSM_update+0xb8>)
 800091e:	2201      	movs	r2, #1
 8000920:	701a      	strb	r2, [r3, #0]
			buttonPressed();
 8000922:	f000 f82d 	bl	8000980 <buttonPressed>
		}else {
			state = BUTTON_UP;
		}
		break;
 8000926:	e023      	b.n	8000970 <debounceFSM_update+0xac>
			state = BUTTON_UP;
 8000928:	4b13      	ldr	r3, [pc, #76]	; (8000978 <debounceFSM_update+0xb4>)
 800092a:	2200      	movs	r2, #0
 800092c:	701a      	strb	r2, [r3, #0]
		break;
 800092e:	e01f      	b.n	8000970 <debounceFSM_update+0xac>

	case BUTTON_DOWN:
		if(!BSP_PB_GetState(BUTTON_USER)){
 8000930:	2000      	movs	r0, #0
 8000932:	f000 f9df 	bl	8000cf4 <BSP_PB_GetState>
 8000936:	4603      	mov	r3, r0
 8000938:	2b00      	cmp	r3, #0
 800093a:	d118      	bne.n	800096e <debounceFSM_update+0xaa>
			state = BUTTON_RAISING;
 800093c:	4b0e      	ldr	r3, [pc, #56]	; (8000978 <debounceFSM_update+0xb4>)
 800093e:	2203      	movs	r2, #3
 8000940:	701a      	strb	r2, [r3, #0]

		}
		break;
 8000942:	e014      	b.n	800096e <debounceFSM_update+0xaa>

	case BUTTON_RAISING:
		delayRead(&debounce_delay);
 8000944:	480b      	ldr	r0, [pc, #44]	; (8000974 <debounceFSM_update+0xb0>)
 8000946:	f000 f8b5 	bl	8000ab4 <delayRead>
		if (!BSP_PB_GetState(BUTTON_USER)){
 800094a:	2000      	movs	r0, #0
 800094c:	f000 f9d2 	bl	8000cf4 <BSP_PB_GetState>
 8000950:	4603      	mov	r3, r0
 8000952:	2b00      	cmp	r3, #0
 8000954:	d105      	bne.n	8000962 <debounceFSM_update+0x9e>
			state = BUTTON_UP;
 8000956:	4b08      	ldr	r3, [pc, #32]	; (8000978 <debounceFSM_update+0xb4>)
 8000958:	2200      	movs	r2, #0
 800095a:	701a      	strb	r2, [r3, #0]
			buttonReleased();
 800095c:	f000 f817 	bl	800098e <buttonReleased>
		}else {
			state = BUTTON_DOWN;
		}
		break;
 8000960:	e006      	b.n	8000970 <debounceFSM_update+0xac>
			state = BUTTON_DOWN;
 8000962:	4b05      	ldr	r3, [pc, #20]	; (8000978 <debounceFSM_update+0xb4>)
 8000964:	2202      	movs	r2, #2
 8000966:	701a      	strb	r2, [r3, #0]
		break;
 8000968:	e002      	b.n	8000970 <debounceFSM_update+0xac>
		break;
 800096a:	bf00      	nop
 800096c:	e000      	b.n	8000970 <debounceFSM_update+0xac>
		break;
 800096e:	bf00      	nop
	}
}
 8000970:	bf00      	nop
 8000972:	bd80      	pop	{r7, pc}
 8000974:	20000070 	.word	0x20000070
 8000978:	2000006c 	.word	0x2000006c
 800097c:	2000007c 	.word	0x2000007c

08000980 <buttonPressed>:

void buttonPressed(void){
 8000980:	b580      	push	{r7, lr}
 8000982:	af00      	add	r7, sp, #0
	BSP_LED_On(LED1);
 8000984:	2000      	movs	r0, #0
 8000986:	f000 f911 	bl	8000bac <BSP_LED_On>

}
 800098a:	bf00      	nop
 800098c:	bd80      	pop	{r7, pc}

0800098e <buttonReleased>:
void buttonReleased(void){
 800098e:	b580      	push	{r7, lr}
 8000990:	af00      	add	r7, sp, #0
	BSP_LED_Off(LED1);
 8000992:	2000      	movs	r0, #0
 8000994:	f000 f924 	bl	8000be0 <BSP_LED_Off>
}
 8000998:	bf00      	nop
 800099a:	bd80      	pop	{r7, pc}

0800099c <readKey>:

bool_t readKey(){
 800099c:	b480      	push	{r7}
 800099e:	af00      	add	r7, sp, #0

	if (key_state){
 80009a0:	4b06      	ldr	r3, [pc, #24]	; (80009bc <readKey+0x20>)
 80009a2:	781b      	ldrb	r3, [r3, #0]
 80009a4:	2b00      	cmp	r3, #0
 80009a6:	d004      	beq.n	80009b2 <readKey+0x16>
		key_state = false;
 80009a8:	4b04      	ldr	r3, [pc, #16]	; (80009bc <readKey+0x20>)
 80009aa:	2200      	movs	r2, #0
 80009ac:	701a      	strb	r2, [r3, #0]
		return true;
 80009ae:	2301      	movs	r3, #1
 80009b0:	e000      	b.n	80009b4 <readKey+0x18>
	}else {
		return false;
 80009b2:	2300      	movs	r3, #0
	}
}
 80009b4:	4618      	mov	r0, r3
 80009b6:	46bd      	mov	sp, r7
 80009b8:	bc80      	pop	{r7}
 80009ba:	4770      	bx	lr
 80009bc:	2000007c 	.word	0x2000007c

080009c0 <periodicBlinkInit>:
 * Function that initiates sequentially an array of leds.
 * @param delays Pointer to an array of defined delays.
 * @param duties Pointer to an array of duty cycles per led.
 * @param numLed length of the array of leds.
 */
void periodicBlinkInit(delay_t *delays,duty_cycle * duties, size_t numLed){
 80009c0:	b580      	push	{r7, lr}
 80009c2:	b088      	sub	sp, #32
 80009c4:	af00      	add	r7, sp, #0
 80009c6:	60f8      	str	r0, [r7, #12]
 80009c8:	60b9      	str	r1, [r7, #8]
 80009ca:	607a      	str	r2, [r7, #4]


	for (uint8_t i = 0; i < numLed; i++){
 80009cc:	2300      	movs	r3, #0
 80009ce:	77fb      	strb	r3, [r7, #31]
 80009d0:	e03a      	b.n	8000a48 <periodicBlinkInit+0x88>
		tick_t duration = (tick_t)(duties[i].duration)*(duties[i].dutyCycle);
 80009d2:	7ffb      	ldrb	r3, [r7, #31]
 80009d4:	011b      	lsls	r3, r3, #4
 80009d6:	68ba      	ldr	r2, [r7, #8]
 80009d8:	4413      	add	r3, r2
 80009da:	681b      	ldr	r3, [r3, #0]
 80009dc:	4618      	mov	r0, r3
 80009de:	f7ff fd6f 	bl	80004c0 <__aeabi_ui2f>
 80009e2:	7ffb      	ldrb	r3, [r7, #31]
 80009e4:	011b      	lsls	r3, r3, #4
 80009e6:	68ba      	ldr	r2, [r7, #8]
 80009e8:	4413      	add	r3, r2
 80009ea:	685b      	ldr	r3, [r3, #4]
 80009ec:	4619      	mov	r1, r3
 80009ee:	f7ff fbfd 	bl	80001ec <__aeabi_fmul>
 80009f2:	4603      	mov	r3, r0
 80009f4:	4618      	mov	r0, r3
 80009f6:	f7ff fdbb 	bl	8000570 <__aeabi_f2uiz>
 80009fa:	4603      	mov	r3, r0
 80009fc:	61bb      	str	r3, [r7, #24]
		BSP_LED_Init(duties[i].led);
 80009fe:	7ffb      	ldrb	r3, [r7, #31]
 8000a00:	011b      	lsls	r3, r3, #4
 8000a02:	68ba      	ldr	r2, [r7, #8]
 8000a04:	4413      	add	r3, r2
 8000a06:	891b      	ldrh	r3, [r3, #8]
 8000a08:	b2db      	uxtb	r3, r3
 8000a0a:	4618      	mov	r0, r3
 8000a0c:	f000 f87e 	bl	8000b0c <BSP_LED_Init>
		delayInit(&delays[i], duration);
 8000a10:	7ffa      	ldrb	r2, [r7, #31]
 8000a12:	4613      	mov	r3, r2
 8000a14:	005b      	lsls	r3, r3, #1
 8000a16:	4413      	add	r3, r2
 8000a18:	009b      	lsls	r3, r3, #2
 8000a1a:	461a      	mov	r2, r3
 8000a1c:	68fb      	ldr	r3, [r7, #12]
 8000a1e:	4413      	add	r3, r2
 8000a20:	69b9      	ldr	r1, [r7, #24]
 8000a22:	4618      	mov	r0, r3
 8000a24:	f000 f82e 	bl	8000a84 <delayInit>
		uint32_t dutyCounter = duties[i].counter*2;
 8000a28:	7ffb      	ldrb	r3, [r7, #31]
 8000a2a:	011b      	lsls	r3, r3, #4
 8000a2c:	68ba      	ldr	r2, [r7, #8]
 8000a2e:	4413      	add	r3, r2
 8000a30:	68db      	ldr	r3, [r3, #12]
 8000a32:	005b      	lsls	r3, r3, #1
 8000a34:	617b      	str	r3, [r7, #20]
		duties[i].counter = dutyCounter;
 8000a36:	7ffb      	ldrb	r3, [r7, #31]
 8000a38:	011b      	lsls	r3, r3, #4
 8000a3a:	68ba      	ldr	r2, [r7, #8]
 8000a3c:	4413      	add	r3, r2
 8000a3e:	697a      	ldr	r2, [r7, #20]
 8000a40:	60da      	str	r2, [r3, #12]
	for (uint8_t i = 0; i < numLed; i++){
 8000a42:	7ffb      	ldrb	r3, [r7, #31]
 8000a44:	3301      	adds	r3, #1
 8000a46:	77fb      	strb	r3, [r7, #31]
 8000a48:	7ffb      	ldrb	r3, [r7, #31]
 8000a4a:	687a      	ldr	r2, [r7, #4]
 8000a4c:	429a      	cmp	r2, r3
 8000a4e:	d8c0      	bhi.n	80009d2 <periodicBlinkInit+0x12>
	}

}
 8000a50:	bf00      	nop
 8000a52:	bf00      	nop
 8000a54:	3720      	adds	r7, #32
 8000a56:	46bd      	mov	sp, r7
 8000a58:	bd80      	pop	{r7, pc}

08000a5a <blink>:
 * @brief Performs blinking on demand given a leds.
 * Function that blinks sequentially an array of leds.
 * @param delays Pointer to an array of defined delays.
 * @param duties Pointer to an array of duty cycles per led.
 */
void blink(delay_t *delay,duty_cycle * duty){
 8000a5a:	b580      	push	{r7, lr}
 8000a5c:	b082      	sub	sp, #8
 8000a5e:	af00      	add	r7, sp, #0
 8000a60:	6078      	str	r0, [r7, #4]
 8000a62:	6039      	str	r1, [r7, #0]

	if (delayRead(delay)){
 8000a64:	6878      	ldr	r0, [r7, #4]
 8000a66:	f000 f825 	bl	8000ab4 <delayRead>
 8000a6a:	4603      	mov	r3, r0
 8000a6c:	2b00      	cmp	r3, #0
 8000a6e:	d005      	beq.n	8000a7c <blink+0x22>

		BSP_LED_Toggle(duty->led);
 8000a70:	683b      	ldr	r3, [r7, #0]
 8000a72:	891b      	ldrh	r3, [r3, #8]
 8000a74:	b2db      	uxtb	r3, r3
 8000a76:	4618      	mov	r0, r3
 8000a78:	f000 f8cc 	bl	8000c14 <BSP_LED_Toggle>
	}
}
 8000a7c:	bf00      	nop
 8000a7e:	3708      	adds	r7, #8
 8000a80:	46bd      	mov	sp, r7
 8000a82:	bd80      	pop	{r7, pc}

08000a84 <delayInit>:
 * Function that initiates a delay.
 * @param delay Pointer to a defined delay struct.
 * @param duration in milliseconds.
 * @note if duration is 0 or a negative number, it defaults to DEFAULT_DELAY.
 */
void delayInit(delay_t *delay, tick_t duration){
 8000a84:	b480      	push	{r7}
 8000a86:	b083      	sub	sp, #12
 8000a88:	af00      	add	r7, sp, #0
 8000a8a:	6078      	str	r0, [r7, #4]
 8000a8c:	6039      	str	r1, [r7, #0]
	if (duration <= 0){
 8000a8e:	683b      	ldr	r3, [r7, #0]
 8000a90:	2b00      	cmp	r3, #0
 8000a92:	d101      	bne.n	8000a98 <delayInit+0x14>
		duration = DEFAULT_DELAY;
 8000a94:	2364      	movs	r3, #100	; 0x64
 8000a96:	603b      	str	r3, [r7, #0]
	}
	delay->duration = duration;
 8000a98:	687b      	ldr	r3, [r7, #4]
 8000a9a:	683a      	ldr	r2, [r7, #0]
 8000a9c:	605a      	str	r2, [r3, #4]
	delay->running = false;
 8000a9e:	687b      	ldr	r3, [r7, #4]
 8000aa0:	2200      	movs	r2, #0
 8000aa2:	721a      	strb	r2, [r3, #8]
	delay->startTime = 0;
 8000aa4:	687b      	ldr	r3, [r7, #4]
 8000aa6:	2200      	movs	r2, #0
 8000aa8:	601a      	str	r2, [r3, #0]

}
 8000aaa:	bf00      	nop
 8000aac:	370c      	adds	r7, #12
 8000aae:	46bd      	mov	sp, r7
 8000ab0:	bc80      	pop	{r7}
 8000ab2:	4770      	bx	lr

08000ab4 <delayRead>:
 * @brief Checks if an specific delay has elapsed.
 * Function that checks the current status of a delay and updates its values.
 * @param delay Pointer to a defined delay struct.
 * @retval bool indicating running state.
 */
bool_t delayRead(delay_t *delay){
 8000ab4:	b580      	push	{r7, lr}
 8000ab6:	b084      	sub	sp, #16
 8000ab8:	af00      	add	r7, sp, #0
 8000aba:	6078      	str	r0, [r7, #4]

	tick_t currentTime = HAL_GetTick();
 8000abc:	f000 f9e6 	bl	8000e8c <HAL_GetTick>
 8000ac0:	60f8      	str	r0, [r7, #12]
	bool isRunning = delay->running;
 8000ac2:	687b      	ldr	r3, [r7, #4]
 8000ac4:	7a1b      	ldrb	r3, [r3, #8]
 8000ac6:	72fb      	strb	r3, [r7, #11]

	if (isRunning && (currentTime - delay->startTime >= delay->duration)){
 8000ac8:	7afb      	ldrb	r3, [r7, #11]
 8000aca:	2b00      	cmp	r3, #0
 8000acc:	d00c      	beq.n	8000ae8 <delayRead+0x34>
 8000ace:	687b      	ldr	r3, [r7, #4]
 8000ad0:	681b      	ldr	r3, [r3, #0]
 8000ad2:	68fa      	ldr	r2, [r7, #12]
 8000ad4:	1ad2      	subs	r2, r2, r3
 8000ad6:	687b      	ldr	r3, [r7, #4]
 8000ad8:	685b      	ldr	r3, [r3, #4]
 8000ada:	429a      	cmp	r2, r3
 8000adc:	d304      	bcc.n	8000ae8 <delayRead+0x34>
		delay->running = false;
 8000ade:	687b      	ldr	r3, [r7, #4]
 8000ae0:	2200      	movs	r2, #0
 8000ae2:	721a      	strb	r2, [r3, #8]
		return true;
 8000ae4:	2301      	movs	r3, #1
 8000ae6:	e00c      	b.n	8000b02 <delayRead+0x4e>
	}

	if (!isRunning) {
 8000ae8:	7afb      	ldrb	r3, [r7, #11]
 8000aea:	f083 0301 	eor.w	r3, r3, #1
 8000aee:	b2db      	uxtb	r3, r3
 8000af0:	2b00      	cmp	r3, #0
 8000af2:	d005      	beq.n	8000b00 <delayRead+0x4c>
		delay->running = true;
 8000af4:	687b      	ldr	r3, [r7, #4]
 8000af6:	2201      	movs	r2, #1
 8000af8:	721a      	strb	r2, [r3, #8]
		delay->startTime = currentTime;
 8000afa:	687b      	ldr	r3, [r7, #4]
 8000afc:	68fa      	ldr	r2, [r7, #12]
 8000afe:	601a      	str	r2, [r3, #0]

	}
	return false;
 8000b00:	2300      	movs	r3, #0
}
 8000b02:	4618      	mov	r0, r3
 8000b04:	3710      	adds	r7, #16
 8000b06:	46bd      	mov	sp, r7
 8000b08:	bd80      	pop	{r7, pc}
	...

08000b0c <BSP_LED_Init>:
  *     @arg  LED1
  *     @arg  LED2
  *     @arg  LED3
  */
void BSP_LED_Init(Led_TypeDef Led)
{
 8000b0c:	b580      	push	{r7, lr}
 8000b0e:	b08a      	sub	sp, #40	; 0x28
 8000b10:	af00      	add	r7, sp, #0
 8000b12:	4603      	mov	r3, r0
 8000b14:	71fb      	strb	r3, [r7, #7]
  GPIO_InitTypeDef  GPIO_InitStruct;
  
  /* Enable the GPIO_LED Clock */
  LEDx_GPIO_CLK_ENABLE(Led);
 8000b16:	79fb      	ldrb	r3, [r7, #7]
 8000b18:	2b00      	cmp	r3, #0
 8000b1a:	d10e      	bne.n	8000b3a <BSP_LED_Init+0x2e>
 8000b1c:	2300      	movs	r3, #0
 8000b1e:	613b      	str	r3, [r7, #16]
 8000b20:	4b1f      	ldr	r3, [pc, #124]	; (8000ba0 <BSP_LED_Init+0x94>)
 8000b22:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b24:	4a1e      	ldr	r2, [pc, #120]	; (8000ba0 <BSP_LED_Init+0x94>)
 8000b26:	f043 0302 	orr.w	r3, r3, #2
 8000b2a:	6313      	str	r3, [r2, #48]	; 0x30
 8000b2c:	4b1c      	ldr	r3, [pc, #112]	; (8000ba0 <BSP_LED_Init+0x94>)
 8000b2e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b30:	f003 0302 	and.w	r3, r3, #2
 8000b34:	613b      	str	r3, [r7, #16]
 8000b36:	693b      	ldr	r3, [r7, #16]
 8000b38:	e00d      	b.n	8000b56 <BSP_LED_Init+0x4a>
 8000b3a:	2300      	movs	r3, #0
 8000b3c:	60fb      	str	r3, [r7, #12]
 8000b3e:	4b18      	ldr	r3, [pc, #96]	; (8000ba0 <BSP_LED_Init+0x94>)
 8000b40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b42:	4a17      	ldr	r2, [pc, #92]	; (8000ba0 <BSP_LED_Init+0x94>)
 8000b44:	f043 0302 	orr.w	r3, r3, #2
 8000b48:	6313      	str	r3, [r2, #48]	; 0x30
 8000b4a:	4b15      	ldr	r3, [pc, #84]	; (8000ba0 <BSP_LED_Init+0x94>)
 8000b4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b4e:	f003 0302 	and.w	r3, r3, #2
 8000b52:	60fb      	str	r3, [r7, #12]
 8000b54:	68fb      	ldr	r3, [r7, #12]
  
  /* Configure the GPIO_LED pin */
  GPIO_InitStruct.Pin = GPIO_PIN[Led];
 8000b56:	79fb      	ldrb	r3, [r7, #7]
 8000b58:	4a12      	ldr	r2, [pc, #72]	; (8000ba4 <BSP_LED_Init+0x98>)
 8000b5a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000b5e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b60:	2301      	movs	r3, #1
 8000b62:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b64:	2300      	movs	r3, #0
 8000b66:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FAST;
 8000b68:	2302      	movs	r3, #2
 8000b6a:	623b      	str	r3, [r7, #32]
  
  HAL_GPIO_Init(GPIO_PORT[Led], &GPIO_InitStruct);
 8000b6c:	79fb      	ldrb	r3, [r7, #7]
 8000b6e:	4a0e      	ldr	r2, [pc, #56]	; (8000ba8 <BSP_LED_Init+0x9c>)
 8000b70:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000b74:	f107 0214 	add.w	r2, r7, #20
 8000b78:	4611      	mov	r1, r2
 8000b7a:	4618      	mov	r0, r3
 8000b7c:	f000 fa9e 	bl	80010bc <HAL_GPIO_Init>
  HAL_GPIO_WritePin(GPIO_PORT[Led], GPIO_PIN[Led], GPIO_PIN_RESET); 
 8000b80:	79fb      	ldrb	r3, [r7, #7]
 8000b82:	4a09      	ldr	r2, [pc, #36]	; (8000ba8 <BSP_LED_Init+0x9c>)
 8000b84:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8000b88:	79fb      	ldrb	r3, [r7, #7]
 8000b8a:	4a06      	ldr	r2, [pc, #24]	; (8000ba4 <BSP_LED_Init+0x98>)
 8000b8c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000b90:	2200      	movs	r2, #0
 8000b92:	4619      	mov	r1, r3
 8000b94:	f000 fc53 	bl	800143e <HAL_GPIO_WritePin>
}
 8000b98:	bf00      	nop
 8000b9a:	3728      	adds	r7, #40	; 0x28
 8000b9c:	46bd      	mov	sp, r7
 8000b9e:	bd80      	pop	{r7, pc}
 8000ba0:	40023800 	.word	0x40023800
 8000ba4:	08002144 	.word	0x08002144
 8000ba8:	20000000 	.word	0x20000000

08000bac <BSP_LED_On>:
  * @param  Led: Specifies the Led to be set on. 
  *   This parameter can be one of following parameters:
  *     @arg LED2
  */
void BSP_LED_On(Led_TypeDef Led)
{
 8000bac:	b580      	push	{r7, lr}
 8000bae:	b082      	sub	sp, #8
 8000bb0:	af00      	add	r7, sp, #0
 8000bb2:	4603      	mov	r3, r0
 8000bb4:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_WritePin(GPIO_PORT[Led], GPIO_PIN[Led], GPIO_PIN_SET); 
 8000bb6:	79fb      	ldrb	r3, [r7, #7]
 8000bb8:	4a07      	ldr	r2, [pc, #28]	; (8000bd8 <BSP_LED_On+0x2c>)
 8000bba:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8000bbe:	79fb      	ldrb	r3, [r7, #7]
 8000bc0:	4a06      	ldr	r2, [pc, #24]	; (8000bdc <BSP_LED_On+0x30>)
 8000bc2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000bc6:	2201      	movs	r2, #1
 8000bc8:	4619      	mov	r1, r3
 8000bca:	f000 fc38 	bl	800143e <HAL_GPIO_WritePin>
}
 8000bce:	bf00      	nop
 8000bd0:	3708      	adds	r7, #8
 8000bd2:	46bd      	mov	sp, r7
 8000bd4:	bd80      	pop	{r7, pc}
 8000bd6:	bf00      	nop
 8000bd8:	20000000 	.word	0x20000000
 8000bdc:	08002144 	.word	0x08002144

08000be0 <BSP_LED_Off>:
  *     @arg  LED1
  *     @arg  LED2
  *     @arg  LED3
  */
void BSP_LED_Off(Led_TypeDef Led)
{
 8000be0:	b580      	push	{r7, lr}
 8000be2:	b082      	sub	sp, #8
 8000be4:	af00      	add	r7, sp, #0
 8000be6:	4603      	mov	r3, r0
 8000be8:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_WritePin(GPIO_PORT[Led], GPIO_PIN[Led], GPIO_PIN_RESET); 
 8000bea:	79fb      	ldrb	r3, [r7, #7]
 8000bec:	4a07      	ldr	r2, [pc, #28]	; (8000c0c <BSP_LED_Off+0x2c>)
 8000bee:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8000bf2:	79fb      	ldrb	r3, [r7, #7]
 8000bf4:	4a06      	ldr	r2, [pc, #24]	; (8000c10 <BSP_LED_Off+0x30>)
 8000bf6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000bfa:	2200      	movs	r2, #0
 8000bfc:	4619      	mov	r1, r3
 8000bfe:	f000 fc1e 	bl	800143e <HAL_GPIO_WritePin>
}
 8000c02:	bf00      	nop
 8000c04:	3708      	adds	r7, #8
 8000c06:	46bd      	mov	sp, r7
 8000c08:	bd80      	pop	{r7, pc}
 8000c0a:	bf00      	nop
 8000c0c:	20000000 	.word	0x20000000
 8000c10:	08002144 	.word	0x08002144

08000c14 <BSP_LED_Toggle>:
  *     @arg  LED1
  *     @arg  LED2
  *     @arg  LED3 
  */
void BSP_LED_Toggle(Led_TypeDef Led)
{
 8000c14:	b580      	push	{r7, lr}
 8000c16:	b082      	sub	sp, #8
 8000c18:	af00      	add	r7, sp, #0
 8000c1a:	4603      	mov	r3, r0
 8000c1c:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_TogglePin(GPIO_PORT[Led], GPIO_PIN[Led]);
 8000c1e:	79fb      	ldrb	r3, [r7, #7]
 8000c20:	4a07      	ldr	r2, [pc, #28]	; (8000c40 <BSP_LED_Toggle+0x2c>)
 8000c22:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000c26:	79fb      	ldrb	r3, [r7, #7]
 8000c28:	4906      	ldr	r1, [pc, #24]	; (8000c44 <BSP_LED_Toggle+0x30>)
 8000c2a:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8000c2e:	4619      	mov	r1, r3
 8000c30:	4610      	mov	r0, r2
 8000c32:	f000 fc1c 	bl	800146e <HAL_GPIO_TogglePin>
}
 8000c36:	bf00      	nop
 8000c38:	3708      	adds	r7, #8
 8000c3a:	46bd      	mov	sp, r7
 8000c3c:	bd80      	pop	{r7, pc}
 8000c3e:	bf00      	nop
 8000c40:	20000000 	.word	0x20000000
 8000c44:	08002144 	.word	0x08002144

08000c48 <BSP_PB_Init>:
  *     @arg BUTTON_MODE_GPIO: Button will be used as simple IO 
  *     @arg BUTTON_MODE_EXTI: Button will be connected to EXTI line with interrupt
  *                            generation capability  
  */
void BSP_PB_Init(Button_TypeDef Button, ButtonMode_TypeDef ButtonMode)
{
 8000c48:	b580      	push	{r7, lr}
 8000c4a:	b088      	sub	sp, #32
 8000c4c:	af00      	add	r7, sp, #0
 8000c4e:	4603      	mov	r3, r0
 8000c50:	460a      	mov	r2, r1
 8000c52:	71fb      	strb	r3, [r7, #7]
 8000c54:	4613      	mov	r3, r2
 8000c56:	71bb      	strb	r3, [r7, #6]
  GPIO_InitTypeDef GPIO_InitStruct;
  
  /* Enable the BUTTON Clock */
  BUTTONx_GPIO_CLK_ENABLE(Button);
 8000c58:	2300      	movs	r3, #0
 8000c5a:	60bb      	str	r3, [r7, #8]
 8000c5c:	4b23      	ldr	r3, [pc, #140]	; (8000cec <BSP_PB_Init+0xa4>)
 8000c5e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c60:	4a22      	ldr	r2, [pc, #136]	; (8000cec <BSP_PB_Init+0xa4>)
 8000c62:	f043 0304 	orr.w	r3, r3, #4
 8000c66:	6313      	str	r3, [r2, #48]	; 0x30
 8000c68:	4b20      	ldr	r3, [pc, #128]	; (8000cec <BSP_PB_Init+0xa4>)
 8000c6a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c6c:	f003 0304 	and.w	r3, r3, #4
 8000c70:	60bb      	str	r3, [r7, #8]
 8000c72:	68bb      	ldr	r3, [r7, #8]
  
  if(ButtonMode == BUTTON_MODE_GPIO)
 8000c74:	79bb      	ldrb	r3, [r7, #6]
 8000c76:	2b00      	cmp	r3, #0
 8000c78:	d112      	bne.n	8000ca0 <BSP_PB_Init+0x58>
  {
    /* Configure Button pin as input */
    GPIO_InitStruct.Pin = BUTTON_PIN[Button];
 8000c7a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000c7e:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000c80:	2300      	movs	r3, #0
 8000c82:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000c84:	2302      	movs	r3, #2
 8000c86:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FAST;
 8000c88:	2302      	movs	r3, #2
 8000c8a:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(BUTTON_PORT[Button], &GPIO_InitStruct);
 8000c8c:	79fb      	ldrb	r3, [r7, #7]
 8000c8e:	4a18      	ldr	r2, [pc, #96]	; (8000cf0 <BSP_PB_Init+0xa8>)
 8000c90:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000c94:	f107 020c 	add.w	r2, r7, #12
 8000c98:	4611      	mov	r1, r2
 8000c9a:	4618      	mov	r0, r3
 8000c9c:	f000 fa0e 	bl	80010bc <HAL_GPIO_Init>
  }
  
  if(ButtonMode == BUTTON_MODE_EXTI)
 8000ca0:	79bb      	ldrb	r3, [r7, #6]
 8000ca2:	2b01      	cmp	r3, #1
 8000ca4:	d11d      	bne.n	8000ce2 <BSP_PB_Init+0x9a>
  {
    /* Configure Button pin as input with External interrupt */
    GPIO_InitStruct.Pin = BUTTON_PIN[Button];
 8000ca6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000caa:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cac:	2300      	movs	r3, #0
 8000cae:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING; 
 8000cb0:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000cb4:	613b      	str	r3, [r7, #16]
    HAL_GPIO_Init(BUTTON_PORT[Button], &GPIO_InitStruct);
 8000cb6:	79fb      	ldrb	r3, [r7, #7]
 8000cb8:	4a0d      	ldr	r2, [pc, #52]	; (8000cf0 <BSP_PB_Init+0xa8>)
 8000cba:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000cbe:	f107 020c 	add.w	r2, r7, #12
 8000cc2:	4611      	mov	r1, r2
 8000cc4:	4618      	mov	r0, r3
 8000cc6:	f000 f9f9 	bl	80010bc <HAL_GPIO_Init>
    
    /* Enable and set Button EXTI Interrupt to the lowest priority */
    HAL_NVIC_SetPriority((IRQn_Type)(BUTTON_IRQn[Button]), 0x0F, 0x00);
 8000cca:	2328      	movs	r3, #40	; 0x28
 8000ccc:	b25b      	sxtb	r3, r3
 8000cce:	2200      	movs	r2, #0
 8000cd0:	210f      	movs	r1, #15
 8000cd2:	4618      	mov	r0, r3
 8000cd4:	f000 f9bb 	bl	800104e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ((IRQn_Type)(BUTTON_IRQn[Button]));
 8000cd8:	2328      	movs	r3, #40	; 0x28
 8000cda:	b25b      	sxtb	r3, r3
 8000cdc:	4618      	mov	r0, r3
 8000cde:	f000 f9d2 	bl	8001086 <HAL_NVIC_EnableIRQ>
  }
}
 8000ce2:	bf00      	nop
 8000ce4:	3720      	adds	r7, #32
 8000ce6:	46bd      	mov	sp, r7
 8000ce8:	bd80      	pop	{r7, pc}
 8000cea:	bf00      	nop
 8000cec:	40023800 	.word	0x40023800
 8000cf0:	2000000c 	.word	0x2000000c

08000cf4 <BSP_PB_GetState>:
  * @param  Button: Specifies the Button to be checked.
  *   This parameter should be: BUTTON_USER  
  * @retval The Button GPIO pin value.
  */
uint32_t BSP_PB_GetState(Button_TypeDef Button)
{
 8000cf4:	b580      	push	{r7, lr}
 8000cf6:	b082      	sub	sp, #8
 8000cf8:	af00      	add	r7, sp, #0
 8000cfa:	4603      	mov	r3, r0
 8000cfc:	71fb      	strb	r3, [r7, #7]
  return HAL_GPIO_ReadPin(BUTTON_PORT[Button], BUTTON_PIN[Button]);
 8000cfe:	79fb      	ldrb	r3, [r7, #7]
 8000d00:	4a06      	ldr	r2, [pc, #24]	; (8000d1c <BSP_PB_GetState+0x28>)
 8000d02:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000d06:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000d0a:	4611      	mov	r1, r2
 8000d0c:	4618      	mov	r0, r3
 8000d0e:	f000 fb7f 	bl	8001410 <HAL_GPIO_ReadPin>
 8000d12:	4603      	mov	r3, r0
}
 8000d14:	4618      	mov	r0, r3
 8000d16:	3708      	adds	r7, #8
 8000d18:	46bd      	mov	sp, r7
 8000d1a:	bd80      	pop	{r7, pc}
 8000d1c:	2000000c 	.word	0x2000000c

08000d20 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000d20:	b480      	push	{r7}
 8000d22:	af00      	add	r7, sp, #0
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8000d24:	4b12      	ldr	r3, [pc, #72]	; (8000d70 <SystemInit+0x50>)
 8000d26:	681b      	ldr	r3, [r3, #0]
 8000d28:	4a11      	ldr	r2, [pc, #68]	; (8000d70 <SystemInit+0x50>)
 8000d2a:	f043 0301 	orr.w	r3, r3, #1
 8000d2e:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000d30:	4b0f      	ldr	r3, [pc, #60]	; (8000d70 <SystemInit+0x50>)
 8000d32:	2200      	movs	r2, #0
 8000d34:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8000d36:	4b0e      	ldr	r3, [pc, #56]	; (8000d70 <SystemInit+0x50>)
 8000d38:	681b      	ldr	r3, [r3, #0]
 8000d3a:	4a0d      	ldr	r2, [pc, #52]	; (8000d70 <SystemInit+0x50>)
 8000d3c:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8000d40:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000d44:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 8000d46:	4b0a      	ldr	r3, [pc, #40]	; (8000d70 <SystemInit+0x50>)
 8000d48:	4a0a      	ldr	r2, [pc, #40]	; (8000d74 <SystemInit+0x54>)
 8000d4a:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8000d4c:	4b08      	ldr	r3, [pc, #32]	; (8000d70 <SystemInit+0x50>)
 8000d4e:	681b      	ldr	r3, [r3, #0]
 8000d50:	4a07      	ldr	r2, [pc, #28]	; (8000d70 <SystemInit+0x50>)
 8000d52:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000d56:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8000d58:	4b05      	ldr	r3, [pc, #20]	; (8000d70 <SystemInit+0x50>)
 8000d5a:	2200      	movs	r2, #0
 8000d5c:	60da      	str	r2, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000d5e:	4b06      	ldr	r3, [pc, #24]	; (8000d78 <SystemInit+0x58>)
 8000d60:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000d64:	609a      	str	r2, [r3, #8]
#endif
}
 8000d66:	bf00      	nop
 8000d68:	46bd      	mov	sp, r7
 8000d6a:	bc80      	pop	{r7}
 8000d6c:	4770      	bx	lr
 8000d6e:	bf00      	nop
 8000d70:	40023800 	.word	0x40023800
 8000d74:	24003010 	.word	0x24003010
 8000d78:	e000ed00 	.word	0xe000ed00

08000d7c <NMI_Handler>:
  * @brief   This function handles NMI exception.
  * @param  None
  * @retval None
  */
void NMI_Handler(void)
{
 8000d7c:	b480      	push	{r7}
 8000d7e:	af00      	add	r7, sp, #0
}
 8000d80:	bf00      	nop
 8000d82:	46bd      	mov	sp, r7
 8000d84:	bc80      	pop	{r7}
 8000d86:	4770      	bx	lr

08000d88 <HardFault_Handler>:
  * @brief  This function handles Hard Fault exception.
  * @param  None
  * @retval None
  */
void HardFault_Handler(void)
{
 8000d88:	b480      	push	{r7}
 8000d8a:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Hard Fault exception occurs */
  while (1)
 8000d8c:	e7fe      	b.n	8000d8c <HardFault_Handler+0x4>

08000d8e <MemManage_Handler>:
  * @brief  This function handles Memory Manage exception.
  * @param  None
  * @retval None
  */
void MemManage_Handler(void)
{
 8000d8e:	b480      	push	{r7}
 8000d90:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Memory Manage exception occurs */
  while (1)
 8000d92:	e7fe      	b.n	8000d92 <MemManage_Handler+0x4>

08000d94 <BusFault_Handler>:
  * @brief  This function handles Bus Fault exception.
  * @param  None
  * @retval None
  */
void BusFault_Handler(void)
{
 8000d94:	b480      	push	{r7}
 8000d96:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Bus Fault exception occurs */
  while (1)
 8000d98:	e7fe      	b.n	8000d98 <BusFault_Handler+0x4>

08000d9a <UsageFault_Handler>:
  * @brief  This function handles Usage Fault exception.
  * @param  None
  * @retval None
  */
void UsageFault_Handler(void)
{
 8000d9a:	b480      	push	{r7}
 8000d9c:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Usage Fault exception occurs */
  while (1)
 8000d9e:	e7fe      	b.n	8000d9e <UsageFault_Handler+0x4>

08000da0 <SVC_Handler>:
  * @brief  This function handles SVCall exception.
  * @param  None
  * @retval None
  */
void SVC_Handler(void)
{
 8000da0:	b480      	push	{r7}
 8000da2:	af00      	add	r7, sp, #0
}
 8000da4:	bf00      	nop
 8000da6:	46bd      	mov	sp, r7
 8000da8:	bc80      	pop	{r7}
 8000daa:	4770      	bx	lr

08000dac <DebugMon_Handler>:
  * @brief  This function handles Debug Monitor exception.
  * @param  None
  * @retval None
  */
void DebugMon_Handler(void)
{
 8000dac:	b480      	push	{r7}
 8000dae:	af00      	add	r7, sp, #0
}
 8000db0:	bf00      	nop
 8000db2:	46bd      	mov	sp, r7
 8000db4:	bc80      	pop	{r7}
 8000db6:	4770      	bx	lr

08000db8 <PendSV_Handler>:
  * @brief  This function handles PendSVC exception.
  * @param  None
  * @retval None
  */
void PendSV_Handler(void)
{
 8000db8:	b480      	push	{r7}
 8000dba:	af00      	add	r7, sp, #0
}
 8000dbc:	bf00      	nop
 8000dbe:	46bd      	mov	sp, r7
 8000dc0:	bc80      	pop	{r7}
 8000dc2:	4770      	bx	lr

08000dc4 <SysTick_Handler>:
  * @brief  This function handles SysTick Handler.
  * @param  None
  * @retval None
  */
void SysTick_Handler(void)
{
 8000dc4:	b580      	push	{r7, lr}
 8000dc6:	af00      	add	r7, sp, #0
    HAL_IncTick();
 8000dc8:	f000 f84e 	bl	8000e68 <HAL_IncTick>
}
 8000dcc:	bf00      	nop
 8000dce:	bd80      	pop	{r7, pc}

08000dd0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000dd0:	b580      	push	{r7, lr}
 8000dd2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000dd4:	4b0b      	ldr	r3, [pc, #44]	; (8000e04 <HAL_Init+0x34>)
 8000dd6:	681b      	ldr	r3, [r3, #0]
 8000dd8:	4a0a      	ldr	r2, [pc, #40]	; (8000e04 <HAL_Init+0x34>)
 8000dda:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000dde:	6013      	str	r3, [r2, #0]
#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000de0:	4b08      	ldr	r3, [pc, #32]	; (8000e04 <HAL_Init+0x34>)
 8000de2:	681b      	ldr	r3, [r3, #0]
 8000de4:	4a07      	ldr	r2, [pc, #28]	; (8000e04 <HAL_Init+0x34>)
 8000de6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000dea:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000dec:	2003      	movs	r0, #3
 8000dee:	f000 f923 	bl	8001038 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000df2:	200f      	movs	r0, #15
 8000df4:	f000 f808 	bl	8000e08 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000df8:	f000 fb52 	bl	80014a0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000dfc:	2300      	movs	r3, #0
}
 8000dfe:	4618      	mov	r0, r3
 8000e00:	bd80      	pop	{r7, pc}
 8000e02:	bf00      	nop
 8000e04:	40023c00 	.word	0x40023c00

08000e08 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000e08:	b580      	push	{r7, lr}
 8000e0a:	b082      	sub	sp, #8
 8000e0c:	af00      	add	r7, sp, #0
 8000e0e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000e10:	4b12      	ldr	r3, [pc, #72]	; (8000e5c <HAL_InitTick+0x54>)
 8000e12:	681a      	ldr	r2, [r3, #0]
 8000e14:	4b12      	ldr	r3, [pc, #72]	; (8000e60 <HAL_InitTick+0x58>)
 8000e16:	781b      	ldrb	r3, [r3, #0]
 8000e18:	4619      	mov	r1, r3
 8000e1a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000e1e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000e22:	fbb2 f3f3 	udiv	r3, r2, r3
 8000e26:	4618      	mov	r0, r3
 8000e28:	f000 f93b 	bl	80010a2 <HAL_SYSTICK_Config>
 8000e2c:	4603      	mov	r3, r0
 8000e2e:	2b00      	cmp	r3, #0
 8000e30:	d001      	beq.n	8000e36 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000e32:	2301      	movs	r3, #1
 8000e34:	e00e      	b.n	8000e54 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000e36:	687b      	ldr	r3, [r7, #4]
 8000e38:	2b0f      	cmp	r3, #15
 8000e3a:	d80a      	bhi.n	8000e52 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000e3c:	2200      	movs	r2, #0
 8000e3e:	6879      	ldr	r1, [r7, #4]
 8000e40:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000e44:	f000 f903 	bl	800104e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000e48:	4a06      	ldr	r2, [pc, #24]	; (8000e64 <HAL_InitTick+0x5c>)
 8000e4a:	687b      	ldr	r3, [r7, #4]
 8000e4c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000e4e:	2300      	movs	r3, #0
 8000e50:	e000      	b.n	8000e54 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000e52:	2301      	movs	r3, #1
}
 8000e54:	4618      	mov	r0, r3
 8000e56:	3708      	adds	r7, #8
 8000e58:	46bd      	mov	sp, r7
 8000e5a:	bd80      	pop	{r7, pc}
 8000e5c:	20000010 	.word	0x20000010
 8000e60:	20000018 	.word	0x20000018
 8000e64:	20000014 	.word	0x20000014

08000e68 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000e68:	b480      	push	{r7}
 8000e6a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000e6c:	4b05      	ldr	r3, [pc, #20]	; (8000e84 <HAL_IncTick+0x1c>)
 8000e6e:	781b      	ldrb	r3, [r3, #0]
 8000e70:	461a      	mov	r2, r3
 8000e72:	4b05      	ldr	r3, [pc, #20]	; (8000e88 <HAL_IncTick+0x20>)
 8000e74:	681b      	ldr	r3, [r3, #0]
 8000e76:	4413      	add	r3, r2
 8000e78:	4a03      	ldr	r2, [pc, #12]	; (8000e88 <HAL_IncTick+0x20>)
 8000e7a:	6013      	str	r3, [r2, #0]
}
 8000e7c:	bf00      	nop
 8000e7e:	46bd      	mov	sp, r7
 8000e80:	bc80      	pop	{r7}
 8000e82:	4770      	bx	lr
 8000e84:	20000018 	.word	0x20000018
 8000e88:	20000080 	.word	0x20000080

08000e8c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000e8c:	b480      	push	{r7}
 8000e8e:	af00      	add	r7, sp, #0
  return uwTick;
 8000e90:	4b02      	ldr	r3, [pc, #8]	; (8000e9c <HAL_GetTick+0x10>)
 8000e92:	681b      	ldr	r3, [r3, #0]
}
 8000e94:	4618      	mov	r0, r3
 8000e96:	46bd      	mov	sp, r7
 8000e98:	bc80      	pop	{r7}
 8000e9a:	4770      	bx	lr
 8000e9c:	20000080 	.word	0x20000080

08000ea0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ea0:	b480      	push	{r7}
 8000ea2:	b085      	sub	sp, #20
 8000ea4:	af00      	add	r7, sp, #0
 8000ea6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000ea8:	687b      	ldr	r3, [r7, #4]
 8000eaa:	f003 0307 	and.w	r3, r3, #7
 8000eae:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000eb0:	4b0c      	ldr	r3, [pc, #48]	; (8000ee4 <__NVIC_SetPriorityGrouping+0x44>)
 8000eb2:	68db      	ldr	r3, [r3, #12]
 8000eb4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000eb6:	68ba      	ldr	r2, [r7, #8]
 8000eb8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000ebc:	4013      	ands	r3, r2
 8000ebe:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000ec0:	68fb      	ldr	r3, [r7, #12]
 8000ec2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000ec4:	68bb      	ldr	r3, [r7, #8]
 8000ec6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000ec8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000ecc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000ed0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000ed2:	4a04      	ldr	r2, [pc, #16]	; (8000ee4 <__NVIC_SetPriorityGrouping+0x44>)
 8000ed4:	68bb      	ldr	r3, [r7, #8]
 8000ed6:	60d3      	str	r3, [r2, #12]
}
 8000ed8:	bf00      	nop
 8000eda:	3714      	adds	r7, #20
 8000edc:	46bd      	mov	sp, r7
 8000ede:	bc80      	pop	{r7}
 8000ee0:	4770      	bx	lr
 8000ee2:	bf00      	nop
 8000ee4:	e000ed00 	.word	0xe000ed00

08000ee8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000ee8:	b480      	push	{r7}
 8000eea:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000eec:	4b04      	ldr	r3, [pc, #16]	; (8000f00 <__NVIC_GetPriorityGrouping+0x18>)
 8000eee:	68db      	ldr	r3, [r3, #12]
 8000ef0:	0a1b      	lsrs	r3, r3, #8
 8000ef2:	f003 0307 	and.w	r3, r3, #7
}
 8000ef6:	4618      	mov	r0, r3
 8000ef8:	46bd      	mov	sp, r7
 8000efa:	bc80      	pop	{r7}
 8000efc:	4770      	bx	lr
 8000efe:	bf00      	nop
 8000f00:	e000ed00 	.word	0xe000ed00

08000f04 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000f04:	b480      	push	{r7}
 8000f06:	b083      	sub	sp, #12
 8000f08:	af00      	add	r7, sp, #0
 8000f0a:	4603      	mov	r3, r0
 8000f0c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f0e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f12:	2b00      	cmp	r3, #0
 8000f14:	db0b      	blt.n	8000f2e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000f16:	79fb      	ldrb	r3, [r7, #7]
 8000f18:	f003 021f 	and.w	r2, r3, #31
 8000f1c:	4906      	ldr	r1, [pc, #24]	; (8000f38 <__NVIC_EnableIRQ+0x34>)
 8000f1e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f22:	095b      	lsrs	r3, r3, #5
 8000f24:	2001      	movs	r0, #1
 8000f26:	fa00 f202 	lsl.w	r2, r0, r2
 8000f2a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000f2e:	bf00      	nop
 8000f30:	370c      	adds	r7, #12
 8000f32:	46bd      	mov	sp, r7
 8000f34:	bc80      	pop	{r7}
 8000f36:	4770      	bx	lr
 8000f38:	e000e100 	.word	0xe000e100

08000f3c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000f3c:	b480      	push	{r7}
 8000f3e:	b083      	sub	sp, #12
 8000f40:	af00      	add	r7, sp, #0
 8000f42:	4603      	mov	r3, r0
 8000f44:	6039      	str	r1, [r7, #0]
 8000f46:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f48:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f4c:	2b00      	cmp	r3, #0
 8000f4e:	db0a      	blt.n	8000f66 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f50:	683b      	ldr	r3, [r7, #0]
 8000f52:	b2da      	uxtb	r2, r3
 8000f54:	490c      	ldr	r1, [pc, #48]	; (8000f88 <__NVIC_SetPriority+0x4c>)
 8000f56:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f5a:	0112      	lsls	r2, r2, #4
 8000f5c:	b2d2      	uxtb	r2, r2
 8000f5e:	440b      	add	r3, r1
 8000f60:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000f64:	e00a      	b.n	8000f7c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f66:	683b      	ldr	r3, [r7, #0]
 8000f68:	b2da      	uxtb	r2, r3
 8000f6a:	4908      	ldr	r1, [pc, #32]	; (8000f8c <__NVIC_SetPriority+0x50>)
 8000f6c:	79fb      	ldrb	r3, [r7, #7]
 8000f6e:	f003 030f 	and.w	r3, r3, #15
 8000f72:	3b04      	subs	r3, #4
 8000f74:	0112      	lsls	r2, r2, #4
 8000f76:	b2d2      	uxtb	r2, r2
 8000f78:	440b      	add	r3, r1
 8000f7a:	761a      	strb	r2, [r3, #24]
}
 8000f7c:	bf00      	nop
 8000f7e:	370c      	adds	r7, #12
 8000f80:	46bd      	mov	sp, r7
 8000f82:	bc80      	pop	{r7}
 8000f84:	4770      	bx	lr
 8000f86:	bf00      	nop
 8000f88:	e000e100 	.word	0xe000e100
 8000f8c:	e000ed00 	.word	0xe000ed00

08000f90 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000f90:	b480      	push	{r7}
 8000f92:	b089      	sub	sp, #36	; 0x24
 8000f94:	af00      	add	r7, sp, #0
 8000f96:	60f8      	str	r0, [r7, #12]
 8000f98:	60b9      	str	r1, [r7, #8]
 8000f9a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000f9c:	68fb      	ldr	r3, [r7, #12]
 8000f9e:	f003 0307 	and.w	r3, r3, #7
 8000fa2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000fa4:	69fb      	ldr	r3, [r7, #28]
 8000fa6:	f1c3 0307 	rsb	r3, r3, #7
 8000faa:	2b04      	cmp	r3, #4
 8000fac:	bf28      	it	cs
 8000fae:	2304      	movcs	r3, #4
 8000fb0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000fb2:	69fb      	ldr	r3, [r7, #28]
 8000fb4:	3304      	adds	r3, #4
 8000fb6:	2b06      	cmp	r3, #6
 8000fb8:	d902      	bls.n	8000fc0 <NVIC_EncodePriority+0x30>
 8000fba:	69fb      	ldr	r3, [r7, #28]
 8000fbc:	3b03      	subs	r3, #3
 8000fbe:	e000      	b.n	8000fc2 <NVIC_EncodePriority+0x32>
 8000fc0:	2300      	movs	r3, #0
 8000fc2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000fc4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000fc8:	69bb      	ldr	r3, [r7, #24]
 8000fca:	fa02 f303 	lsl.w	r3, r2, r3
 8000fce:	43da      	mvns	r2, r3
 8000fd0:	68bb      	ldr	r3, [r7, #8]
 8000fd2:	401a      	ands	r2, r3
 8000fd4:	697b      	ldr	r3, [r7, #20]
 8000fd6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000fd8:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000fdc:	697b      	ldr	r3, [r7, #20]
 8000fde:	fa01 f303 	lsl.w	r3, r1, r3
 8000fe2:	43d9      	mvns	r1, r3
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000fe8:	4313      	orrs	r3, r2
         );
}
 8000fea:	4618      	mov	r0, r3
 8000fec:	3724      	adds	r7, #36	; 0x24
 8000fee:	46bd      	mov	sp, r7
 8000ff0:	bc80      	pop	{r7}
 8000ff2:	4770      	bx	lr

08000ff4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000ff4:	b580      	push	{r7, lr}
 8000ff6:	b082      	sub	sp, #8
 8000ff8:	af00      	add	r7, sp, #0
 8000ffa:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	3b01      	subs	r3, #1
 8001000:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001004:	d301      	bcc.n	800100a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001006:	2301      	movs	r3, #1
 8001008:	e00f      	b.n	800102a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800100a:	4a0a      	ldr	r2, [pc, #40]	; (8001034 <SysTick_Config+0x40>)
 800100c:	687b      	ldr	r3, [r7, #4]
 800100e:	3b01      	subs	r3, #1
 8001010:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001012:	210f      	movs	r1, #15
 8001014:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001018:	f7ff ff90 	bl	8000f3c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800101c:	4b05      	ldr	r3, [pc, #20]	; (8001034 <SysTick_Config+0x40>)
 800101e:	2200      	movs	r2, #0
 8001020:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001022:	4b04      	ldr	r3, [pc, #16]	; (8001034 <SysTick_Config+0x40>)
 8001024:	2207      	movs	r2, #7
 8001026:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001028:	2300      	movs	r3, #0
}
 800102a:	4618      	mov	r0, r3
 800102c:	3708      	adds	r7, #8
 800102e:	46bd      	mov	sp, r7
 8001030:	bd80      	pop	{r7, pc}
 8001032:	bf00      	nop
 8001034:	e000e010 	.word	0xe000e010

08001038 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001038:	b580      	push	{r7, lr}
 800103a:	b082      	sub	sp, #8
 800103c:	af00      	add	r7, sp, #0
 800103e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001040:	6878      	ldr	r0, [r7, #4]
 8001042:	f7ff ff2d 	bl	8000ea0 <__NVIC_SetPriorityGrouping>
}
 8001046:	bf00      	nop
 8001048:	3708      	adds	r7, #8
 800104a:	46bd      	mov	sp, r7
 800104c:	bd80      	pop	{r7, pc}

0800104e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800104e:	b580      	push	{r7, lr}
 8001050:	b086      	sub	sp, #24
 8001052:	af00      	add	r7, sp, #0
 8001054:	4603      	mov	r3, r0
 8001056:	60b9      	str	r1, [r7, #8]
 8001058:	607a      	str	r2, [r7, #4]
 800105a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800105c:	2300      	movs	r3, #0
 800105e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001060:	f7ff ff42 	bl	8000ee8 <__NVIC_GetPriorityGrouping>
 8001064:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001066:	687a      	ldr	r2, [r7, #4]
 8001068:	68b9      	ldr	r1, [r7, #8]
 800106a:	6978      	ldr	r0, [r7, #20]
 800106c:	f7ff ff90 	bl	8000f90 <NVIC_EncodePriority>
 8001070:	4602      	mov	r2, r0
 8001072:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001076:	4611      	mov	r1, r2
 8001078:	4618      	mov	r0, r3
 800107a:	f7ff ff5f 	bl	8000f3c <__NVIC_SetPriority>
}
 800107e:	bf00      	nop
 8001080:	3718      	adds	r7, #24
 8001082:	46bd      	mov	sp, r7
 8001084:	bd80      	pop	{r7, pc}

08001086 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001086:	b580      	push	{r7, lr}
 8001088:	b082      	sub	sp, #8
 800108a:	af00      	add	r7, sp, #0
 800108c:	4603      	mov	r3, r0
 800108e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001090:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001094:	4618      	mov	r0, r3
 8001096:	f7ff ff35 	bl	8000f04 <__NVIC_EnableIRQ>
}
 800109a:	bf00      	nop
 800109c:	3708      	adds	r7, #8
 800109e:	46bd      	mov	sp, r7
 80010a0:	bd80      	pop	{r7, pc}

080010a2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80010a2:	b580      	push	{r7, lr}
 80010a4:	b082      	sub	sp, #8
 80010a6:	af00      	add	r7, sp, #0
 80010a8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80010aa:	6878      	ldr	r0, [r7, #4]
 80010ac:	f7ff ffa2 	bl	8000ff4 <SysTick_Config>
 80010b0:	4603      	mov	r3, r0
}
 80010b2:	4618      	mov	r0, r3
 80010b4:	3708      	adds	r7, #8
 80010b6:	46bd      	mov	sp, r7
 80010b8:	bd80      	pop	{r7, pc}
	...

080010bc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80010bc:	b480      	push	{r7}
 80010be:	b089      	sub	sp, #36	; 0x24
 80010c0:	af00      	add	r7, sp, #0
 80010c2:	6078      	str	r0, [r7, #4]
 80010c4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80010c6:	2300      	movs	r3, #0
 80010c8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80010ca:	2300      	movs	r3, #0
 80010cc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80010ce:	2300      	movs	r3, #0
 80010d0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80010d2:	2300      	movs	r3, #0
 80010d4:	61fb      	str	r3, [r7, #28]
 80010d6:	e177      	b.n	80013c8 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80010d8:	2201      	movs	r2, #1
 80010da:	69fb      	ldr	r3, [r7, #28]
 80010dc:	fa02 f303 	lsl.w	r3, r2, r3
 80010e0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80010e2:	683b      	ldr	r3, [r7, #0]
 80010e4:	681b      	ldr	r3, [r3, #0]
 80010e6:	697a      	ldr	r2, [r7, #20]
 80010e8:	4013      	ands	r3, r2
 80010ea:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80010ec:	693a      	ldr	r2, [r7, #16]
 80010ee:	697b      	ldr	r3, [r7, #20]
 80010f0:	429a      	cmp	r2, r3
 80010f2:	f040 8166 	bne.w	80013c2 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80010f6:	683b      	ldr	r3, [r7, #0]
 80010f8:	685b      	ldr	r3, [r3, #4]
 80010fa:	f003 0303 	and.w	r3, r3, #3
 80010fe:	2b01      	cmp	r3, #1
 8001100:	d005      	beq.n	800110e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001102:	683b      	ldr	r3, [r7, #0]
 8001104:	685b      	ldr	r3, [r3, #4]
 8001106:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800110a:	2b02      	cmp	r3, #2
 800110c:	d130      	bne.n	8001170 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	689b      	ldr	r3, [r3, #8]
 8001112:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001114:	69fb      	ldr	r3, [r7, #28]
 8001116:	005b      	lsls	r3, r3, #1
 8001118:	2203      	movs	r2, #3
 800111a:	fa02 f303 	lsl.w	r3, r2, r3
 800111e:	43db      	mvns	r3, r3
 8001120:	69ba      	ldr	r2, [r7, #24]
 8001122:	4013      	ands	r3, r2
 8001124:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001126:	683b      	ldr	r3, [r7, #0]
 8001128:	68da      	ldr	r2, [r3, #12]
 800112a:	69fb      	ldr	r3, [r7, #28]
 800112c:	005b      	lsls	r3, r3, #1
 800112e:	fa02 f303 	lsl.w	r3, r2, r3
 8001132:	69ba      	ldr	r2, [r7, #24]
 8001134:	4313      	orrs	r3, r2
 8001136:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	69ba      	ldr	r2, [r7, #24]
 800113c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	685b      	ldr	r3, [r3, #4]
 8001142:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001144:	2201      	movs	r2, #1
 8001146:	69fb      	ldr	r3, [r7, #28]
 8001148:	fa02 f303 	lsl.w	r3, r2, r3
 800114c:	43db      	mvns	r3, r3
 800114e:	69ba      	ldr	r2, [r7, #24]
 8001150:	4013      	ands	r3, r2
 8001152:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001154:	683b      	ldr	r3, [r7, #0]
 8001156:	685b      	ldr	r3, [r3, #4]
 8001158:	091b      	lsrs	r3, r3, #4
 800115a:	f003 0201 	and.w	r2, r3, #1
 800115e:	69fb      	ldr	r3, [r7, #28]
 8001160:	fa02 f303 	lsl.w	r3, r2, r3
 8001164:	69ba      	ldr	r2, [r7, #24]
 8001166:	4313      	orrs	r3, r2
 8001168:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	69ba      	ldr	r2, [r7, #24]
 800116e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001170:	683b      	ldr	r3, [r7, #0]
 8001172:	685b      	ldr	r3, [r3, #4]
 8001174:	f003 0303 	and.w	r3, r3, #3
 8001178:	2b03      	cmp	r3, #3
 800117a:	d017      	beq.n	80011ac <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	68db      	ldr	r3, [r3, #12]
 8001180:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001182:	69fb      	ldr	r3, [r7, #28]
 8001184:	005b      	lsls	r3, r3, #1
 8001186:	2203      	movs	r2, #3
 8001188:	fa02 f303 	lsl.w	r3, r2, r3
 800118c:	43db      	mvns	r3, r3
 800118e:	69ba      	ldr	r2, [r7, #24]
 8001190:	4013      	ands	r3, r2
 8001192:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001194:	683b      	ldr	r3, [r7, #0]
 8001196:	689a      	ldr	r2, [r3, #8]
 8001198:	69fb      	ldr	r3, [r7, #28]
 800119a:	005b      	lsls	r3, r3, #1
 800119c:	fa02 f303 	lsl.w	r3, r2, r3
 80011a0:	69ba      	ldr	r2, [r7, #24]
 80011a2:	4313      	orrs	r3, r2
 80011a4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	69ba      	ldr	r2, [r7, #24]
 80011aa:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80011ac:	683b      	ldr	r3, [r7, #0]
 80011ae:	685b      	ldr	r3, [r3, #4]
 80011b0:	f003 0303 	and.w	r3, r3, #3
 80011b4:	2b02      	cmp	r3, #2
 80011b6:	d123      	bne.n	8001200 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80011b8:	69fb      	ldr	r3, [r7, #28]
 80011ba:	08da      	lsrs	r2, r3, #3
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	3208      	adds	r2, #8
 80011c0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80011c4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80011c6:	69fb      	ldr	r3, [r7, #28]
 80011c8:	f003 0307 	and.w	r3, r3, #7
 80011cc:	009b      	lsls	r3, r3, #2
 80011ce:	220f      	movs	r2, #15
 80011d0:	fa02 f303 	lsl.w	r3, r2, r3
 80011d4:	43db      	mvns	r3, r3
 80011d6:	69ba      	ldr	r2, [r7, #24]
 80011d8:	4013      	ands	r3, r2
 80011da:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80011dc:	683b      	ldr	r3, [r7, #0]
 80011de:	691a      	ldr	r2, [r3, #16]
 80011e0:	69fb      	ldr	r3, [r7, #28]
 80011e2:	f003 0307 	and.w	r3, r3, #7
 80011e6:	009b      	lsls	r3, r3, #2
 80011e8:	fa02 f303 	lsl.w	r3, r2, r3
 80011ec:	69ba      	ldr	r2, [r7, #24]
 80011ee:	4313      	orrs	r3, r2
 80011f0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80011f2:	69fb      	ldr	r3, [r7, #28]
 80011f4:	08da      	lsrs	r2, r3, #3
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	3208      	adds	r2, #8
 80011fa:	69b9      	ldr	r1, [r7, #24]
 80011fc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	681b      	ldr	r3, [r3, #0]
 8001204:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001206:	69fb      	ldr	r3, [r7, #28]
 8001208:	005b      	lsls	r3, r3, #1
 800120a:	2203      	movs	r2, #3
 800120c:	fa02 f303 	lsl.w	r3, r2, r3
 8001210:	43db      	mvns	r3, r3
 8001212:	69ba      	ldr	r2, [r7, #24]
 8001214:	4013      	ands	r3, r2
 8001216:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001218:	683b      	ldr	r3, [r7, #0]
 800121a:	685b      	ldr	r3, [r3, #4]
 800121c:	f003 0203 	and.w	r2, r3, #3
 8001220:	69fb      	ldr	r3, [r7, #28]
 8001222:	005b      	lsls	r3, r3, #1
 8001224:	fa02 f303 	lsl.w	r3, r2, r3
 8001228:	69ba      	ldr	r2, [r7, #24]
 800122a:	4313      	orrs	r3, r2
 800122c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	69ba      	ldr	r2, [r7, #24]
 8001232:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001234:	683b      	ldr	r3, [r7, #0]
 8001236:	685b      	ldr	r3, [r3, #4]
 8001238:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800123c:	2b00      	cmp	r3, #0
 800123e:	f000 80c0 	beq.w	80013c2 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001242:	2300      	movs	r3, #0
 8001244:	60fb      	str	r3, [r7, #12]
 8001246:	4b65      	ldr	r3, [pc, #404]	; (80013dc <HAL_GPIO_Init+0x320>)
 8001248:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800124a:	4a64      	ldr	r2, [pc, #400]	; (80013dc <HAL_GPIO_Init+0x320>)
 800124c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001250:	6453      	str	r3, [r2, #68]	; 0x44
 8001252:	4b62      	ldr	r3, [pc, #392]	; (80013dc <HAL_GPIO_Init+0x320>)
 8001254:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001256:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800125a:	60fb      	str	r3, [r7, #12]
 800125c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800125e:	4a60      	ldr	r2, [pc, #384]	; (80013e0 <HAL_GPIO_Init+0x324>)
 8001260:	69fb      	ldr	r3, [r7, #28]
 8001262:	089b      	lsrs	r3, r3, #2
 8001264:	3302      	adds	r3, #2
 8001266:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800126a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800126c:	69fb      	ldr	r3, [r7, #28]
 800126e:	f003 0303 	and.w	r3, r3, #3
 8001272:	009b      	lsls	r3, r3, #2
 8001274:	220f      	movs	r2, #15
 8001276:	fa02 f303 	lsl.w	r3, r2, r3
 800127a:	43db      	mvns	r3, r3
 800127c:	69ba      	ldr	r2, [r7, #24]
 800127e:	4013      	ands	r3, r2
 8001280:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	4a57      	ldr	r2, [pc, #348]	; (80013e4 <HAL_GPIO_Init+0x328>)
 8001286:	4293      	cmp	r3, r2
 8001288:	d037      	beq.n	80012fa <HAL_GPIO_Init+0x23e>
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	4a56      	ldr	r2, [pc, #344]	; (80013e8 <HAL_GPIO_Init+0x32c>)
 800128e:	4293      	cmp	r3, r2
 8001290:	d031      	beq.n	80012f6 <HAL_GPIO_Init+0x23a>
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	4a55      	ldr	r2, [pc, #340]	; (80013ec <HAL_GPIO_Init+0x330>)
 8001296:	4293      	cmp	r3, r2
 8001298:	d02b      	beq.n	80012f2 <HAL_GPIO_Init+0x236>
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	4a54      	ldr	r2, [pc, #336]	; (80013f0 <HAL_GPIO_Init+0x334>)
 800129e:	4293      	cmp	r3, r2
 80012a0:	d025      	beq.n	80012ee <HAL_GPIO_Init+0x232>
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	4a53      	ldr	r2, [pc, #332]	; (80013f4 <HAL_GPIO_Init+0x338>)
 80012a6:	4293      	cmp	r3, r2
 80012a8:	d01f      	beq.n	80012ea <HAL_GPIO_Init+0x22e>
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	4a52      	ldr	r2, [pc, #328]	; (80013f8 <HAL_GPIO_Init+0x33c>)
 80012ae:	4293      	cmp	r3, r2
 80012b0:	d019      	beq.n	80012e6 <HAL_GPIO_Init+0x22a>
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	4a51      	ldr	r2, [pc, #324]	; (80013fc <HAL_GPIO_Init+0x340>)
 80012b6:	4293      	cmp	r3, r2
 80012b8:	d013      	beq.n	80012e2 <HAL_GPIO_Init+0x226>
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	4a50      	ldr	r2, [pc, #320]	; (8001400 <HAL_GPIO_Init+0x344>)
 80012be:	4293      	cmp	r3, r2
 80012c0:	d00d      	beq.n	80012de <HAL_GPIO_Init+0x222>
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	4a4f      	ldr	r2, [pc, #316]	; (8001404 <HAL_GPIO_Init+0x348>)
 80012c6:	4293      	cmp	r3, r2
 80012c8:	d007      	beq.n	80012da <HAL_GPIO_Init+0x21e>
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	4a4e      	ldr	r2, [pc, #312]	; (8001408 <HAL_GPIO_Init+0x34c>)
 80012ce:	4293      	cmp	r3, r2
 80012d0:	d101      	bne.n	80012d6 <HAL_GPIO_Init+0x21a>
 80012d2:	2309      	movs	r3, #9
 80012d4:	e012      	b.n	80012fc <HAL_GPIO_Init+0x240>
 80012d6:	230a      	movs	r3, #10
 80012d8:	e010      	b.n	80012fc <HAL_GPIO_Init+0x240>
 80012da:	2308      	movs	r3, #8
 80012dc:	e00e      	b.n	80012fc <HAL_GPIO_Init+0x240>
 80012de:	2307      	movs	r3, #7
 80012e0:	e00c      	b.n	80012fc <HAL_GPIO_Init+0x240>
 80012e2:	2306      	movs	r3, #6
 80012e4:	e00a      	b.n	80012fc <HAL_GPIO_Init+0x240>
 80012e6:	2305      	movs	r3, #5
 80012e8:	e008      	b.n	80012fc <HAL_GPIO_Init+0x240>
 80012ea:	2304      	movs	r3, #4
 80012ec:	e006      	b.n	80012fc <HAL_GPIO_Init+0x240>
 80012ee:	2303      	movs	r3, #3
 80012f0:	e004      	b.n	80012fc <HAL_GPIO_Init+0x240>
 80012f2:	2302      	movs	r3, #2
 80012f4:	e002      	b.n	80012fc <HAL_GPIO_Init+0x240>
 80012f6:	2301      	movs	r3, #1
 80012f8:	e000      	b.n	80012fc <HAL_GPIO_Init+0x240>
 80012fa:	2300      	movs	r3, #0
 80012fc:	69fa      	ldr	r2, [r7, #28]
 80012fe:	f002 0203 	and.w	r2, r2, #3
 8001302:	0092      	lsls	r2, r2, #2
 8001304:	4093      	lsls	r3, r2
 8001306:	69ba      	ldr	r2, [r7, #24]
 8001308:	4313      	orrs	r3, r2
 800130a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800130c:	4934      	ldr	r1, [pc, #208]	; (80013e0 <HAL_GPIO_Init+0x324>)
 800130e:	69fb      	ldr	r3, [r7, #28]
 8001310:	089b      	lsrs	r3, r3, #2
 8001312:	3302      	adds	r3, #2
 8001314:	69ba      	ldr	r2, [r7, #24]
 8001316:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800131a:	4b3c      	ldr	r3, [pc, #240]	; (800140c <HAL_GPIO_Init+0x350>)
 800131c:	689b      	ldr	r3, [r3, #8]
 800131e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001320:	693b      	ldr	r3, [r7, #16]
 8001322:	43db      	mvns	r3, r3
 8001324:	69ba      	ldr	r2, [r7, #24]
 8001326:	4013      	ands	r3, r2
 8001328:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800132a:	683b      	ldr	r3, [r7, #0]
 800132c:	685b      	ldr	r3, [r3, #4]
 800132e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001332:	2b00      	cmp	r3, #0
 8001334:	d003      	beq.n	800133e <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8001336:	69ba      	ldr	r2, [r7, #24]
 8001338:	693b      	ldr	r3, [r7, #16]
 800133a:	4313      	orrs	r3, r2
 800133c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800133e:	4a33      	ldr	r2, [pc, #204]	; (800140c <HAL_GPIO_Init+0x350>)
 8001340:	69bb      	ldr	r3, [r7, #24]
 8001342:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001344:	4b31      	ldr	r3, [pc, #196]	; (800140c <HAL_GPIO_Init+0x350>)
 8001346:	68db      	ldr	r3, [r3, #12]
 8001348:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800134a:	693b      	ldr	r3, [r7, #16]
 800134c:	43db      	mvns	r3, r3
 800134e:	69ba      	ldr	r2, [r7, #24]
 8001350:	4013      	ands	r3, r2
 8001352:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001354:	683b      	ldr	r3, [r7, #0]
 8001356:	685b      	ldr	r3, [r3, #4]
 8001358:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800135c:	2b00      	cmp	r3, #0
 800135e:	d003      	beq.n	8001368 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8001360:	69ba      	ldr	r2, [r7, #24]
 8001362:	693b      	ldr	r3, [r7, #16]
 8001364:	4313      	orrs	r3, r2
 8001366:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001368:	4a28      	ldr	r2, [pc, #160]	; (800140c <HAL_GPIO_Init+0x350>)
 800136a:	69bb      	ldr	r3, [r7, #24]
 800136c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800136e:	4b27      	ldr	r3, [pc, #156]	; (800140c <HAL_GPIO_Init+0x350>)
 8001370:	685b      	ldr	r3, [r3, #4]
 8001372:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001374:	693b      	ldr	r3, [r7, #16]
 8001376:	43db      	mvns	r3, r3
 8001378:	69ba      	ldr	r2, [r7, #24]
 800137a:	4013      	ands	r3, r2
 800137c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800137e:	683b      	ldr	r3, [r7, #0]
 8001380:	685b      	ldr	r3, [r3, #4]
 8001382:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001386:	2b00      	cmp	r3, #0
 8001388:	d003      	beq.n	8001392 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800138a:	69ba      	ldr	r2, [r7, #24]
 800138c:	693b      	ldr	r3, [r7, #16]
 800138e:	4313      	orrs	r3, r2
 8001390:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001392:	4a1e      	ldr	r2, [pc, #120]	; (800140c <HAL_GPIO_Init+0x350>)
 8001394:	69bb      	ldr	r3, [r7, #24]
 8001396:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001398:	4b1c      	ldr	r3, [pc, #112]	; (800140c <HAL_GPIO_Init+0x350>)
 800139a:	681b      	ldr	r3, [r3, #0]
 800139c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800139e:	693b      	ldr	r3, [r7, #16]
 80013a0:	43db      	mvns	r3, r3
 80013a2:	69ba      	ldr	r2, [r7, #24]
 80013a4:	4013      	ands	r3, r2
 80013a6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80013a8:	683b      	ldr	r3, [r7, #0]
 80013aa:	685b      	ldr	r3, [r3, #4]
 80013ac:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80013b0:	2b00      	cmp	r3, #0
 80013b2:	d003      	beq.n	80013bc <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 80013b4:	69ba      	ldr	r2, [r7, #24]
 80013b6:	693b      	ldr	r3, [r7, #16]
 80013b8:	4313      	orrs	r3, r2
 80013ba:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80013bc:	4a13      	ldr	r2, [pc, #76]	; (800140c <HAL_GPIO_Init+0x350>)
 80013be:	69bb      	ldr	r3, [r7, #24]
 80013c0:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80013c2:	69fb      	ldr	r3, [r7, #28]
 80013c4:	3301      	adds	r3, #1
 80013c6:	61fb      	str	r3, [r7, #28]
 80013c8:	69fb      	ldr	r3, [r7, #28]
 80013ca:	2b0f      	cmp	r3, #15
 80013cc:	f67f ae84 	bls.w	80010d8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80013d0:	bf00      	nop
 80013d2:	bf00      	nop
 80013d4:	3724      	adds	r7, #36	; 0x24
 80013d6:	46bd      	mov	sp, r7
 80013d8:	bc80      	pop	{r7}
 80013da:	4770      	bx	lr
 80013dc:	40023800 	.word	0x40023800
 80013e0:	40013800 	.word	0x40013800
 80013e4:	40020000 	.word	0x40020000
 80013e8:	40020400 	.word	0x40020400
 80013ec:	40020800 	.word	0x40020800
 80013f0:	40020c00 	.word	0x40020c00
 80013f4:	40021000 	.word	0x40021000
 80013f8:	40021400 	.word	0x40021400
 80013fc:	40021800 	.word	0x40021800
 8001400:	40021c00 	.word	0x40021c00
 8001404:	40022000 	.word	0x40022000
 8001408:	40022400 	.word	0x40022400
 800140c:	40013c00 	.word	0x40013c00

08001410 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001410:	b480      	push	{r7}
 8001412:	b085      	sub	sp, #20
 8001414:	af00      	add	r7, sp, #0
 8001416:	6078      	str	r0, [r7, #4]
 8001418:	460b      	mov	r3, r1
 800141a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	691a      	ldr	r2, [r3, #16]
 8001420:	887b      	ldrh	r3, [r7, #2]
 8001422:	4013      	ands	r3, r2
 8001424:	2b00      	cmp	r3, #0
 8001426:	d002      	beq.n	800142e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001428:	2301      	movs	r3, #1
 800142a:	73fb      	strb	r3, [r7, #15]
 800142c:	e001      	b.n	8001432 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800142e:	2300      	movs	r3, #0
 8001430:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001432:	7bfb      	ldrb	r3, [r7, #15]
}
 8001434:	4618      	mov	r0, r3
 8001436:	3714      	adds	r7, #20
 8001438:	46bd      	mov	sp, r7
 800143a:	bc80      	pop	{r7}
 800143c:	4770      	bx	lr

0800143e <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800143e:	b480      	push	{r7}
 8001440:	b083      	sub	sp, #12
 8001442:	af00      	add	r7, sp, #0
 8001444:	6078      	str	r0, [r7, #4]
 8001446:	460b      	mov	r3, r1
 8001448:	807b      	strh	r3, [r7, #2]
 800144a:	4613      	mov	r3, r2
 800144c:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800144e:	787b      	ldrb	r3, [r7, #1]
 8001450:	2b00      	cmp	r3, #0
 8001452:	d003      	beq.n	800145c <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001454:	887a      	ldrh	r2, [r7, #2]
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800145a:	e003      	b.n	8001464 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800145c:	887b      	ldrh	r3, [r7, #2]
 800145e:	041a      	lsls	r2, r3, #16
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	619a      	str	r2, [r3, #24]
}
 8001464:	bf00      	nop
 8001466:	370c      	adds	r7, #12
 8001468:	46bd      	mov	sp, r7
 800146a:	bc80      	pop	{r7}
 800146c:	4770      	bx	lr

0800146e <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800146e:	b480      	push	{r7}
 8001470:	b085      	sub	sp, #20
 8001472:	af00      	add	r7, sp, #0
 8001474:	6078      	str	r0, [r7, #4]
 8001476:	460b      	mov	r3, r1
 8001478:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	695b      	ldr	r3, [r3, #20]
 800147e:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001480:	887a      	ldrh	r2, [r7, #2]
 8001482:	68fb      	ldr	r3, [r7, #12]
 8001484:	4013      	ands	r3, r2
 8001486:	041a      	lsls	r2, r3, #16
 8001488:	68fb      	ldr	r3, [r7, #12]
 800148a:	43d9      	mvns	r1, r3
 800148c:	887b      	ldrh	r3, [r7, #2]
 800148e:	400b      	ands	r3, r1
 8001490:	431a      	orrs	r2, r3
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	619a      	str	r2, [r3, #24]
}
 8001496:	bf00      	nop
 8001498:	3714      	adds	r7, #20
 800149a:	46bd      	mov	sp, r7
 800149c:	bc80      	pop	{r7}
 800149e:	4770      	bx	lr

080014a0 <HAL_MspInit>:
  * @note   This function is called from HAL_Init() function to perform system
  *         level initialization (GPIOs, clock, DMA, interrupt).
  * @retval None
  */
void HAL_MspInit(void)
{
 80014a0:	b480      	push	{r7}
 80014a2:	af00      	add	r7, sp, #0

}
 80014a4:	bf00      	nop
 80014a6:	46bd      	mov	sp, r7
 80014a8:	bc80      	pop	{r7}
 80014aa:	4770      	bx	lr

080014ac <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80014ac:	b580      	push	{r7, lr}
 80014ae:	b086      	sub	sp, #24
 80014b0:	af00      	add	r7, sp, #0
 80014b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	2b00      	cmp	r3, #0
 80014b8:	d101      	bne.n	80014be <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80014ba:	2301      	movs	r3, #1
 80014bc:	e267      	b.n	800198e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	681b      	ldr	r3, [r3, #0]
 80014c2:	f003 0301 	and.w	r3, r3, #1
 80014c6:	2b00      	cmp	r3, #0
 80014c8:	d075      	beq.n	80015b6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80014ca:	4b88      	ldr	r3, [pc, #544]	; (80016ec <HAL_RCC_OscConfig+0x240>)
 80014cc:	689b      	ldr	r3, [r3, #8]
 80014ce:	f003 030c 	and.w	r3, r3, #12
 80014d2:	2b04      	cmp	r3, #4
 80014d4:	d00c      	beq.n	80014f0 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80014d6:	4b85      	ldr	r3, [pc, #532]	; (80016ec <HAL_RCC_OscConfig+0x240>)
 80014d8:	689b      	ldr	r3, [r3, #8]
 80014da:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80014de:	2b08      	cmp	r3, #8
 80014e0:	d112      	bne.n	8001508 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80014e2:	4b82      	ldr	r3, [pc, #520]	; (80016ec <HAL_RCC_OscConfig+0x240>)
 80014e4:	685b      	ldr	r3, [r3, #4]
 80014e6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80014ea:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80014ee:	d10b      	bne.n	8001508 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80014f0:	4b7e      	ldr	r3, [pc, #504]	; (80016ec <HAL_RCC_OscConfig+0x240>)
 80014f2:	681b      	ldr	r3, [r3, #0]
 80014f4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80014f8:	2b00      	cmp	r3, #0
 80014fa:	d05b      	beq.n	80015b4 <HAL_RCC_OscConfig+0x108>
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	685b      	ldr	r3, [r3, #4]
 8001500:	2b00      	cmp	r3, #0
 8001502:	d157      	bne.n	80015b4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001504:	2301      	movs	r3, #1
 8001506:	e242      	b.n	800198e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	685b      	ldr	r3, [r3, #4]
 800150c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001510:	d106      	bne.n	8001520 <HAL_RCC_OscConfig+0x74>
 8001512:	4b76      	ldr	r3, [pc, #472]	; (80016ec <HAL_RCC_OscConfig+0x240>)
 8001514:	681b      	ldr	r3, [r3, #0]
 8001516:	4a75      	ldr	r2, [pc, #468]	; (80016ec <HAL_RCC_OscConfig+0x240>)
 8001518:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800151c:	6013      	str	r3, [r2, #0]
 800151e:	e01d      	b.n	800155c <HAL_RCC_OscConfig+0xb0>
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	685b      	ldr	r3, [r3, #4]
 8001524:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001528:	d10c      	bne.n	8001544 <HAL_RCC_OscConfig+0x98>
 800152a:	4b70      	ldr	r3, [pc, #448]	; (80016ec <HAL_RCC_OscConfig+0x240>)
 800152c:	681b      	ldr	r3, [r3, #0]
 800152e:	4a6f      	ldr	r2, [pc, #444]	; (80016ec <HAL_RCC_OscConfig+0x240>)
 8001530:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001534:	6013      	str	r3, [r2, #0]
 8001536:	4b6d      	ldr	r3, [pc, #436]	; (80016ec <HAL_RCC_OscConfig+0x240>)
 8001538:	681b      	ldr	r3, [r3, #0]
 800153a:	4a6c      	ldr	r2, [pc, #432]	; (80016ec <HAL_RCC_OscConfig+0x240>)
 800153c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001540:	6013      	str	r3, [r2, #0]
 8001542:	e00b      	b.n	800155c <HAL_RCC_OscConfig+0xb0>
 8001544:	4b69      	ldr	r3, [pc, #420]	; (80016ec <HAL_RCC_OscConfig+0x240>)
 8001546:	681b      	ldr	r3, [r3, #0]
 8001548:	4a68      	ldr	r2, [pc, #416]	; (80016ec <HAL_RCC_OscConfig+0x240>)
 800154a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800154e:	6013      	str	r3, [r2, #0]
 8001550:	4b66      	ldr	r3, [pc, #408]	; (80016ec <HAL_RCC_OscConfig+0x240>)
 8001552:	681b      	ldr	r3, [r3, #0]
 8001554:	4a65      	ldr	r2, [pc, #404]	; (80016ec <HAL_RCC_OscConfig+0x240>)
 8001556:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800155a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	685b      	ldr	r3, [r3, #4]
 8001560:	2b00      	cmp	r3, #0
 8001562:	d013      	beq.n	800158c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001564:	f7ff fc92 	bl	8000e8c <HAL_GetTick>
 8001568:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800156a:	e008      	b.n	800157e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800156c:	f7ff fc8e 	bl	8000e8c <HAL_GetTick>
 8001570:	4602      	mov	r2, r0
 8001572:	693b      	ldr	r3, [r7, #16]
 8001574:	1ad3      	subs	r3, r2, r3
 8001576:	2b64      	cmp	r3, #100	; 0x64
 8001578:	d901      	bls.n	800157e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800157a:	2303      	movs	r3, #3
 800157c:	e207      	b.n	800198e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800157e:	4b5b      	ldr	r3, [pc, #364]	; (80016ec <HAL_RCC_OscConfig+0x240>)
 8001580:	681b      	ldr	r3, [r3, #0]
 8001582:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001586:	2b00      	cmp	r3, #0
 8001588:	d0f0      	beq.n	800156c <HAL_RCC_OscConfig+0xc0>
 800158a:	e014      	b.n	80015b6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800158c:	f7ff fc7e 	bl	8000e8c <HAL_GetTick>
 8001590:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001592:	e008      	b.n	80015a6 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001594:	f7ff fc7a 	bl	8000e8c <HAL_GetTick>
 8001598:	4602      	mov	r2, r0
 800159a:	693b      	ldr	r3, [r7, #16]
 800159c:	1ad3      	subs	r3, r2, r3
 800159e:	2b64      	cmp	r3, #100	; 0x64
 80015a0:	d901      	bls.n	80015a6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80015a2:	2303      	movs	r3, #3
 80015a4:	e1f3      	b.n	800198e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80015a6:	4b51      	ldr	r3, [pc, #324]	; (80016ec <HAL_RCC_OscConfig+0x240>)
 80015a8:	681b      	ldr	r3, [r3, #0]
 80015aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80015ae:	2b00      	cmp	r3, #0
 80015b0:	d1f0      	bne.n	8001594 <HAL_RCC_OscConfig+0xe8>
 80015b2:	e000      	b.n	80015b6 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80015b4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	681b      	ldr	r3, [r3, #0]
 80015ba:	f003 0302 	and.w	r3, r3, #2
 80015be:	2b00      	cmp	r3, #0
 80015c0:	d063      	beq.n	800168a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80015c2:	4b4a      	ldr	r3, [pc, #296]	; (80016ec <HAL_RCC_OscConfig+0x240>)
 80015c4:	689b      	ldr	r3, [r3, #8]
 80015c6:	f003 030c 	and.w	r3, r3, #12
 80015ca:	2b00      	cmp	r3, #0
 80015cc:	d00b      	beq.n	80015e6 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80015ce:	4b47      	ldr	r3, [pc, #284]	; (80016ec <HAL_RCC_OscConfig+0x240>)
 80015d0:	689b      	ldr	r3, [r3, #8]
 80015d2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80015d6:	2b08      	cmp	r3, #8
 80015d8:	d11c      	bne.n	8001614 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80015da:	4b44      	ldr	r3, [pc, #272]	; (80016ec <HAL_RCC_OscConfig+0x240>)
 80015dc:	685b      	ldr	r3, [r3, #4]
 80015de:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80015e2:	2b00      	cmp	r3, #0
 80015e4:	d116      	bne.n	8001614 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80015e6:	4b41      	ldr	r3, [pc, #260]	; (80016ec <HAL_RCC_OscConfig+0x240>)
 80015e8:	681b      	ldr	r3, [r3, #0]
 80015ea:	f003 0302 	and.w	r3, r3, #2
 80015ee:	2b00      	cmp	r3, #0
 80015f0:	d005      	beq.n	80015fe <HAL_RCC_OscConfig+0x152>
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	68db      	ldr	r3, [r3, #12]
 80015f6:	2b01      	cmp	r3, #1
 80015f8:	d001      	beq.n	80015fe <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80015fa:	2301      	movs	r3, #1
 80015fc:	e1c7      	b.n	800198e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80015fe:	4b3b      	ldr	r3, [pc, #236]	; (80016ec <HAL_RCC_OscConfig+0x240>)
 8001600:	681b      	ldr	r3, [r3, #0]
 8001602:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	691b      	ldr	r3, [r3, #16]
 800160a:	00db      	lsls	r3, r3, #3
 800160c:	4937      	ldr	r1, [pc, #220]	; (80016ec <HAL_RCC_OscConfig+0x240>)
 800160e:	4313      	orrs	r3, r2
 8001610:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001612:	e03a      	b.n	800168a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	68db      	ldr	r3, [r3, #12]
 8001618:	2b00      	cmp	r3, #0
 800161a:	d020      	beq.n	800165e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800161c:	4b34      	ldr	r3, [pc, #208]	; (80016f0 <HAL_RCC_OscConfig+0x244>)
 800161e:	2201      	movs	r2, #1
 8001620:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001622:	f7ff fc33 	bl	8000e8c <HAL_GetTick>
 8001626:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001628:	e008      	b.n	800163c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800162a:	f7ff fc2f 	bl	8000e8c <HAL_GetTick>
 800162e:	4602      	mov	r2, r0
 8001630:	693b      	ldr	r3, [r7, #16]
 8001632:	1ad3      	subs	r3, r2, r3
 8001634:	2b02      	cmp	r3, #2
 8001636:	d901      	bls.n	800163c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001638:	2303      	movs	r3, #3
 800163a:	e1a8      	b.n	800198e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800163c:	4b2b      	ldr	r3, [pc, #172]	; (80016ec <HAL_RCC_OscConfig+0x240>)
 800163e:	681b      	ldr	r3, [r3, #0]
 8001640:	f003 0302 	and.w	r3, r3, #2
 8001644:	2b00      	cmp	r3, #0
 8001646:	d0f0      	beq.n	800162a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001648:	4b28      	ldr	r3, [pc, #160]	; (80016ec <HAL_RCC_OscConfig+0x240>)
 800164a:	681b      	ldr	r3, [r3, #0]
 800164c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	691b      	ldr	r3, [r3, #16]
 8001654:	00db      	lsls	r3, r3, #3
 8001656:	4925      	ldr	r1, [pc, #148]	; (80016ec <HAL_RCC_OscConfig+0x240>)
 8001658:	4313      	orrs	r3, r2
 800165a:	600b      	str	r3, [r1, #0]
 800165c:	e015      	b.n	800168a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800165e:	4b24      	ldr	r3, [pc, #144]	; (80016f0 <HAL_RCC_OscConfig+0x244>)
 8001660:	2200      	movs	r2, #0
 8001662:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001664:	f7ff fc12 	bl	8000e8c <HAL_GetTick>
 8001668:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800166a:	e008      	b.n	800167e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800166c:	f7ff fc0e 	bl	8000e8c <HAL_GetTick>
 8001670:	4602      	mov	r2, r0
 8001672:	693b      	ldr	r3, [r7, #16]
 8001674:	1ad3      	subs	r3, r2, r3
 8001676:	2b02      	cmp	r3, #2
 8001678:	d901      	bls.n	800167e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800167a:	2303      	movs	r3, #3
 800167c:	e187      	b.n	800198e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800167e:	4b1b      	ldr	r3, [pc, #108]	; (80016ec <HAL_RCC_OscConfig+0x240>)
 8001680:	681b      	ldr	r3, [r3, #0]
 8001682:	f003 0302 	and.w	r3, r3, #2
 8001686:	2b00      	cmp	r3, #0
 8001688:	d1f0      	bne.n	800166c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	681b      	ldr	r3, [r3, #0]
 800168e:	f003 0308 	and.w	r3, r3, #8
 8001692:	2b00      	cmp	r3, #0
 8001694:	d036      	beq.n	8001704 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	695b      	ldr	r3, [r3, #20]
 800169a:	2b00      	cmp	r3, #0
 800169c:	d016      	beq.n	80016cc <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800169e:	4b15      	ldr	r3, [pc, #84]	; (80016f4 <HAL_RCC_OscConfig+0x248>)
 80016a0:	2201      	movs	r2, #1
 80016a2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80016a4:	f7ff fbf2 	bl	8000e8c <HAL_GetTick>
 80016a8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80016aa:	e008      	b.n	80016be <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80016ac:	f7ff fbee 	bl	8000e8c <HAL_GetTick>
 80016b0:	4602      	mov	r2, r0
 80016b2:	693b      	ldr	r3, [r7, #16]
 80016b4:	1ad3      	subs	r3, r2, r3
 80016b6:	2b02      	cmp	r3, #2
 80016b8:	d901      	bls.n	80016be <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80016ba:	2303      	movs	r3, #3
 80016bc:	e167      	b.n	800198e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80016be:	4b0b      	ldr	r3, [pc, #44]	; (80016ec <HAL_RCC_OscConfig+0x240>)
 80016c0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80016c2:	f003 0302 	and.w	r3, r3, #2
 80016c6:	2b00      	cmp	r3, #0
 80016c8:	d0f0      	beq.n	80016ac <HAL_RCC_OscConfig+0x200>
 80016ca:	e01b      	b.n	8001704 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80016cc:	4b09      	ldr	r3, [pc, #36]	; (80016f4 <HAL_RCC_OscConfig+0x248>)
 80016ce:	2200      	movs	r2, #0
 80016d0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80016d2:	f7ff fbdb 	bl	8000e8c <HAL_GetTick>
 80016d6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80016d8:	e00e      	b.n	80016f8 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80016da:	f7ff fbd7 	bl	8000e8c <HAL_GetTick>
 80016de:	4602      	mov	r2, r0
 80016e0:	693b      	ldr	r3, [r7, #16]
 80016e2:	1ad3      	subs	r3, r2, r3
 80016e4:	2b02      	cmp	r3, #2
 80016e6:	d907      	bls.n	80016f8 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80016e8:	2303      	movs	r3, #3
 80016ea:	e150      	b.n	800198e <HAL_RCC_OscConfig+0x4e2>
 80016ec:	40023800 	.word	0x40023800
 80016f0:	42470000 	.word	0x42470000
 80016f4:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80016f8:	4b88      	ldr	r3, [pc, #544]	; (800191c <HAL_RCC_OscConfig+0x470>)
 80016fa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80016fc:	f003 0302 	and.w	r3, r3, #2
 8001700:	2b00      	cmp	r3, #0
 8001702:	d1ea      	bne.n	80016da <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	681b      	ldr	r3, [r3, #0]
 8001708:	f003 0304 	and.w	r3, r3, #4
 800170c:	2b00      	cmp	r3, #0
 800170e:	f000 8097 	beq.w	8001840 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001712:	2300      	movs	r3, #0
 8001714:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001716:	4b81      	ldr	r3, [pc, #516]	; (800191c <HAL_RCC_OscConfig+0x470>)
 8001718:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800171a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800171e:	2b00      	cmp	r3, #0
 8001720:	d10f      	bne.n	8001742 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001722:	2300      	movs	r3, #0
 8001724:	60bb      	str	r3, [r7, #8]
 8001726:	4b7d      	ldr	r3, [pc, #500]	; (800191c <HAL_RCC_OscConfig+0x470>)
 8001728:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800172a:	4a7c      	ldr	r2, [pc, #496]	; (800191c <HAL_RCC_OscConfig+0x470>)
 800172c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001730:	6413      	str	r3, [r2, #64]	; 0x40
 8001732:	4b7a      	ldr	r3, [pc, #488]	; (800191c <HAL_RCC_OscConfig+0x470>)
 8001734:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001736:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800173a:	60bb      	str	r3, [r7, #8]
 800173c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800173e:	2301      	movs	r3, #1
 8001740:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001742:	4b77      	ldr	r3, [pc, #476]	; (8001920 <HAL_RCC_OscConfig+0x474>)
 8001744:	681b      	ldr	r3, [r3, #0]
 8001746:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800174a:	2b00      	cmp	r3, #0
 800174c:	d118      	bne.n	8001780 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800174e:	4b74      	ldr	r3, [pc, #464]	; (8001920 <HAL_RCC_OscConfig+0x474>)
 8001750:	681b      	ldr	r3, [r3, #0]
 8001752:	4a73      	ldr	r2, [pc, #460]	; (8001920 <HAL_RCC_OscConfig+0x474>)
 8001754:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001758:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800175a:	f7ff fb97 	bl	8000e8c <HAL_GetTick>
 800175e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001760:	e008      	b.n	8001774 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001762:	f7ff fb93 	bl	8000e8c <HAL_GetTick>
 8001766:	4602      	mov	r2, r0
 8001768:	693b      	ldr	r3, [r7, #16]
 800176a:	1ad3      	subs	r3, r2, r3
 800176c:	2b02      	cmp	r3, #2
 800176e:	d901      	bls.n	8001774 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8001770:	2303      	movs	r3, #3
 8001772:	e10c      	b.n	800198e <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001774:	4b6a      	ldr	r3, [pc, #424]	; (8001920 <HAL_RCC_OscConfig+0x474>)
 8001776:	681b      	ldr	r3, [r3, #0]
 8001778:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800177c:	2b00      	cmp	r3, #0
 800177e:	d0f0      	beq.n	8001762 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	689b      	ldr	r3, [r3, #8]
 8001784:	2b01      	cmp	r3, #1
 8001786:	d106      	bne.n	8001796 <HAL_RCC_OscConfig+0x2ea>
 8001788:	4b64      	ldr	r3, [pc, #400]	; (800191c <HAL_RCC_OscConfig+0x470>)
 800178a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800178c:	4a63      	ldr	r2, [pc, #396]	; (800191c <HAL_RCC_OscConfig+0x470>)
 800178e:	f043 0301 	orr.w	r3, r3, #1
 8001792:	6713      	str	r3, [r2, #112]	; 0x70
 8001794:	e01c      	b.n	80017d0 <HAL_RCC_OscConfig+0x324>
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	689b      	ldr	r3, [r3, #8]
 800179a:	2b05      	cmp	r3, #5
 800179c:	d10c      	bne.n	80017b8 <HAL_RCC_OscConfig+0x30c>
 800179e:	4b5f      	ldr	r3, [pc, #380]	; (800191c <HAL_RCC_OscConfig+0x470>)
 80017a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80017a2:	4a5e      	ldr	r2, [pc, #376]	; (800191c <HAL_RCC_OscConfig+0x470>)
 80017a4:	f043 0304 	orr.w	r3, r3, #4
 80017a8:	6713      	str	r3, [r2, #112]	; 0x70
 80017aa:	4b5c      	ldr	r3, [pc, #368]	; (800191c <HAL_RCC_OscConfig+0x470>)
 80017ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80017ae:	4a5b      	ldr	r2, [pc, #364]	; (800191c <HAL_RCC_OscConfig+0x470>)
 80017b0:	f043 0301 	orr.w	r3, r3, #1
 80017b4:	6713      	str	r3, [r2, #112]	; 0x70
 80017b6:	e00b      	b.n	80017d0 <HAL_RCC_OscConfig+0x324>
 80017b8:	4b58      	ldr	r3, [pc, #352]	; (800191c <HAL_RCC_OscConfig+0x470>)
 80017ba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80017bc:	4a57      	ldr	r2, [pc, #348]	; (800191c <HAL_RCC_OscConfig+0x470>)
 80017be:	f023 0301 	bic.w	r3, r3, #1
 80017c2:	6713      	str	r3, [r2, #112]	; 0x70
 80017c4:	4b55      	ldr	r3, [pc, #340]	; (800191c <HAL_RCC_OscConfig+0x470>)
 80017c6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80017c8:	4a54      	ldr	r2, [pc, #336]	; (800191c <HAL_RCC_OscConfig+0x470>)
 80017ca:	f023 0304 	bic.w	r3, r3, #4
 80017ce:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	689b      	ldr	r3, [r3, #8]
 80017d4:	2b00      	cmp	r3, #0
 80017d6:	d015      	beq.n	8001804 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80017d8:	f7ff fb58 	bl	8000e8c <HAL_GetTick>
 80017dc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80017de:	e00a      	b.n	80017f6 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80017e0:	f7ff fb54 	bl	8000e8c <HAL_GetTick>
 80017e4:	4602      	mov	r2, r0
 80017e6:	693b      	ldr	r3, [r7, #16]
 80017e8:	1ad3      	subs	r3, r2, r3
 80017ea:	f241 3288 	movw	r2, #5000	; 0x1388
 80017ee:	4293      	cmp	r3, r2
 80017f0:	d901      	bls.n	80017f6 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80017f2:	2303      	movs	r3, #3
 80017f4:	e0cb      	b.n	800198e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80017f6:	4b49      	ldr	r3, [pc, #292]	; (800191c <HAL_RCC_OscConfig+0x470>)
 80017f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80017fa:	f003 0302 	and.w	r3, r3, #2
 80017fe:	2b00      	cmp	r3, #0
 8001800:	d0ee      	beq.n	80017e0 <HAL_RCC_OscConfig+0x334>
 8001802:	e014      	b.n	800182e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001804:	f7ff fb42 	bl	8000e8c <HAL_GetTick>
 8001808:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800180a:	e00a      	b.n	8001822 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800180c:	f7ff fb3e 	bl	8000e8c <HAL_GetTick>
 8001810:	4602      	mov	r2, r0
 8001812:	693b      	ldr	r3, [r7, #16]
 8001814:	1ad3      	subs	r3, r2, r3
 8001816:	f241 3288 	movw	r2, #5000	; 0x1388
 800181a:	4293      	cmp	r3, r2
 800181c:	d901      	bls.n	8001822 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800181e:	2303      	movs	r3, #3
 8001820:	e0b5      	b.n	800198e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001822:	4b3e      	ldr	r3, [pc, #248]	; (800191c <HAL_RCC_OscConfig+0x470>)
 8001824:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001826:	f003 0302 	and.w	r3, r3, #2
 800182a:	2b00      	cmp	r3, #0
 800182c:	d1ee      	bne.n	800180c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800182e:	7dfb      	ldrb	r3, [r7, #23]
 8001830:	2b01      	cmp	r3, #1
 8001832:	d105      	bne.n	8001840 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001834:	4b39      	ldr	r3, [pc, #228]	; (800191c <HAL_RCC_OscConfig+0x470>)
 8001836:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001838:	4a38      	ldr	r2, [pc, #224]	; (800191c <HAL_RCC_OscConfig+0x470>)
 800183a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800183e:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	699b      	ldr	r3, [r3, #24]
 8001844:	2b00      	cmp	r3, #0
 8001846:	f000 80a1 	beq.w	800198c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800184a:	4b34      	ldr	r3, [pc, #208]	; (800191c <HAL_RCC_OscConfig+0x470>)
 800184c:	689b      	ldr	r3, [r3, #8]
 800184e:	f003 030c 	and.w	r3, r3, #12
 8001852:	2b08      	cmp	r3, #8
 8001854:	d05c      	beq.n	8001910 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	699b      	ldr	r3, [r3, #24]
 800185a:	2b02      	cmp	r3, #2
 800185c:	d141      	bne.n	80018e2 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800185e:	4b31      	ldr	r3, [pc, #196]	; (8001924 <HAL_RCC_OscConfig+0x478>)
 8001860:	2200      	movs	r2, #0
 8001862:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001864:	f7ff fb12 	bl	8000e8c <HAL_GetTick>
 8001868:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800186a:	e008      	b.n	800187e <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800186c:	f7ff fb0e 	bl	8000e8c <HAL_GetTick>
 8001870:	4602      	mov	r2, r0
 8001872:	693b      	ldr	r3, [r7, #16]
 8001874:	1ad3      	subs	r3, r2, r3
 8001876:	2b02      	cmp	r3, #2
 8001878:	d901      	bls.n	800187e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800187a:	2303      	movs	r3, #3
 800187c:	e087      	b.n	800198e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800187e:	4b27      	ldr	r3, [pc, #156]	; (800191c <HAL_RCC_OscConfig+0x470>)
 8001880:	681b      	ldr	r3, [r3, #0]
 8001882:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001886:	2b00      	cmp	r3, #0
 8001888:	d1f0      	bne.n	800186c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	69da      	ldr	r2, [r3, #28]
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	6a1b      	ldr	r3, [r3, #32]
 8001892:	431a      	orrs	r2, r3
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001898:	019b      	lsls	r3, r3, #6
 800189a:	431a      	orrs	r2, r3
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80018a0:	085b      	lsrs	r3, r3, #1
 80018a2:	3b01      	subs	r3, #1
 80018a4:	041b      	lsls	r3, r3, #16
 80018a6:	431a      	orrs	r2, r3
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80018ac:	061b      	lsls	r3, r3, #24
 80018ae:	491b      	ldr	r1, [pc, #108]	; (800191c <HAL_RCC_OscConfig+0x470>)
 80018b0:	4313      	orrs	r3, r2
 80018b2:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80018b4:	4b1b      	ldr	r3, [pc, #108]	; (8001924 <HAL_RCC_OscConfig+0x478>)
 80018b6:	2201      	movs	r2, #1
 80018b8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80018ba:	f7ff fae7 	bl	8000e8c <HAL_GetTick>
 80018be:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80018c0:	e008      	b.n	80018d4 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80018c2:	f7ff fae3 	bl	8000e8c <HAL_GetTick>
 80018c6:	4602      	mov	r2, r0
 80018c8:	693b      	ldr	r3, [r7, #16]
 80018ca:	1ad3      	subs	r3, r2, r3
 80018cc:	2b02      	cmp	r3, #2
 80018ce:	d901      	bls.n	80018d4 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80018d0:	2303      	movs	r3, #3
 80018d2:	e05c      	b.n	800198e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80018d4:	4b11      	ldr	r3, [pc, #68]	; (800191c <HAL_RCC_OscConfig+0x470>)
 80018d6:	681b      	ldr	r3, [r3, #0]
 80018d8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80018dc:	2b00      	cmp	r3, #0
 80018de:	d0f0      	beq.n	80018c2 <HAL_RCC_OscConfig+0x416>
 80018e0:	e054      	b.n	800198c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80018e2:	4b10      	ldr	r3, [pc, #64]	; (8001924 <HAL_RCC_OscConfig+0x478>)
 80018e4:	2200      	movs	r2, #0
 80018e6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80018e8:	f7ff fad0 	bl	8000e8c <HAL_GetTick>
 80018ec:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80018ee:	e008      	b.n	8001902 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80018f0:	f7ff facc 	bl	8000e8c <HAL_GetTick>
 80018f4:	4602      	mov	r2, r0
 80018f6:	693b      	ldr	r3, [r7, #16]
 80018f8:	1ad3      	subs	r3, r2, r3
 80018fa:	2b02      	cmp	r3, #2
 80018fc:	d901      	bls.n	8001902 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80018fe:	2303      	movs	r3, #3
 8001900:	e045      	b.n	800198e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001902:	4b06      	ldr	r3, [pc, #24]	; (800191c <HAL_RCC_OscConfig+0x470>)
 8001904:	681b      	ldr	r3, [r3, #0]
 8001906:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800190a:	2b00      	cmp	r3, #0
 800190c:	d1f0      	bne.n	80018f0 <HAL_RCC_OscConfig+0x444>
 800190e:	e03d      	b.n	800198c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	699b      	ldr	r3, [r3, #24]
 8001914:	2b01      	cmp	r3, #1
 8001916:	d107      	bne.n	8001928 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8001918:	2301      	movs	r3, #1
 800191a:	e038      	b.n	800198e <HAL_RCC_OscConfig+0x4e2>
 800191c:	40023800 	.word	0x40023800
 8001920:	40007000 	.word	0x40007000
 8001924:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001928:	4b1b      	ldr	r3, [pc, #108]	; (8001998 <HAL_RCC_OscConfig+0x4ec>)
 800192a:	685b      	ldr	r3, [r3, #4]
 800192c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	699b      	ldr	r3, [r3, #24]
 8001932:	2b01      	cmp	r3, #1
 8001934:	d028      	beq.n	8001988 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001936:	68fb      	ldr	r3, [r7, #12]
 8001938:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001940:	429a      	cmp	r2, r3
 8001942:	d121      	bne.n	8001988 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001944:	68fb      	ldr	r3, [r7, #12]
 8001946:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800194e:	429a      	cmp	r2, r3
 8001950:	d11a      	bne.n	8001988 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001952:	68fa      	ldr	r2, [r7, #12]
 8001954:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001958:	4013      	ands	r3, r2
 800195a:	687a      	ldr	r2, [r7, #4]
 800195c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800195e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001960:	4293      	cmp	r3, r2
 8001962:	d111      	bne.n	8001988 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001964:	68fb      	ldr	r3, [r7, #12]
 8001966:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800196e:	085b      	lsrs	r3, r3, #1
 8001970:	3b01      	subs	r3, #1
 8001972:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001974:	429a      	cmp	r2, r3
 8001976:	d107      	bne.n	8001988 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001978:	68fb      	ldr	r3, [r7, #12]
 800197a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001982:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001984:	429a      	cmp	r2, r3
 8001986:	d001      	beq.n	800198c <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8001988:	2301      	movs	r3, #1
 800198a:	e000      	b.n	800198e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 800198c:	2300      	movs	r3, #0
}
 800198e:	4618      	mov	r0, r3
 8001990:	3718      	adds	r7, #24
 8001992:	46bd      	mov	sp, r7
 8001994:	bd80      	pop	{r7, pc}
 8001996:	bf00      	nop
 8001998:	40023800 	.word	0x40023800

0800199c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800199c:	b580      	push	{r7, lr}
 800199e:	b084      	sub	sp, #16
 80019a0:	af00      	add	r7, sp, #0
 80019a2:	6078      	str	r0, [r7, #4]
 80019a4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	2b00      	cmp	r3, #0
 80019aa:	d101      	bne.n	80019b0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80019ac:	2301      	movs	r3, #1
 80019ae:	e0cc      	b.n	8001b4a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80019b0:	4b68      	ldr	r3, [pc, #416]	; (8001b54 <HAL_RCC_ClockConfig+0x1b8>)
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	f003 030f 	and.w	r3, r3, #15
 80019b8:	683a      	ldr	r2, [r7, #0]
 80019ba:	429a      	cmp	r2, r3
 80019bc:	d90c      	bls.n	80019d8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80019be:	4b65      	ldr	r3, [pc, #404]	; (8001b54 <HAL_RCC_ClockConfig+0x1b8>)
 80019c0:	683a      	ldr	r2, [r7, #0]
 80019c2:	b2d2      	uxtb	r2, r2
 80019c4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80019c6:	4b63      	ldr	r3, [pc, #396]	; (8001b54 <HAL_RCC_ClockConfig+0x1b8>)
 80019c8:	681b      	ldr	r3, [r3, #0]
 80019ca:	f003 030f 	and.w	r3, r3, #15
 80019ce:	683a      	ldr	r2, [r7, #0]
 80019d0:	429a      	cmp	r2, r3
 80019d2:	d001      	beq.n	80019d8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80019d4:	2301      	movs	r3, #1
 80019d6:	e0b8      	b.n	8001b4a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	f003 0302 	and.w	r3, r3, #2
 80019e0:	2b00      	cmp	r3, #0
 80019e2:	d020      	beq.n	8001a26 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	f003 0304 	and.w	r3, r3, #4
 80019ec:	2b00      	cmp	r3, #0
 80019ee:	d005      	beq.n	80019fc <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80019f0:	4b59      	ldr	r3, [pc, #356]	; (8001b58 <HAL_RCC_ClockConfig+0x1bc>)
 80019f2:	689b      	ldr	r3, [r3, #8]
 80019f4:	4a58      	ldr	r2, [pc, #352]	; (8001b58 <HAL_RCC_ClockConfig+0x1bc>)
 80019f6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80019fa:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	681b      	ldr	r3, [r3, #0]
 8001a00:	f003 0308 	and.w	r3, r3, #8
 8001a04:	2b00      	cmp	r3, #0
 8001a06:	d005      	beq.n	8001a14 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001a08:	4b53      	ldr	r3, [pc, #332]	; (8001b58 <HAL_RCC_ClockConfig+0x1bc>)
 8001a0a:	689b      	ldr	r3, [r3, #8]
 8001a0c:	4a52      	ldr	r2, [pc, #328]	; (8001b58 <HAL_RCC_ClockConfig+0x1bc>)
 8001a0e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001a12:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001a14:	4b50      	ldr	r3, [pc, #320]	; (8001b58 <HAL_RCC_ClockConfig+0x1bc>)
 8001a16:	689b      	ldr	r3, [r3, #8]
 8001a18:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	689b      	ldr	r3, [r3, #8]
 8001a20:	494d      	ldr	r1, [pc, #308]	; (8001b58 <HAL_RCC_ClockConfig+0x1bc>)
 8001a22:	4313      	orrs	r3, r2
 8001a24:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	681b      	ldr	r3, [r3, #0]
 8001a2a:	f003 0301 	and.w	r3, r3, #1
 8001a2e:	2b00      	cmp	r3, #0
 8001a30:	d044      	beq.n	8001abc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	685b      	ldr	r3, [r3, #4]
 8001a36:	2b01      	cmp	r3, #1
 8001a38:	d107      	bne.n	8001a4a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001a3a:	4b47      	ldr	r3, [pc, #284]	; (8001b58 <HAL_RCC_ClockConfig+0x1bc>)
 8001a3c:	681b      	ldr	r3, [r3, #0]
 8001a3e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a42:	2b00      	cmp	r3, #0
 8001a44:	d119      	bne.n	8001a7a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001a46:	2301      	movs	r3, #1
 8001a48:	e07f      	b.n	8001b4a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	685b      	ldr	r3, [r3, #4]
 8001a4e:	2b02      	cmp	r3, #2
 8001a50:	d003      	beq.n	8001a5a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001a56:	2b03      	cmp	r3, #3
 8001a58:	d107      	bne.n	8001a6a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001a5a:	4b3f      	ldr	r3, [pc, #252]	; (8001b58 <HAL_RCC_ClockConfig+0x1bc>)
 8001a5c:	681b      	ldr	r3, [r3, #0]
 8001a5e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a62:	2b00      	cmp	r3, #0
 8001a64:	d109      	bne.n	8001a7a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001a66:	2301      	movs	r3, #1
 8001a68:	e06f      	b.n	8001b4a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001a6a:	4b3b      	ldr	r3, [pc, #236]	; (8001b58 <HAL_RCC_ClockConfig+0x1bc>)
 8001a6c:	681b      	ldr	r3, [r3, #0]
 8001a6e:	f003 0302 	and.w	r3, r3, #2
 8001a72:	2b00      	cmp	r3, #0
 8001a74:	d101      	bne.n	8001a7a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001a76:	2301      	movs	r3, #1
 8001a78:	e067      	b.n	8001b4a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001a7a:	4b37      	ldr	r3, [pc, #220]	; (8001b58 <HAL_RCC_ClockConfig+0x1bc>)
 8001a7c:	689b      	ldr	r3, [r3, #8]
 8001a7e:	f023 0203 	bic.w	r2, r3, #3
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	685b      	ldr	r3, [r3, #4]
 8001a86:	4934      	ldr	r1, [pc, #208]	; (8001b58 <HAL_RCC_ClockConfig+0x1bc>)
 8001a88:	4313      	orrs	r3, r2
 8001a8a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001a8c:	f7ff f9fe 	bl	8000e8c <HAL_GetTick>
 8001a90:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001a92:	e00a      	b.n	8001aaa <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001a94:	f7ff f9fa 	bl	8000e8c <HAL_GetTick>
 8001a98:	4602      	mov	r2, r0
 8001a9a:	68fb      	ldr	r3, [r7, #12]
 8001a9c:	1ad3      	subs	r3, r2, r3
 8001a9e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001aa2:	4293      	cmp	r3, r2
 8001aa4:	d901      	bls.n	8001aaa <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001aa6:	2303      	movs	r3, #3
 8001aa8:	e04f      	b.n	8001b4a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001aaa:	4b2b      	ldr	r3, [pc, #172]	; (8001b58 <HAL_RCC_ClockConfig+0x1bc>)
 8001aac:	689b      	ldr	r3, [r3, #8]
 8001aae:	f003 020c 	and.w	r2, r3, #12
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	685b      	ldr	r3, [r3, #4]
 8001ab6:	009b      	lsls	r3, r3, #2
 8001ab8:	429a      	cmp	r2, r3
 8001aba:	d1eb      	bne.n	8001a94 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001abc:	4b25      	ldr	r3, [pc, #148]	; (8001b54 <HAL_RCC_ClockConfig+0x1b8>)
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	f003 030f 	and.w	r3, r3, #15
 8001ac4:	683a      	ldr	r2, [r7, #0]
 8001ac6:	429a      	cmp	r2, r3
 8001ac8:	d20c      	bcs.n	8001ae4 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001aca:	4b22      	ldr	r3, [pc, #136]	; (8001b54 <HAL_RCC_ClockConfig+0x1b8>)
 8001acc:	683a      	ldr	r2, [r7, #0]
 8001ace:	b2d2      	uxtb	r2, r2
 8001ad0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001ad2:	4b20      	ldr	r3, [pc, #128]	; (8001b54 <HAL_RCC_ClockConfig+0x1b8>)
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	f003 030f 	and.w	r3, r3, #15
 8001ada:	683a      	ldr	r2, [r7, #0]
 8001adc:	429a      	cmp	r2, r3
 8001ade:	d001      	beq.n	8001ae4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001ae0:	2301      	movs	r3, #1
 8001ae2:	e032      	b.n	8001b4a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	f003 0304 	and.w	r3, r3, #4
 8001aec:	2b00      	cmp	r3, #0
 8001aee:	d008      	beq.n	8001b02 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001af0:	4b19      	ldr	r3, [pc, #100]	; (8001b58 <HAL_RCC_ClockConfig+0x1bc>)
 8001af2:	689b      	ldr	r3, [r3, #8]
 8001af4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	68db      	ldr	r3, [r3, #12]
 8001afc:	4916      	ldr	r1, [pc, #88]	; (8001b58 <HAL_RCC_ClockConfig+0x1bc>)
 8001afe:	4313      	orrs	r3, r2
 8001b00:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	f003 0308 	and.w	r3, r3, #8
 8001b0a:	2b00      	cmp	r3, #0
 8001b0c:	d009      	beq.n	8001b22 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001b0e:	4b12      	ldr	r3, [pc, #72]	; (8001b58 <HAL_RCC_ClockConfig+0x1bc>)
 8001b10:	689b      	ldr	r3, [r3, #8]
 8001b12:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	691b      	ldr	r3, [r3, #16]
 8001b1a:	00db      	lsls	r3, r3, #3
 8001b1c:	490e      	ldr	r1, [pc, #56]	; (8001b58 <HAL_RCC_ClockConfig+0x1bc>)
 8001b1e:	4313      	orrs	r3, r2
 8001b20:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001b22:	f000 f821 	bl	8001b68 <HAL_RCC_GetSysClockFreq>
 8001b26:	4602      	mov	r2, r0
 8001b28:	4b0b      	ldr	r3, [pc, #44]	; (8001b58 <HAL_RCC_ClockConfig+0x1bc>)
 8001b2a:	689b      	ldr	r3, [r3, #8]
 8001b2c:	091b      	lsrs	r3, r3, #4
 8001b2e:	f003 030f 	and.w	r3, r3, #15
 8001b32:	490a      	ldr	r1, [pc, #40]	; (8001b5c <HAL_RCC_ClockConfig+0x1c0>)
 8001b34:	5ccb      	ldrb	r3, [r1, r3]
 8001b36:	fa22 f303 	lsr.w	r3, r2, r3
 8001b3a:	4a09      	ldr	r2, [pc, #36]	; (8001b60 <HAL_RCC_ClockConfig+0x1c4>)
 8001b3c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001b3e:	4b09      	ldr	r3, [pc, #36]	; (8001b64 <HAL_RCC_ClockConfig+0x1c8>)
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	4618      	mov	r0, r3
 8001b44:	f7ff f960 	bl	8000e08 <HAL_InitTick>

  return HAL_OK;
 8001b48:	2300      	movs	r3, #0
}
 8001b4a:	4618      	mov	r0, r3
 8001b4c:	3710      	adds	r7, #16
 8001b4e:	46bd      	mov	sp, r7
 8001b50:	bd80      	pop	{r7, pc}
 8001b52:	bf00      	nop
 8001b54:	40023c00 	.word	0x40023c00
 8001b58:	40023800 	.word	0x40023800
 8001b5c:	0800214c 	.word	0x0800214c
 8001b60:	20000010 	.word	0x20000010
 8001b64:	20000014 	.word	0x20000014

08001b68 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001b68:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001b6c:	b094      	sub	sp, #80	; 0x50
 8001b6e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8001b70:	2300      	movs	r3, #0
 8001b72:	647b      	str	r3, [r7, #68]	; 0x44
 8001b74:	2300      	movs	r3, #0
 8001b76:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001b78:	2300      	movs	r3, #0
 8001b7a:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8001b7c:	2300      	movs	r3, #0
 8001b7e:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001b80:	4b7c      	ldr	r3, [pc, #496]	; (8001d74 <HAL_RCC_GetSysClockFreq+0x20c>)
 8001b82:	689b      	ldr	r3, [r3, #8]
 8001b84:	f003 030c 	and.w	r3, r3, #12
 8001b88:	2b08      	cmp	r3, #8
 8001b8a:	d00d      	beq.n	8001ba8 <HAL_RCC_GetSysClockFreq+0x40>
 8001b8c:	2b08      	cmp	r3, #8
 8001b8e:	f200 80e7 	bhi.w	8001d60 <HAL_RCC_GetSysClockFreq+0x1f8>
 8001b92:	2b00      	cmp	r3, #0
 8001b94:	d002      	beq.n	8001b9c <HAL_RCC_GetSysClockFreq+0x34>
 8001b96:	2b04      	cmp	r3, #4
 8001b98:	d003      	beq.n	8001ba2 <HAL_RCC_GetSysClockFreq+0x3a>
 8001b9a:	e0e1      	b.n	8001d60 <HAL_RCC_GetSysClockFreq+0x1f8>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001b9c:	4b76      	ldr	r3, [pc, #472]	; (8001d78 <HAL_RCC_GetSysClockFreq+0x210>)
 8001b9e:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8001ba0:	e0e1      	b.n	8001d66 <HAL_RCC_GetSysClockFreq+0x1fe>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001ba2:	4b76      	ldr	r3, [pc, #472]	; (8001d7c <HAL_RCC_GetSysClockFreq+0x214>)
 8001ba4:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001ba6:	e0de      	b.n	8001d66 <HAL_RCC_GetSysClockFreq+0x1fe>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001ba8:	4b72      	ldr	r3, [pc, #456]	; (8001d74 <HAL_RCC_GetSysClockFreq+0x20c>)
 8001baa:	685b      	ldr	r3, [r3, #4]
 8001bac:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001bb0:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001bb2:	4b70      	ldr	r3, [pc, #448]	; (8001d74 <HAL_RCC_GetSysClockFreq+0x20c>)
 8001bb4:	685b      	ldr	r3, [r3, #4]
 8001bb6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001bba:	2b00      	cmp	r3, #0
 8001bbc:	d065      	beq.n	8001c8a <HAL_RCC_GetSysClockFreq+0x122>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001bbe:	4b6d      	ldr	r3, [pc, #436]	; (8001d74 <HAL_RCC_GetSysClockFreq+0x20c>)
 8001bc0:	685b      	ldr	r3, [r3, #4]
 8001bc2:	099b      	lsrs	r3, r3, #6
 8001bc4:	2200      	movs	r2, #0
 8001bc6:	63bb      	str	r3, [r7, #56]	; 0x38
 8001bc8:	63fa      	str	r2, [r7, #60]	; 0x3c
 8001bca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001bcc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001bd0:	633b      	str	r3, [r7, #48]	; 0x30
 8001bd2:	2300      	movs	r3, #0
 8001bd4:	637b      	str	r3, [r7, #52]	; 0x34
 8001bd6:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8001bda:	4622      	mov	r2, r4
 8001bdc:	462b      	mov	r3, r5
 8001bde:	f04f 0000 	mov.w	r0, #0
 8001be2:	f04f 0100 	mov.w	r1, #0
 8001be6:	0159      	lsls	r1, r3, #5
 8001be8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001bec:	0150      	lsls	r0, r2, #5
 8001bee:	4602      	mov	r2, r0
 8001bf0:	460b      	mov	r3, r1
 8001bf2:	4621      	mov	r1, r4
 8001bf4:	1a51      	subs	r1, r2, r1
 8001bf6:	6139      	str	r1, [r7, #16]
 8001bf8:	4629      	mov	r1, r5
 8001bfa:	eb63 0301 	sbc.w	r3, r3, r1
 8001bfe:	617b      	str	r3, [r7, #20]
 8001c00:	f04f 0200 	mov.w	r2, #0
 8001c04:	f04f 0300 	mov.w	r3, #0
 8001c08:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8001c0c:	4659      	mov	r1, fp
 8001c0e:	018b      	lsls	r3, r1, #6
 8001c10:	4651      	mov	r1, sl
 8001c12:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001c16:	4651      	mov	r1, sl
 8001c18:	018a      	lsls	r2, r1, #6
 8001c1a:	46d4      	mov	ip, sl
 8001c1c:	ebb2 080c 	subs.w	r8, r2, ip
 8001c20:	4659      	mov	r1, fp
 8001c22:	eb63 0901 	sbc.w	r9, r3, r1
 8001c26:	f04f 0200 	mov.w	r2, #0
 8001c2a:	f04f 0300 	mov.w	r3, #0
 8001c2e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001c32:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001c36:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001c3a:	4690      	mov	r8, r2
 8001c3c:	4699      	mov	r9, r3
 8001c3e:	4623      	mov	r3, r4
 8001c40:	eb18 0303 	adds.w	r3, r8, r3
 8001c44:	60bb      	str	r3, [r7, #8]
 8001c46:	462b      	mov	r3, r5
 8001c48:	eb49 0303 	adc.w	r3, r9, r3
 8001c4c:	60fb      	str	r3, [r7, #12]
 8001c4e:	f04f 0200 	mov.w	r2, #0
 8001c52:	f04f 0300 	mov.w	r3, #0
 8001c56:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8001c5a:	4629      	mov	r1, r5
 8001c5c:	024b      	lsls	r3, r1, #9
 8001c5e:	4620      	mov	r0, r4
 8001c60:	4629      	mov	r1, r5
 8001c62:	4604      	mov	r4, r0
 8001c64:	ea43 53d4 	orr.w	r3, r3, r4, lsr #23
 8001c68:	4601      	mov	r1, r0
 8001c6a:	024a      	lsls	r2, r1, #9
 8001c6c:	4610      	mov	r0, r2
 8001c6e:	4619      	mov	r1, r3
 8001c70:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001c72:	2200      	movs	r2, #0
 8001c74:	62bb      	str	r3, [r7, #40]	; 0x28
 8001c76:	62fa      	str	r2, [r7, #44]	; 0x2c
 8001c78:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8001c7c:	f7fe fc98 	bl	80005b0 <__aeabi_uldivmod>
 8001c80:	4602      	mov	r2, r0
 8001c82:	460b      	mov	r3, r1
 8001c84:	4613      	mov	r3, r2
 8001c86:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001c88:	e05c      	b.n	8001d44 <HAL_RCC_GetSysClockFreq+0x1dc>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001c8a:	4b3a      	ldr	r3, [pc, #232]	; (8001d74 <HAL_RCC_GetSysClockFreq+0x20c>)
 8001c8c:	685b      	ldr	r3, [r3, #4]
 8001c8e:	099b      	lsrs	r3, r3, #6
 8001c90:	2200      	movs	r2, #0
 8001c92:	4618      	mov	r0, r3
 8001c94:	4611      	mov	r1, r2
 8001c96:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8001c9a:	623b      	str	r3, [r7, #32]
 8001c9c:	2300      	movs	r3, #0
 8001c9e:	627b      	str	r3, [r7, #36]	; 0x24
 8001ca0:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8001ca4:	4642      	mov	r2, r8
 8001ca6:	464b      	mov	r3, r9
 8001ca8:	f04f 0000 	mov.w	r0, #0
 8001cac:	f04f 0100 	mov.w	r1, #0
 8001cb0:	0159      	lsls	r1, r3, #5
 8001cb2:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001cb6:	0150      	lsls	r0, r2, #5
 8001cb8:	4602      	mov	r2, r0
 8001cba:	460b      	mov	r3, r1
 8001cbc:	46c4      	mov	ip, r8
 8001cbe:	ebb2 0a0c 	subs.w	sl, r2, ip
 8001cc2:	4640      	mov	r0, r8
 8001cc4:	4649      	mov	r1, r9
 8001cc6:	468c      	mov	ip, r1
 8001cc8:	eb63 0b0c 	sbc.w	fp, r3, ip
 8001ccc:	f04f 0200 	mov.w	r2, #0
 8001cd0:	f04f 0300 	mov.w	r3, #0
 8001cd4:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8001cd8:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8001cdc:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8001ce0:	ebb2 040a 	subs.w	r4, r2, sl
 8001ce4:	eb63 050b 	sbc.w	r5, r3, fp
 8001ce8:	f04f 0200 	mov.w	r2, #0
 8001cec:	f04f 0300 	mov.w	r3, #0
 8001cf0:	00eb      	lsls	r3, r5, #3
 8001cf2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001cf6:	00e2      	lsls	r2, r4, #3
 8001cf8:	4614      	mov	r4, r2
 8001cfa:	461d      	mov	r5, r3
 8001cfc:	4603      	mov	r3, r0
 8001cfe:	18e3      	adds	r3, r4, r3
 8001d00:	603b      	str	r3, [r7, #0]
 8001d02:	460b      	mov	r3, r1
 8001d04:	eb45 0303 	adc.w	r3, r5, r3
 8001d08:	607b      	str	r3, [r7, #4]
 8001d0a:	f04f 0200 	mov.w	r2, #0
 8001d0e:	f04f 0300 	mov.w	r3, #0
 8001d12:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001d16:	4629      	mov	r1, r5
 8001d18:	028b      	lsls	r3, r1, #10
 8001d1a:	4620      	mov	r0, r4
 8001d1c:	4629      	mov	r1, r5
 8001d1e:	4604      	mov	r4, r0
 8001d20:	ea43 5394 	orr.w	r3, r3, r4, lsr #22
 8001d24:	4601      	mov	r1, r0
 8001d26:	028a      	lsls	r2, r1, #10
 8001d28:	4610      	mov	r0, r2
 8001d2a:	4619      	mov	r1, r3
 8001d2c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001d2e:	2200      	movs	r2, #0
 8001d30:	61bb      	str	r3, [r7, #24]
 8001d32:	61fa      	str	r2, [r7, #28]
 8001d34:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001d38:	f7fe fc3a 	bl	80005b0 <__aeabi_uldivmod>
 8001d3c:	4602      	mov	r2, r0
 8001d3e:	460b      	mov	r3, r1
 8001d40:	4613      	mov	r3, r2
 8001d42:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001d44:	4b0b      	ldr	r3, [pc, #44]	; (8001d74 <HAL_RCC_GetSysClockFreq+0x20c>)
 8001d46:	685b      	ldr	r3, [r3, #4]
 8001d48:	0c1b      	lsrs	r3, r3, #16
 8001d4a:	f003 0303 	and.w	r3, r3, #3
 8001d4e:	3301      	adds	r3, #1
 8001d50:	005b      	lsls	r3, r3, #1
 8001d52:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8001d54:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8001d56:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001d58:	fbb2 f3f3 	udiv	r3, r2, r3
 8001d5c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001d5e:	e002      	b.n	8001d66 <HAL_RCC_GetSysClockFreq+0x1fe>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001d60:	4b05      	ldr	r3, [pc, #20]	; (8001d78 <HAL_RCC_GetSysClockFreq+0x210>)
 8001d62:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001d64:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001d66:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8001d68:	4618      	mov	r0, r3
 8001d6a:	3750      	adds	r7, #80	; 0x50
 8001d6c:	46bd      	mov	sp, r7
 8001d6e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001d72:	bf00      	nop
 8001d74:	40023800 	.word	0x40023800
 8001d78:	00f42400 	.word	0x00f42400
 8001d7c:	007a1200 	.word	0x007a1200

08001d80 <push_to_change_freq>:
 * @param delay Pointer to a defined array of leds delay .
 * @param cycles Pointer to a defined array of duty_cycles configuration.
 * @param arrayLength length of the array of leds.
 * @note if duration is 0 or a negative number, it defaults to DEFAULT_DELAY.
 */
void push_to_change_freq(delay_t *delays, duty_cycle *cycles, size_t arrayLength){
 8001d80:	b590      	push	{r4, r7, lr}
 8001d82:	b08d      	sub	sp, #52	; 0x34
 8001d84:	af00      	add	r7, sp, #0
 8001d86:	60f8      	str	r0, [r7, #12]
 8001d88:	60b9      	str	r1, [r7, #8]
 8001d8a:	607a      	str	r2, [r7, #4]
	if ((delays == NULL) || (cycles == NULL)){
 8001d8c:	68fb      	ldr	r3, [r7, #12]
 8001d8e:	2b00      	cmp	r3, #0
 8001d90:	d002      	beq.n	8001d98 <push_to_change_freq+0x18>
 8001d92:	68bb      	ldr	r3, [r7, #8]
 8001d94:	2b00      	cmp	r3, #0
 8001d96:	d101      	bne.n	8001d9c <push_to_change_freq+0x1c>
		Error_Handler();
 8001d98:	f000 f96c 	bl	8002074 <Error_Handler>
	}
    debounceFSM_update();
 8001d9c:	f7fe fd92 	bl	80008c4 <debounceFSM_update>
	bool_t currentState = readKey();
 8001da0:	f7fe fdfc 	bl	800099c <readKey>
 8001da4:	4603      	mov	r3, r0
 8001da6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

    if (currentState) {
 8001daa:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001dae:	2b00      	cmp	r3, #0
 8001db0:	d05d      	beq.n	8001e6e <push_to_change_freq+0xee>

        duty_cycle temp = cycles[0];
 8001db2:	68bb      	ldr	r3, [r7, #8]
 8001db4:	f107 0410 	add.w	r4, r7, #16
 8001db8:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001dba:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
        for (uint8_t i = 0; i < arrayLength - 1; i++) {
 8001dbe:	2300      	movs	r3, #0
 8001dc0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8001dc4:	e014      	b.n	8001df0 <push_to_change_freq+0x70>
            cycles[i] = cycles[i + 1];
 8001dc6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8001dca:	3301      	adds	r3, #1
 8001dcc:	011b      	lsls	r3, r3, #4
 8001dce:	68ba      	ldr	r2, [r7, #8]
 8001dd0:	18d1      	adds	r1, r2, r3
 8001dd2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8001dd6:	011b      	lsls	r3, r3, #4
 8001dd8:	68ba      	ldr	r2, [r7, #8]
 8001dda:	4413      	add	r3, r2
 8001ddc:	461c      	mov	r4, r3
 8001dde:	460b      	mov	r3, r1
 8001de0:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001de2:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
        for (uint8_t i = 0; i < arrayLength - 1; i++) {
 8001de6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8001dea:	3301      	adds	r3, #1
 8001dec:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8001df0:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	3b01      	subs	r3, #1
 8001df8:	429a      	cmp	r2, r3
 8001dfa:	d3e4      	bcc.n	8001dc6 <push_to_change_freq+0x46>
        }
        cycles[arrayLength - 1] = temp;
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	f103 5380 	add.w	r3, r3, #268435456	; 0x10000000
 8001e02:	3b01      	subs	r3, #1
 8001e04:	011b      	lsls	r3, r3, #4
 8001e06:	68ba      	ldr	r2, [r7, #8]
 8001e08:	4413      	add	r3, r2
 8001e0a:	461c      	mov	r4, r3
 8001e0c:	f107 0310 	add.w	r3, r7, #16
 8001e10:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001e12:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}


        for (size_t i = 0; i < arrayLength; i++) {
 8001e16:	2300      	movs	r3, #0
 8001e18:	62bb      	str	r3, [r7, #40]	; 0x28
 8001e1a:	e024      	b.n	8001e66 <push_to_change_freq+0xe6>
        	tick_t duration = (tick_t)(cycles[i].duration)*(cycles[i].dutyCycle);
 8001e1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001e1e:	011b      	lsls	r3, r3, #4
 8001e20:	68ba      	ldr	r2, [r7, #8]
 8001e22:	4413      	add	r3, r2
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	4618      	mov	r0, r3
 8001e28:	f7fe fb4a 	bl	80004c0 <__aeabi_ui2f>
 8001e2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001e2e:	011b      	lsls	r3, r3, #4
 8001e30:	68ba      	ldr	r2, [r7, #8]
 8001e32:	4413      	add	r3, r2
 8001e34:	685b      	ldr	r3, [r3, #4]
 8001e36:	4619      	mov	r1, r3
 8001e38:	f7fe f9d8 	bl	80001ec <__aeabi_fmul>
 8001e3c:	4603      	mov	r3, r0
 8001e3e:	4618      	mov	r0, r3
 8001e40:	f7fe fb96 	bl	8000570 <__aeabi_f2uiz>
 8001e44:	4603      	mov	r3, r0
 8001e46:	623b      	str	r3, [r7, #32]
            delayInit(&delays[i], duration );
 8001e48:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001e4a:	4613      	mov	r3, r2
 8001e4c:	005b      	lsls	r3, r3, #1
 8001e4e:	4413      	add	r3, r2
 8001e50:	009b      	lsls	r3, r3, #2
 8001e52:	461a      	mov	r2, r3
 8001e54:	68fb      	ldr	r3, [r7, #12]
 8001e56:	4413      	add	r3, r2
 8001e58:	6a39      	ldr	r1, [r7, #32]
 8001e5a:	4618      	mov	r0, r3
 8001e5c:	f7fe fe12 	bl	8000a84 <delayInit>
        for (size_t i = 0; i < arrayLength; i++) {
 8001e60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001e62:	3301      	adds	r3, #1
 8001e64:	62bb      	str	r3, [r7, #40]	; 0x28
 8001e66:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	429a      	cmp	r2, r3
 8001e6c:	d3d6      	bcc.n	8001e1c <push_to_change_freq+0x9c>
        }


    }
    blink(&delays[0], &cycles[0]);
 8001e6e:	68b9      	ldr	r1, [r7, #8]
 8001e70:	68f8      	ldr	r0, [r7, #12]
 8001e72:	f7fe fdf2 	bl	8000a5a <blink>

}
 8001e76:	bf00      	nop
 8001e78:	3734      	adds	r7, #52	; 0x34
 8001e7a:	46bd      	mov	sp, r7
 8001e7c:	bd90      	pop	{r4, r7, pc}
	...

08001e80 <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 8001e80:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001e84:	b088      	sub	sp, #32
 8001e86:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8001e88:	f7fe ffa2 	bl	8000dd0 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8001e8c:	f000 f860 	bl	8001f50 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	BSP_PB_Init(BUTTON_USER, BUTTON_MODE_GPIO);
 8001e90:	2100      	movs	r1, #0
 8001e92:	2000      	movs	r0, #0
 8001e94:	f7fe fed8 	bl	8000c48 <BSP_PB_Init>
	MX_GPIO_Init();
 8001e98:	f000 f8b8 	bl	800200c <MX_GPIO_Init>

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	//delayInit(&delay_a, 200);

	delay_t delayArray[arrayLength];
 8001e9c:	4b2a      	ldr	r3, [pc, #168]	; (8001f48 <main+0xc8>)
 8001e9e:	6819      	ldr	r1, [r3, #0]
 8001ea0:	460b      	mov	r3, r1
 8001ea2:	3b01      	subs	r3, #1
 8001ea4:	61fb      	str	r3, [r7, #28]
 8001ea6:	2300      	movs	r3, #0
 8001ea8:	6139      	str	r1, [r7, #16]
 8001eaa:	617b      	str	r3, [r7, #20]
 8001eac:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8001eb0:	1890      	adds	r0, r2, r2
 8001eb2:	60b8      	str	r0, [r7, #8]
 8001eb4:	415b      	adcs	r3, r3
 8001eb6:	60fb      	str	r3, [r7, #12]
 8001eb8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001ebc:	6938      	ldr	r0, [r7, #16]
 8001ebe:	eb12 0800 	adds.w	r8, r2, r0
 8001ec2:	6978      	ldr	r0, [r7, #20]
 8001ec4:	eb43 0900 	adc.w	r9, r3, r0
 8001ec8:	f04f 0200 	mov.w	r2, #0
 8001ecc:	f04f 0300 	mov.w	r3, #0
 8001ed0:	ea4f 1349 	mov.w	r3, r9, lsl #5
 8001ed4:	ea43 63d8 	orr.w	r3, r3, r8, lsr #27
 8001ed8:	ea4f 1248 	mov.w	r2, r8, lsl #5
 8001edc:	2300      	movs	r3, #0
 8001ede:	468a      	mov	sl, r1
 8001ee0:	469b      	mov	fp, r3
 8001ee2:	4652      	mov	r2, sl
 8001ee4:	465b      	mov	r3, fp
 8001ee6:	1890      	adds	r0, r2, r2
 8001ee8:	6038      	str	r0, [r7, #0]
 8001eea:	415b      	adcs	r3, r3
 8001eec:	607b      	str	r3, [r7, #4]
 8001eee:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001ef2:	eb12 040a 	adds.w	r4, r2, sl
 8001ef6:	eb43 050b 	adc.w	r5, r3, fp
 8001efa:	f04f 0200 	mov.w	r2, #0
 8001efe:	f04f 0300 	mov.w	r3, #0
 8001f02:	016b      	lsls	r3, r5, #5
 8001f04:	ea43 63d4 	orr.w	r3, r3, r4, lsr #27
 8001f08:	0162      	lsls	r2, r4, #5
 8001f0a:	460b      	mov	r3, r1
 8001f0c:	005b      	lsls	r3, r3, #1
 8001f0e:	440b      	add	r3, r1
 8001f10:	009b      	lsls	r3, r3, #2
 8001f12:	3307      	adds	r3, #7
 8001f14:	08db      	lsrs	r3, r3, #3
 8001f16:	00db      	lsls	r3, r3, #3
 8001f18:	ebad 0d03 	sub.w	sp, sp, r3
 8001f1c:	466b      	mov	r3, sp
 8001f1e:	3303      	adds	r3, #3
 8001f20:	089b      	lsrs	r3, r3, #2
 8001f22:	009b      	lsls	r3, r3, #2
 8001f24:	61bb      	str	r3, [r7, #24]
	debounceFSM_init();
 8001f26:	f7fe fcc1 	bl	80008ac <debounceFSM_init>
	periodicBlinkInit(delayArray,cycles,arrayLength);
 8001f2a:	4b07      	ldr	r3, [pc, #28]	; (8001f48 <main+0xc8>)
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	461a      	mov	r2, r3
 8001f30:	4906      	ldr	r1, [pc, #24]	; (8001f4c <main+0xcc>)
 8001f32:	69b8      	ldr	r0, [r7, #24]
 8001f34:	f7fe fd44 	bl	80009c0 <periodicBlinkInit>

	//uint32_t count = 0;
	while (1)
	{
		push_to_change_freq(delayArray, cycles, arrayLength);
 8001f38:	4b03      	ldr	r3, [pc, #12]	; (8001f48 <main+0xc8>)
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	461a      	mov	r2, r3
 8001f3e:	4903      	ldr	r1, [pc, #12]	; (8001f4c <main+0xcc>)
 8001f40:	69b8      	ldr	r0, [r7, #24]
 8001f42:	f7ff ff1d 	bl	8001d80 <push_to_change_freq>
 8001f46:	e7f7      	b.n	8001f38 <main+0xb8>
 8001f48:	2000004c 	.word	0x2000004c
 8001f4c:	2000001c 	.word	0x2000001c

08001f50 <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 8001f50:	b580      	push	{r7, lr}
 8001f52:	b094      	sub	sp, #80	; 0x50
 8001f54:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001f56:	f107 0320 	add.w	r3, r7, #32
 8001f5a:	2230      	movs	r2, #48	; 0x30
 8001f5c:	2100      	movs	r1, #0
 8001f5e:	4618      	mov	r0, r3
 8001f60:	f000 f8b7 	bl	80020d2 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001f64:	f107 030c 	add.w	r3, r7, #12
 8001f68:	2200      	movs	r2, #0
 8001f6a:	601a      	str	r2, [r3, #0]
 8001f6c:	605a      	str	r2, [r3, #4]
 8001f6e:	609a      	str	r2, [r3, #8]
 8001f70:	60da      	str	r2, [r3, #12]
 8001f72:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	__HAL_RCC_PWR_CLK_ENABLE();
 8001f74:	2300      	movs	r3, #0
 8001f76:	60bb      	str	r3, [r7, #8]
 8001f78:	4b22      	ldr	r3, [pc, #136]	; (8002004 <SystemClock_Config+0xb4>)
 8001f7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f7c:	4a21      	ldr	r2, [pc, #132]	; (8002004 <SystemClock_Config+0xb4>)
 8001f7e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001f82:	6413      	str	r3, [r2, #64]	; 0x40
 8001f84:	4b1f      	ldr	r3, [pc, #124]	; (8002004 <SystemClock_Config+0xb4>)
 8001f86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f88:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f8c:	60bb      	str	r3, [r7, #8]
 8001f8e:	68bb      	ldr	r3, [r7, #8]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001f90:	2300      	movs	r3, #0
 8001f92:	607b      	str	r3, [r7, #4]
 8001f94:	4b1c      	ldr	r3, [pc, #112]	; (8002008 <SystemClock_Config+0xb8>)
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	4a1b      	ldr	r2, [pc, #108]	; (8002008 <SystemClock_Config+0xb8>)
 8001f9a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001f9e:	6013      	str	r3, [r2, #0]
 8001fa0:	4b19      	ldr	r3, [pc, #100]	; (8002008 <SystemClock_Config+0xb8>)
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001fa8:	607b      	str	r3, [r7, #4]
 8001faa:	687b      	ldr	r3, [r7, #4]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001fac:	2302      	movs	r3, #2
 8001fae:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001fb0:	2301      	movs	r3, #1
 8001fb2:	62fb      	str	r3, [r7, #44]	; 0x2c
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001fb4:	2310      	movs	r3, #16
 8001fb6:	633b      	str	r3, [r7, #48]	; 0x30
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001fb8:	2300      	movs	r3, #0
 8001fba:	63bb      	str	r3, [r7, #56]	; 0x38
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001fbc:	f107 0320 	add.w	r3, r7, #32
 8001fc0:	4618      	mov	r0, r3
 8001fc2:	f7ff fa73 	bl	80014ac <HAL_RCC_OscConfig>
 8001fc6:	4603      	mov	r3, r0
 8001fc8:	2b00      	cmp	r3, #0
 8001fca:	d001      	beq.n	8001fd0 <SystemClock_Config+0x80>
	{
		Error_Handler();
 8001fcc:	f000 f852 	bl	8002074 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001fd0:	230f      	movs	r3, #15
 8001fd2:	60fb      	str	r3, [r7, #12]
			|RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8001fd4:	2300      	movs	r3, #0
 8001fd6:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001fd8:	2300      	movs	r3, #0
 8001fda:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001fdc:	2300      	movs	r3, #0
 8001fde:	61bb      	str	r3, [r7, #24]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001fe0:	2300      	movs	r3, #0
 8001fe2:	61fb      	str	r3, [r7, #28]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001fe4:	f107 030c 	add.w	r3, r7, #12
 8001fe8:	2100      	movs	r1, #0
 8001fea:	4618      	mov	r0, r3
 8001fec:	f7ff fcd6 	bl	800199c <HAL_RCC_ClockConfig>
 8001ff0:	4603      	mov	r3, r0
 8001ff2:	2b00      	cmp	r3, #0
 8001ff4:	d001      	beq.n	8001ffa <SystemClock_Config+0xaa>
	{
		Error_Handler();
 8001ff6:	f000 f83d 	bl	8002074 <Error_Handler>
	}
}
 8001ffa:	bf00      	nop
 8001ffc:	3750      	adds	r7, #80	; 0x50
 8001ffe:	46bd      	mov	sp, r7
 8002000:	bd80      	pop	{r7, pc}
 8002002:	bf00      	nop
 8002004:	40023800 	.word	0x40023800
 8002008:	40007000 	.word	0x40007000

0800200c <MX_GPIO_Init>:
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void)
{
 800200c:	b580      	push	{r7, lr}
 800200e:	b086      	sub	sp, #24
 8002010:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002012:	1d3b      	adds	r3, r7, #4
 8002014:	2200      	movs	r2, #0
 8002016:	601a      	str	r2, [r3, #0]
 8002018:	605a      	str	r2, [r3, #4]
 800201a:	609a      	str	r2, [r3, #8]
 800201c:	60da      	str	r2, [r3, #12]
 800201e:	611a      	str	r2, [r3, #16]
	/* USER CODE BEGIN MX_GPIO_Init_1 */
	/* USER CODE END MX_GPIO_Init_1 */

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOD_CLK_ENABLE();
 8002020:	2300      	movs	r3, #0
 8002022:	603b      	str	r3, [r7, #0]
 8002024:	4b11      	ldr	r3, [pc, #68]	; (800206c <MX_GPIO_Init+0x60>)
 8002026:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002028:	4a10      	ldr	r2, [pc, #64]	; (800206c <MX_GPIO_Init+0x60>)
 800202a:	f043 0308 	orr.w	r3, r3, #8
 800202e:	6313      	str	r3, [r2, #48]	; 0x30
 8002030:	4b0e      	ldr	r3, [pc, #56]	; (800206c <MX_GPIO_Init+0x60>)
 8002032:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002034:	f003 0308 	and.w	r3, r3, #8
 8002038:	603b      	str	r3, [r7, #0]
 800203a:	683b      	ldr	r3, [r7, #0]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);
 800203c:	2200      	movs	r2, #0
 800203e:	f44f 4170 	mov.w	r1, #61440	; 0xf000
 8002042:	480b      	ldr	r0, [pc, #44]	; (8002070 <MX_GPIO_Init+0x64>)
 8002044:	f7ff f9fb 	bl	800143e <HAL_GPIO_WritePin>

	/*Configure GPIO pins : PD12 PD13 PD14 PD15 */
	GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8002048:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 800204c:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800204e:	2301      	movs	r3, #1
 8002050:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002052:	2300      	movs	r3, #0
 8002054:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002056:	2300      	movs	r3, #0
 8002058:	613b      	str	r3, [r7, #16]
	HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800205a:	1d3b      	adds	r3, r7, #4
 800205c:	4619      	mov	r1, r3
 800205e:	4804      	ldr	r0, [pc, #16]	; (8002070 <MX_GPIO_Init+0x64>)
 8002060:	f7ff f82c 	bl	80010bc <HAL_GPIO_Init>

	/* USER CODE BEGIN MX_GPIO_Init_2 */
	/* USER CODE END MX_GPIO_Init_2 */
}
 8002064:	bf00      	nop
 8002066:	3718      	adds	r7, #24
 8002068:	46bd      	mov	sp, r7
 800206a:	bd80      	pop	{r7, pc}
 800206c:	40023800 	.word	0x40023800
 8002070:	40020c00 	.word	0x40020c00

08002074 <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 8002074:	b480      	push	{r7}
 8002076:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002078:	b672      	cpsid	i
}
 800207a:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 800207c:	e7fe      	b.n	800207c <Error_Handler+0x8>
	...

08002080 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8002080:	f8df d034 	ldr.w	sp, [pc, #52]	; 80020b8 <LoopFillZerobss+0x14>
 
/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8002084:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8002086:	e003      	b.n	8002090 <LoopCopyDataInit>

08002088 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8002088:	4b0c      	ldr	r3, [pc, #48]	; (80020bc <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 800208a:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 800208c:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800208e:	3104      	adds	r1, #4

08002090 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8002090:	480b      	ldr	r0, [pc, #44]	; (80020c0 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8002092:	4b0c      	ldr	r3, [pc, #48]	; (80020c4 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8002094:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8002096:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8002098:	d3f6      	bcc.n	8002088 <CopyDataInit>
  ldr  r2, =_sbss
 800209a:	4a0b      	ldr	r2, [pc, #44]	; (80020c8 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 800209c:	e002      	b.n	80020a4 <LoopFillZerobss>

0800209e <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 800209e:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80020a0:	f842 3b04 	str.w	r3, [r2], #4

080020a4 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80020a4:	4b09      	ldr	r3, [pc, #36]	; (80020cc <LoopFillZerobss+0x28>)
  cmp  r2, r3
 80020a6:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80020a8:	d3f9      	bcc.n	800209e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80020aa:	f7fe fe39 	bl	8000d20 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80020ae:	f000 f819 	bl	80020e4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80020b2:	f7ff fee5 	bl	8001e80 <main>
  bx  lr    
 80020b6:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 80020b8:	20030000 	.word	0x20030000
  ldr  r3, =_sidata
 80020bc:	0800216c 	.word	0x0800216c
  ldr  r0, =_sdata
 80020c0:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 80020c4:	20000050 	.word	0x20000050
  ldr  r2, =_sbss
 80020c8:	20000050 	.word	0x20000050
  ldr  r3, = _ebss
 80020cc:	20000084 	.word	0x20000084

080020d0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80020d0:	e7fe      	b.n	80020d0 <ADC_IRQHandler>

080020d2 <memset>:
 80020d2:	4402      	add	r2, r0
 80020d4:	4603      	mov	r3, r0
 80020d6:	4293      	cmp	r3, r2
 80020d8:	d100      	bne.n	80020dc <memset+0xa>
 80020da:	4770      	bx	lr
 80020dc:	f803 1b01 	strb.w	r1, [r3], #1
 80020e0:	e7f9      	b.n	80020d6 <memset+0x4>
	...

080020e4 <__libc_init_array>:
 80020e4:	b570      	push	{r4, r5, r6, lr}
 80020e6:	4d0d      	ldr	r5, [pc, #52]	; (800211c <__libc_init_array+0x38>)
 80020e8:	4c0d      	ldr	r4, [pc, #52]	; (8002120 <__libc_init_array+0x3c>)
 80020ea:	1b64      	subs	r4, r4, r5
 80020ec:	10a4      	asrs	r4, r4, #2
 80020ee:	2600      	movs	r6, #0
 80020f0:	42a6      	cmp	r6, r4
 80020f2:	d109      	bne.n	8002108 <__libc_init_array+0x24>
 80020f4:	4d0b      	ldr	r5, [pc, #44]	; (8002124 <__libc_init_array+0x40>)
 80020f6:	4c0c      	ldr	r4, [pc, #48]	; (8002128 <__libc_init_array+0x44>)
 80020f8:	f000 f818 	bl	800212c <_init>
 80020fc:	1b64      	subs	r4, r4, r5
 80020fe:	10a4      	asrs	r4, r4, #2
 8002100:	2600      	movs	r6, #0
 8002102:	42a6      	cmp	r6, r4
 8002104:	d105      	bne.n	8002112 <__libc_init_array+0x2e>
 8002106:	bd70      	pop	{r4, r5, r6, pc}
 8002108:	f855 3b04 	ldr.w	r3, [r5], #4
 800210c:	4798      	blx	r3
 800210e:	3601      	adds	r6, #1
 8002110:	e7ee      	b.n	80020f0 <__libc_init_array+0xc>
 8002112:	f855 3b04 	ldr.w	r3, [r5], #4
 8002116:	4798      	blx	r3
 8002118:	3601      	adds	r6, #1
 800211a:	e7f2      	b.n	8002102 <__libc_init_array+0x1e>
 800211c:	08002164 	.word	0x08002164
 8002120:	08002164 	.word	0x08002164
 8002124:	08002164 	.word	0x08002164
 8002128:	08002168 	.word	0x08002168

0800212c <_init>:
 800212c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800212e:	bf00      	nop
 8002130:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002132:	bc08      	pop	{r3}
 8002134:	469e      	mov	lr, r3
 8002136:	4770      	bx	lr

08002138 <_fini>:
 8002138:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800213a:	bf00      	nop
 800213c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800213e:	bc08      	pop	{r3}
 8002140:	469e      	mov	lr, r3
 8002142:	4770      	bx	lr
