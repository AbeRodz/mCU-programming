/*
 * API_delay.c
 *
 *  Created on: Mar 14, 2024
 *      Author: rodz
 */


/* USER CODE END 0 */
#include "API_delay.h"
#include <stdlib.h>
#define DEFAULT_DELAY 100 // default delay constant in milliseconds
/* Private macro -------------------------------------------------------------*/
/* Private variables ---------------------------------------------------------*/
void delayInit( delay_t * delay, tick_t duration );
bool_t delayRead( delay_t * delay );
void delayWrite( delay_t * delay, tick_t duration );

void periodicBlinkInit(delay_t *delays,duty_cycle * duty, size_t numLed);

void periodicBlink(delay_t *delays,duty_cycle * duty, size_t numLed, uint32_t counter);

bool counterCheck(uint32_t count, duty_cycle * duty);

void periodicBlinkInit(delay_t *delays,duty_cycle * duty, size_t numLed){


	for (uint8_t i = 0; i < numLed; i++){
		tick_t duration = (tick_t)(duty[i].duration)*(duty[i].dutyCycle);
		delayInit(&delays[i], duration);

	}

}

void periodicBlink(delay_t *delays,duty_cycle * duty, size_t numLed, uint32_t counter){
	for (uint8_t i = 0; i < numLed; i++){
		while (duty[i].counter > counter && counter > 0){
		if (delayRead(&delays[i])){

				HAL_GPIO_TogglePin(GPIOD, duty[i].led);

			}
		duty[i].counter--;

		}
	}
}

bool counterCheck(uint32_t count, duty_cycle * duty){

	if (duty->counter> 0 && count >0){
		return true;
	}else {
		return false;
	}

}

/**
 * @brief Inits a delay with a specified duration.
 * Function that initiates a delay.
 * @param delay Pointer to a defined delay struct.
 * @param duration in milliseconds.
 * @note if duration is 0 or a negative number, it defaults to DEFAULT_DELAY.
 */
void delayInit(delay_t *delay, tick_t duration){
	if (duration <= 0){
		duration = DEFAULT_DELAY;
	}
	delay->duration = duration;
	delay->running = false;
	delay->startTime = 0;

}

/**
 * @brief Checks if an specific delay has elapsed.
 * Function that checks the current status of a delay and updates its values.
 * @param delay Pointer to a defined delay struct.
 * @retval bool indicating running state.
 */
bool_t delayRead(delay_t *delay){

	tick_t currentTime = HAL_GetTick();
	bool isRunning = delay->running;

	if (isRunning && (currentTime - delay->startTime >= delay->duration)){
		delay->running = false;
		return true;
	}

	if (!isRunning) {
		delay->running = true;
		delay->startTime = currentTime;

	}
	return false;
}



