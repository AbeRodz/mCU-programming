 /**
  ******************************************************************************
  * @file    UART/UART_Printf/Src/main.c
  * @author  MCD Application Team
  * @brief   This example shows how to retarget the C library printf function
  *          to the UART.
  ******************************************************************************
  * @attention
  *
  * <h2><center>&copy; Copyright (c) 2017 STMicroelectronics.
  * All rights reserved.</center></h2>
  *
  * This software component is licensed by ST under BSD 3-Clause license,
  * the "License"; You may not use this file except in compliance with the
  * License. You may obtain a copy of the License at:
  *                        opensource.org/licenses/BSD-3-Clause
  *
  ******************************************************************************
  */

/* Includes ------------------------------------------------------------------*/
#include "main.h"

/** @addtogroup STM32F4xx_HAL_Examples
  * @{
  */

/** @addtogroup UART_Printf
  * @{
  */

/* Private typedef -----------------------------------------------------------*/
/* Private define ------------------------------------------------------------*/

#define DEFAULT_DELAY 100 // default delay constant in milliseconds
/* Private macro -------------------------------------------------------------*/
/* Private variables ---------------------------------------------------------*/
delay_t delay_a;
/* UART handler declaration */


/* Private function prototypes -----------------------------------------------*/


void Error_Handler(void);

void delayInit( delay_t * delay, tick_t duration );
bool_t delayRead( delay_t * delay );
void delayWrite( delay_t * delay, tick_t duration );
delay_t *delaySequence(tick_t sequence[]);
/* Private functions ---------------------------------------------------------*/


void delayInit(delay_t *delay, tick_t duration){
    if (duration <= 0){
        duration = DEFAULT_DELAY;
    }
    delay->duration = duration;
    delay->running = false;
    delay->startTime = 0;

}


bool_t delayRead(delay_t *delay){

    tick_t currentTime = HAL_GetTick();
    bool isRunning = delay->running;

    if ((isRunning) && (currentTime - delay->startTime >= delay->duration)){
        delay->running = false;
        return true;

    }

    delay->running = true;
    delay->startTime = currentTime;
    return  false;


}

void delayWrite(delay_t *delay,tick_t duration){
    if (duration <= 0){
        duration = DEFAULT_DELAY;
    }
    delay->duration = duration;
}

/**
  * @brief  Main program
  * @param  None
  * @retval None
  */
int main(void)
{
  /* STM32F4xx HAL library initialization:
       - Configure the Flash prefetch
       - Systick timer is configured by default as source of time base, but user
         can eventually implement his proper time base source (a general purpose
         timer for example or other time source), keeping in mind that Time base
         duration should be kept 1ms since PPP_TIMEOUT_VALUEs are defined and
         handled in milliseconds basis.
       - Set NVIC Group Priority to 4
       - Low Level Initialization
     */
  HAL_Init();

  /* Configure the system clock to 180 MHz */


  /* Initialize BSP Led for LED2 */
  BSP_LED_Init(1);

  delayInit(&delay_a, DEFAULT_DELAY);
  delayRead(&delay_a);
  /* Infinite loop */
  while (1)
  {
	  if (delayRead(&delay_a)){
		  BSP_LED_Toggle(1);
		  delayRead(&delay_a);
	  }


  }
}


/**
  * @brief  System Clock Configuration
  *         The system Clock is configured as follow :
  *            System Clock source            = PLL (HSE)
  *            SYSCLK(Hz)                     = 180000000
  *            HCLK(Hz)                       = 180000000
  *            AHB Prescaler                  = 1
  *            APB1 Prescaler                 = 4
  *            APB2 Prescaler                 = 2
  *            HSE Frequency(Hz)              = 8000000
  *            PLL_M                          = 8
  *            PLL_N                          = 360
  *            PLL_P                          = 2
  *            PLL_Q                          = 7
  *            PLL_R                          = 2
  *            VDD(V)                         = 3.3
  *            Main regulator output voltage  = Scale1 mode
  *            Flash Latency(WS)              = 5
  * @param  None
  * @retval None
  */


#ifdef  USE_FULL_ASSERT
/**
  * @brief  Reports the name of the source file and the source line number
  *         where the assert_param error has occurred.
  * @param  file: pointer to the source file name
  * @param  line: assert_param error line source number
  * @retval None
  */
void assert_failed(uint8_t *file, uint32_t line)
{
  /* User can add his own implementation to report the file name and line number,
     ex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */

  /* Infinite loop */
  while (1)
  {
  }
}
#endif

/**
  * @}
  */

/**
  * @}
  */

/************************ (C) COPYRIGHT STMicroelectronics *****END OF FILE****/
